<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addedItems" xml:space="preserve">
    <value>Added Items</value>
  </data>
  <data name="deletedItems" xml:space="preserve">
    <value>Deleted Items</value>
  </data>
  <data name="enableRemark" xml:space="preserve">
    <value>Enable to Enter Remark?</value>
  </data>
  <data name="enableTakePicture" xml:space="preserve">
    <value>Enable to Take Picture?</value>
  </data>
  <data name="estimatedTime" xml:space="preserve">
    <value>Estimated Time</value>
  </data>
  <data name="failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="failureReasons" xml:space="preserve">
    <value>Failure Reasons</value>
  </data>
  <data name="isParameterMandatory" xml:space="preserve">
    <value>Is Parameter Mandatory?</value>
  </data>
  <data name="isPictureMandatory" xml:space="preserve">
    <value>Is Picture Mandatory?</value>
  </data>
  <data name="isRemarkMandatory" xml:space="preserve">
    <value>Is Remark Mandatory?</value>
  </data>
  <data name="materialCode" xml:space="preserve">
    <value>Material Code</value>
  </data>
  <data name="parameterName" xml:space="preserve">
    <value>Parameter Name</value>
  </data>
  <data name="parameterType" xml:space="preserve">
    <value>Parameter Type</value>
  </data>
  <data name="ppeImageName" xml:space="preserve">
    <value>PPE Image Name</value>
  </data>
  <data name="quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="safetyInstructions" xml:space="preserve">
    <value>Safety Instructions</value>
  </data>
  <data name="selectionCode" xml:space="preserve">
    <value>Selection Group Code</value>
  </data>
  <data name="separatedByComma" xml:space="preserve">
    <value>(Separated by comma)</value>
  </data>
  <data name="sopLogInfo" xml:space="preserve">
    <value>SOP Log Information</value>
  </data>
  <data name="sopName" xml:space="preserve">
    <value>SOP Name</value>
  </data>
  <data name="sopParamLogInfo" xml:space="preserve">
    <value>SOP Param Log Information</value>
  </data>
  <data name="sopType" xml:space="preserve">
    <value>SOP Type</value>
  </data>
  <data name="sopUploadLogInfo" xml:space="preserve">
    <value>SOP Upload Log Information</value>
  </data>
  <data name="stepSequence" xml:space="preserve">
    <value>Step Sequence</value>
  </data>
  <data name="successfullyDeleted" xml:space="preserve">
    <value>Successfully Deleted</value>
  </data>
  <data name="successfullyInserted" xml:space="preserve">
    <value>Successfully Inserted</value>
  </data>
  <data name="successfullyUpdated" xml:space="preserve">
    <value>Successfully Updated</value>
  </data>
  <data name="taskDescription" xml:space="preserve">
    <value>Operation Description</value>
  </data>
  <data name="taskName" xml:space="preserve">
    <value>Operation Name</value>
  </data>
  <data name="toolsImageName" xml:space="preserve">
    <value>Tools Name </value>
  </data>
  <data name="unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="UOM" xml:space="preserve">
    <value>UOM</value>
  </data>
  <data name="updatedItems" xml:space="preserve">
    <value>Updated Items</value>
  </data>
  <data name="uploadDocumentReference" xml:space="preserve">
    <value>Upload Folder Reference ID</value>
  </data>
  <data name="uploadReadme" xml:space="preserve">
    <value>Keep images or document related to any task inside folder TaskReferenceID_1, TaskReferenceID_2 etc. Rename folder TaskReferenceID_1, TaskReferenceID_2 etc to any number. Refer same number in the templates against the task. It simply means that attach all the documents or images inside the folder to the task referring that folder number.</value>
  </data>
  <data name="sopSparePartsLogInfo" xml:space="preserve">
    <value>SOP Spare Parts Log Information</value>
  </data>
</root>