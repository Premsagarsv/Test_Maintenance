using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Vegam_MaintenanceService_DAL;
using System.Data;
using System.Configuration;
using System.Data.Common;
using System.Runtime.Remoting.Messaging;
using System.Reflection;
using System.IO;
using OfficeOpenXml;
using System.Drawing;
using OfficeOpenXml.Style;
using System.Data.OleDb;
using System.Globalization;
using Ical.Net.DataTypes;
using Ical.Net;
using System.IO.Compression;
using System.Web.Script.Serialization;
using System.Text.RegularExpressions;
using System.Net;

namespace Vegam_MaintenanceService
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "MaintenanceService" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select MaintenanceService.svc or MaintenanceService.svc.cs at the Solution Explorer and start debugging.

    public class MaintenanceService : IMaintenanceService
    {
        /*Functional Location Info || Equipment Info || Equipment Model || Measuring Point*/
        delegate void DownloadFLocationInfo(Database db, FLocationFilterInfo filter, string fileName);
        delegate void UploadFunctionalLocationInfo(Database db, BasicParam basicParam, string fileName, string unzipedFolderName);
        delegate void DownloadEquipmetExcelInfo(Database db, EquipmentFilterInfo equipmentFilterInfo, string fileName);
        delegate void UploadEquipmentInfo(Database db, BasicParam basicParam, string fileName, string unzipedFolderName);
        delegate void DownloadMeasuringPointExcelTemplate(Database db, BasicParam basicParam, string fileName);
        delegate void UploadMeasuringPointInfo(Database db, BasicParam basicParam, string fileName, string unzipedFolderName);
        delegate void DownloadMeasuringPointInfo(Database db, MeasuringPointFilterInfo filter, string fileName);
        
        delegate void DownloadExcelTemplate(Database db, BasicParam basicParam, string fileName);
        delegate void UploadFilesInfo(Database db, BasicParam basicParam, string fileName);
        delegate void UploadZipFilesInfo(Database db, BasicParam basicParam, string fileName);
        delegate void DownloadSparePartsInfo(Database db, SparePartsFilterInfo filter, string fileName);
        
        delegate void DownloadWorkGroupExcelTemplate(Database db, BasicParam basicParam, string fileName);
        delegate void DownloadWorkGroupInfo(Database db, WorkGroupFilterInfo filter, string fileName);
        delegate void UploadWorkGroupInfo(Database db, BasicParam basicParam, string fileName);

        #region Common
        private static void send(IAsyncResult ar)
        {
            string callerMethodName = string.Empty;
            try
            {
                AsyncResult result = (AsyncResult)ar;
                Type delegateType = result.AsyncDelegate.GetType();

                MethodInfo methodInfo = delegateType.GetMethod("EndInvoke");
                callerMethodName = methodInfo.DeclaringType.FullName;
                methodInfo.Invoke(result.AsyncDelegate, new object[] { ar });
            }
            catch (Exception ex)
            {
                Common.LogException(ex, callerMethodName, "Error occured in async call", "Vegam_SMSAdminService", System.Reflection.MethodBase.GetCurrentMethod().Name, string.Empty);
            }
        }

        public SiteDateTimeFormatInfo GetSiteDateTimeFormatInfo(int siteID)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                return Common.GetSiteDateTimeFormatInfo(db, siteID);
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching site date and time format", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + siteID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public DateTimeInfo GetSiteCurrentDateTime(int siteID)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);

                DateTimeInfo currentDateTimeInfo = new DateTimeInfo();
                currentDateTimeInfo.CurrentDate = currentDate;
                currentDateTimeInfo.CurrentTime = currentTime;

                return currentDateTimeInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching site current date and time", "Vegam_MainteananceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + siteID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public List<EnumTypeInfo> GetEnumInfoList(BasicParam basicParam, string EnumType)
        {
            IDataReader dataReaderEnumValues = null;
            try
            {
                EnumTypeInfo enumObj = null;
                List<EnumTypeInfo> enumProcessList = new List<EnumTypeInfo>();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                dataReaderEnumValues = DynamicGrid.DynamicGridDAL.GetEnumTypeValues(db, EnumType);
                while (dataReaderEnumValues.Read())
                {
                    enumObj = new EnumTypeInfo();
                    enumObj.TypeValue = Common.GetSafeString(dataReaderEnumValues, "FVALUE");
                    enumObj.DisplayName = Common.GetSafeString(dataReaderEnumValues, "FTEXT");
                    enumObj.ImageName = Common.GetSafeString(dataReaderEnumValues, "FIMAGENAME");
                    if (Common.GetSafeString(dataReaderEnumValues, "FISDEFAULT") == "Y")
                    {
                        enumObj.IsDefault = true;
                    }
                    else
                    {
                        enumObj.IsDefault = false;
                    }

                    enumProcessList.Add(enumObj);
                }
                dataReaderEnumValues.Close();

                return enumProcessList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching enum type info for : " + EnumType, "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID:" + basicParam.SiteID + ",UserID:" + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEnumValues != null && !dataReaderEnumValues.IsClosed)
                    dataReaderEnumValues.Close();
            }
        }

        #endregion

        #region Generate Code


        public string GenerateRandomCode(BasicParam basicParam, InfoType infoType)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    string generatedRandomCode = string.Empty;

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    generatedRandomCode = MaintenanceDAL.GenerateRandomCode(db, basicParam.SiteID);

                    if (generatedRandomCode.Length < 4)
                        generatedRandomCode = generatedRandomCode.PadLeft(4, '0');
                    if (infoType == InfoType.Equipment)
                        generatedRandomCode = Convert.ToChar(InfoType.Equipment) + generatedRandomCode;
                    else if (infoType == InfoType.Location)
                        generatedRandomCode = Convert.ToChar(InfoType.Location) + generatedRandomCode;
                    else if (infoType == InfoType.Measuring_Point)
                        generatedRandomCode = 'M' + generatedRandomCode;

                    return generatedRandomCode;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintenanceService", "Error while generating random code ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + basicParam.SiteID + ", UserID : " + basicParam.UserID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return string.Empty;
            }
        }
        #endregion

        #region Maintenance Feature Info
        public List<MaintenanceFeatureInfo> GetMaintenanceFeatureInfo(BasicParam basicParam, string featureName)
        {
            IDataReader dataReaderMaintenanceFeature = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintenanceFeatureInfo> maintenanceFeatureList = new List<MaintenanceFeatureInfo>();
                MaintenanceFeatureInfo maintenanceFeatureInfo;

                dataReaderMaintenanceFeature = MaintenanceDAL.GetMaintenanceFeatures(db, basicParam.SiteID, 0, featureName);
                while (dataReaderMaintenanceFeature.Read())
                {
                    maintenanceFeatureInfo = new MaintenanceFeatureInfo();
                    maintenanceFeatureInfo.TabName = Common.GetSafeString(dataReaderMaintenanceFeature, "FFEATURENAME");
                    maintenanceFeatureInfo.TabPath = Common.GetSafeString(dataReaderMaintenanceFeature, "FPAGETOLOAD");
                    maintenanceFeatureList.Add(maintenanceFeatureInfo);
                }
                dataReaderMaintenanceFeature.Close();
                return maintenanceFeatureList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting maintenance feature info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID + ", FeatureName: " + featureName);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderMaintenanceFeature != null && !dataReaderMaintenanceFeature.IsClosed)
                    dataReaderMaintenanceFeature.Close();
            }
        }

        #endregion

        #region Functional Location Info
        public FLocationListInfo GetAllFunctionalLocInfo(FLocationFilterInfo locationFilterInfo)
        {
            IDataReader dataReaderFLocationInfo = null;
            try
            {

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                DataTable locationWorkGroupTable = null;
                bool restrictAccess = true;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                Common.GetSiteDateTimeFormat(db, locationFilterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);
                string ImagePath = ConfigurationManager.AppSettings["FunctionalLocImagePath"].ToString().TrimEnd('/') + "/" + locationFilterInfo.SiteID + "/" + "Thumbnail";

                FLocationListInfo functionalLocationListInfo = new FLocationListInfo();
                FLocationInfo functionalLocInfo = null;

                int accessLevelID = Common.GetUserAccessLevelID(db, locationFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, null, locationFilterInfo.SiteID, locationFilterInfo.PageSize, locationFilterInfo.PageIndex, 0, string.Empty, string.Empty, locationFilterInfo.FunctionalLocIDs, true, false, locationFilterInfo.SortType, locationFilterInfo.UserID, restrictAccess);
                while (dataReaderFLocationInfo.Read())
                {
                    functionalLocInfo = new FLocationInfo();
                    functionalLocInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    functionalLocInfo.FunctionalLocationName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    functionalLocInfo.FunctionalLocationDesc = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONDESC");
                    functionalLocInfo.ParentLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FPARENTLOCATIONID");
                    int updatedDate = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDON");
                    int updatedTime = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDTIME");

                    if (updatedDate > 0)
                        functionalLocInfo.FunctionalLocationUpdatedOn = Common.GetDateFormat(updatedDate, siteDateFormat) + " " + Common.GetTimeFormat(updatedTime, siteTimeFormat);

                    string imageName = Common.GetSafeString(dataReaderFLocationInfo, "FIMAGENAME");
                    string imageUrl = string.Empty;

                    if (imageName.Length > 0)
                        imageUrl = ImagePath + "/" + imageName;

                    if (imageUrl.Length > 0)
                        functionalLocInfo.FunctionalLocationImagePath = imageUrl;
                    else
                        functionalLocInfo.FunctionalLocationImagePath = null;

                    if (functionalLocationListInfo.TotalRecords == 0 && locationFilterInfo.PageSize > 0)
                        functionalLocationListInfo.TotalRecords = Common.GetSafeInt32(dataReaderFLocationInfo, "FCOUNT");

                    locationWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, locationFilterInfo.SiteID, 0, functionalLocInfo.FunctionalLocationID, "LOCATION");

                    if (locationWorkGroupTable != null && locationWorkGroupTable.Rows.Count > 0)
                    {
                        DataRow[] assignedWorkGroupRows = locationWorkGroupTable.Select("FREFERENCEID=" + functionalLocInfo.FunctionalLocationID);
                        foreach (DataRow workGroupRow in assignedWorkGroupRows)
                        {
                            TypeValueInfo wGroupInfo = new TypeValueInfo();
                            wGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                            wGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                            functionalLocInfo.AssignedWorkGroupList.Add(wGroupInfo);
                        }
                    }

                    functionalLocationListInfo.FunctionalLocationListInfo.Add(functionalLocInfo);
                }
                dataReaderFLocationInfo.Close();

                return functionalLocationListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional location records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + locationFilterInfo.SiteID + ";UserID: " + locationFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }

        }

        public FLocationListDetails GetAllFunctionalLocList(FLocationFilterInfo filterFLocInfo)
        {
            IDataReader dataReaderFLocationInfo = null;
            bool restrictAccess = true;
            try
            {
                FLocationListDetails fLocationListDetails = new FLocationListDetails();
                FLocationDetails functionalDetailInfo = null;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int accessLevelID = Common.GetUserAccessLevelID(db, filterFLocInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocations(db, filterFLocInfo.SiteID, filterFLocInfo.PageSize, filterFLocInfo.PageIndex, filterFLocInfo.FLocationNameSearch, 0, filterFLocInfo.SortType, filterFLocInfo.UserID, restrictAccess);
                while (dataReaderFLocationInfo.Read())
                {
                    functionalDetailInfo = new FLocationDetails();
                    functionalDetailInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    functionalDetailInfo.FunctionalLocationName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    fLocationListDetails.FunctionalLocationListInfo.Add(functionalDetailInfo);

                    if (fLocationListDetails.TotalRecords == 0 && filterFLocInfo.PageSize > 0)
                        fLocationListDetails.TotalRecords = Common.GetSafeInt32(dataReaderFLocationInfo, "FCOUNT");
                }
                dataReaderFLocationInfo.Close();

                return fLocationListDetails;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional locations list info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + filterFLocInfo.SiteID + " ;UserID : " + filterFLocInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        public FLocationInfo GetFLocationEditInfo(BasicParam basicParam, int fLocationID)
        {
            IDataReader dataReaderFLocationInfo = null;
            bool restrictAccess = true;
            try
            {
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                FLocationInfo functionalLocInfo = null;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetSiteDateTimeFormat(db, basicParam.SiteID, ref siteDateFormat, ref siteTimeFormat);

                string ImagePath = ConfigurationManager.AppSettings["FunctionalLocImagePath"].ToString().TrimEnd('/') + "/" + basicParam.SiteID + "/" + "Thumbnail";

                int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, null, basicParam.SiteID, 0, 0, 0, string.Empty, string.Empty, fLocationID.ToString(), true, false, string.Empty, basicParam.UserID, restrictAccess);
                if (dataReaderFLocationInfo.Read())
                {
                    functionalLocInfo = new FLocationInfo();
                    functionalLocInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    functionalLocInfo.FunctionalLocationCode = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONCODE");
                    functionalLocInfo.FunctionalLocationName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    functionalLocInfo.FunctionalLocationDesc = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONDESC");
                    functionalLocInfo.ParentLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FPARENTLOCATIONID");
                    int updatedDate = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDON");
                    int updatedTime = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDTIME");

                    if (updatedDate > 0)
                        functionalLocInfo.FunctionalLocationUpdatedOn = Common.GetDateFormat(updatedDate, siteDateFormat) + " " + Common.GetTimeFormat(updatedTime, siteTimeFormat);

                    string imageName = Common.GetSafeString(dataReaderFLocationInfo, "FIMAGENAME");
                    string imageUrl = string.Empty;

                    if (imageName.Length > 0)
                        imageUrl = ImagePath + "/" + imageName;

                    if (imageUrl.Length > 0)
                        functionalLocInfo.FunctionalLocationImagePath = imageUrl;
                    else
                        functionalLocInfo.FunctionalLocationImagePath = null;
                }
                dataReaderFLocationInfo.Close();

                DataTable locationWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, basicParam.SiteID, 0, fLocationID, "LOCATION");
                foreach (DataRow locationRow in locationWorkGroupTable.Rows)
                {
                    TypeValueInfo wGroupInfo = new TypeValueInfo();
                    wGroupInfo.TypeValue = Convert.ToInt32(locationRow["FMASTERID"]);
                    wGroupInfo.DisplayName = Convert.ToString(locationRow["FNAME"]);
                    functionalLocInfo.AssignedWorkGroupList.Add(wGroupInfo);
                }

                return functionalLocInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional location edit info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + basicParam.SiteID + " ;UserID : " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        public AddFLocationReturnInfo InsertOrUpdateFunctionalLocInfo(BasicParam basicParam, FLocationInfo functionalLocInfo)
        {
            IDataReader dataReaderFLocationInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                string description = string.Empty;
                string descInEnglish = string.Empty;
                int functionalLocationID = 0;
                bool updateFLocationStatus = false;
                char status = 'N';
                List<int> deletedWorkGroupIDList = new List<int>();
                List<int> newWorkGroupIDList = new List<int>();
                List<int> locationIDList = new List<int>();
                List<int> locationEquipmentIDList = new List<int>();
                DataTable assignedUserGroupTable = null;
                AddFLocationReturnInfo returnInfo = new AddFLocationReturnInfo();

                if (MaintenanceDAL.CheckFunctionalLocationCodeExist(db, null, basicParam.SiteID, functionalLocInfo.FunctionalLocationCode, functionalLocInfo.FunctionalLocationID))
                {
                    returnInfo.Code = -1;//functional location code already exists     
                    return returnInfo;
                }

                //Check functional location exist or not
                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, null, basicParam.SiteID, 0, 0, functionalLocInfo.FunctionalLocationID, functionalLocInfo.FunctionalLocationName, functionalLocInfo.FunctionalLocationCode, string.Empty, false, false, string.Empty, 0, false);
                if (dataReaderFLocationInfo.Read())
                {
                    status = Convert.ToChar(Common.GetSafeString(dataReaderFLocationInfo, "FSTATUS"));
                    functionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");

                    if (status == 'A')
                    {
                        returnInfo.Code = -1;//already exist functional location name                                               
                    }
                    else
                    {
                        if (functionalLocInfo.FunctionalLocationID == 0)
                            updateFLocationStatus = true;  //while inserting record updating functional location status if status is InActive 
                        else
                            returnInfo.Code = -2;   //while updating cannot update functional location, if it is already exist in 'InActive' state                                                 
                    }
                }
                dataReaderFLocationInfo.Close();

                if (returnInfo.Code != 0)
                    return returnInfo;

                if (functionalLocInfo.FunctionalLocationID != 0 && !updateFLocationStatus)
                {
                    assignedUserGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, basicParam.SiteID, 0, functionalLocInfo.FunctionalLocationID, "LOCATION");
                    foreach (DataRow workGrouprow in assignedUserGroupTable.Rows)
                    {
                        deletedWorkGroupIDList.Add(Convert.ToInt32(workGrouprow["FMASTERID"]));
                    }

                    foreach (TypeValueInfo keyValueInfo in functionalLocInfo.AssignedWorkGroupList)
                    {
                        if (!deletedWorkGroupIDList.Contains(keyValueInfo.TypeValue))
                        {
                            newWorkGroupIDList.Add(keyValueInfo.TypeValue);
                        }
                        else
                        {
                            deletedWorkGroupIDList.RemoveAll(wID => wID == keyValueInfo.TypeValue);
                        }
                    }

                    if (deletedWorkGroupIDList.Count > 0 && !functionalLocInfo.WorkGroupDeletionConfirmed)
                    {
                        string deletedWorkGroupIDListString = string.Join(",", deletedWorkGroupIDList);

                        DataTable workGroupEquipmentTable = MaintenanceDAL.CheckWorkGroupAssignedForEquipments(db, basicParam.SiteID, functionalLocInfo.FunctionalLocationID, 0, deletedWorkGroupIDListString);
                        DataTable workGroupLocationTable = MaintenanceDAL.CheckWorkGroupAssignedForSubLocations(db, basicParam.SiteID, functionalLocInfo.FunctionalLocationID, deletedWorkGroupIDListString);

                        if (workGroupEquipmentTable.Rows.Count > 0 || workGroupLocationTable.Rows.Count > 0)
                        {
                            foreach (DataRow workGroupRow in workGroupLocationTable.Rows)
                            {
                                string workGroupName = Convert.ToString(workGroupRow["FNAME"]);
                                if (!returnInfo.MessageList.Contains(workGroupName))
                                    returnInfo.MessageList.Add(workGroupName);
                            }

                            foreach (DataRow workGroupRow in workGroupEquipmentTable.Rows)
                            {
                                string workGroupName = Convert.ToString(workGroupRow["FNAME"]);
                                if (!returnInfo.MessageList.Contains(workGroupName))
                                    returnInfo.MessageList.Add(workGroupName);
                            }

                            returnInfo.Code = -3;//Deleted workgroup is assigned to location, equipment.                            
                        }

                        if (returnInfo.Code != 0)
                            return returnInfo;
                    }

                    if (newWorkGroupIDList.Count > 0 || deletedWorkGroupIDList.Count > 0)
                    {
                        DataTable subLocationsTable = MaintenanceDAL.GetSubFuncationLocationsForParent(db, basicParam.SiteID, functionalLocInfo.FunctionalLocationID);
                        foreach (DataRow locationRow in subLocationsTable.Rows)
                        {
                            locationIDList.Add(Convert.ToInt32(locationRow["FLOCATIONID"]));
                        }

                        string locationListString = locationIDList.Count > 0 ? (string.Join(",", locationIDList) + "," + functionalLocInfo.FunctionalLocationID) : functionalLocInfo.FunctionalLocationID.ToString();

                        DataTable locationEquipmentTable = MaintenanceDAL.GetLocationEquipments(db, basicParam.SiteID, locationListString);
                        foreach (DataRow equipmenetRow in locationEquipmentTable.Rows)
                        {
                            locationEquipmentIDList.Add(Convert.ToInt32(equipmenetRow["FEQUIPMENTID"]));
                        }
                    }
                }

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        if (functionalLocInfo.FunctionalLocationID == 0 || updateFLocationStatus)
                        {
                            #region Insert or Update Functional Location Info
                            if (functionalLocationID == 0 || !updateFLocationStatus)
                            {
                                //Insert Functional Location Info
                                returnInfo.Code = MaintenanceDAL.InsertFunctionalLocationInfo(db, transaction, basicParam.SiteID, functionalLocInfo.FunctionalLocationCode, functionalLocInfo.FunctionalLocationName, functionalLocInfo.FunctionalLocationDesc, functionalLocInfo.ParentLocationID,
                                       functionalLocInfo.FunctionalLocationImageName, basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoAdded.Replace("[XXX]", functionalLocInfo.FunctionalLocationName.Trim().ToUpper());
                                descInEnglish = "Successfully inserted information for functional location name : " + functionalLocInfo.FunctionalLocationName.Trim().ToUpper();
                                //CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }
                            else
                            {
                                if (status == 'I')
                                {
                                    //active existing record
                                    MaintenanceDAL.UpdateFunctionalLocStatus(db, transaction, basicParam.SiteID, functionalLocationID, 'A', basicParam.UserID, currentDate, currentTime);

                                    #region Log Information
                                    //Log Information
                                    description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationStatus.Replace("[XXX]", functionalLocInfo.FunctionalLocationName.Trim().ToUpper());
                                    descInEnglish = "Successfully updated status active for functional location name : " + functionalLocInfo.FunctionalLocationName.Trim().ToUpper();
                                    //CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                    #endregion
                                }

                                //Update Functional Location Info
                                MaintenanceDAL.UpdateFunctionalLocationInfo(db, transaction, basicParam.SiteID, functionalLocationID, functionalLocInfo.FunctionalLocationCode, functionalLocInfo.FunctionalLocationName, functionalLocInfo.FunctionalLocationDesc, functionalLocInfo.ParentLocationID,
                                    functionalLocInfo.FunctionalLocationImageName, basicParam.UserID, currentDate, currentTime);

                                MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", functionalLocationID.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoUpdated.Replace("[XXX]", functionalLocInfo.FunctionalLocationName.Trim().ToUpper());
                                descInEnglish = "Successfully updated information for functional location name : " + functionalLocInfo.FunctionalLocationName.Trim().ToUpper();
                                //CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion

                                returnInfo.Code = functionalLocationID;
                            }

                            foreach (TypeValueInfo keyValueInfo in functionalLocInfo.AssignedWorkGroupList)
                            {
                                if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", returnInfo.Code, keyValueInfo.TypeValue) == false)
                                    MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", returnInfo.Code, keyValueInfo.TypeValue, basicParam.UserID, currentDate, currentTime);
                                else
                                    MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", returnInfo.Code, keyValueInfo.TypeValue, currentDate, currentTime, basicParam.UserID);
                            }

                            //result = -2; //successfully inserted functional location
                            #endregion
                        }
                        else
                        {
                            //Update Functional Location info
                            MaintenanceDAL.UpdateFunctionalLocationInfo(db, transaction, basicParam.SiteID, functionalLocInfo.FunctionalLocationID, functionalLocInfo.FunctionalLocationCode, functionalLocInfo.FunctionalLocationName, functionalLocInfo.FunctionalLocationDesc, functionalLocInfo.ParentLocationID,
                                functionalLocInfo.FunctionalLocationImageName, basicParam.UserID, currentDate, currentTime);

                            foreach (int workGroupID in newWorkGroupIDList)
                            {
                                if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", functionalLocInfo.FunctionalLocationID, workGroupID) == false)
                                    MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", functionalLocInfo.FunctionalLocationID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                else
                                    MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", functionalLocInfo.FunctionalLocationID, workGroupID, currentDate, currentTime, basicParam.UserID);

                                if (functionalLocInfo.AsignNewWorkGroupsToChild || assignedUserGroupTable.Rows.Count == 0 || assignedUserGroupTable.Rows.Count == deletedWorkGroupIDList.Count)
                                {
                                    //User confirmed to assign work groups to its descendants (or) Assigning work group to parent for first time (or) deleting all existing workgroups from parent and assigning new workgroups.
                                    //in any of te above case, adding the work groups to all its sub locations and equipments
                                    foreach (int subLocationID in locationIDList)
                                    {
                                        if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID) == false)
                                            MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                        else
                                            MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                    }

                                    foreach (int equipmentID in locationEquipmentIDList)
                                    {
                                        if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                            MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                        else
                                            MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                    }
                                }
                            }

                            if (deletedWorkGroupIDList.Count > 0)
                            {
                                string deletedUserWorkGroupIDList = string.Join(",", deletedWorkGroupIDList);
                                string locationIDListString = locationIDList.Count > 0 ? (string.Join(",", locationIDList) + "," + functionalLocInfo.FunctionalLocationID) : functionalLocInfo.FunctionalLocationID.ToString();

                                MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", locationIDListString, deletedUserWorkGroupIDList, basicParam.UserID, currentDate, currentTime);

                                if (locationEquipmentIDList.Count > 0)
                                {
                                    string equipmentIDListString = string.Join(",", locationEquipmentIDList);
                                    MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentIDListString, deletedUserWorkGroupIDList, basicParam.UserID, currentDate, currentTime);
                                }

                                if ((locationIDList.Count > 0 || locationEquipmentIDList.Count > 0) && (newWorkGroupIDList.Count == 0 || functionalLocInfo.AsignNewWorkGroupsToChild == false))
                                {
                                    /* If parent has work group assigned, the it is mandatory for its sub locations and equipments to have atleast one work group assigned.
                                       While deleting a work group from parent, we are removing it from its sub locations and equipments, so there could be a chance that all assigned any sub locations or equipments might have got removed.
                                       So making sure that if any sub location or equipment doesn't have work group assigned, if any then asssigning all the work groups it */
                                    List<int> assignedWorkGroupIDList = new List<int>();

                                    foreach (DataRow workGroupRow in assignedUserGroupTable.Rows)
                                    {
                                        int workGroupID = Convert.ToInt32(workGroupRow["FMASTERID"]);
                                        if (!deletedWorkGroupIDList.Contains(workGroupID))
                                            assignedWorkGroupIDList.Add(workGroupID);
                                    }

                                    if (newWorkGroupIDList.Count > 0)
                                        assignedWorkGroupIDList.AddRange(newWorkGroupIDList);

                                    if (assignedWorkGroupIDList.Count > 0)
                                    {
                                        if (locationIDList.Count > 0)
                                        {
                                            DataTable locationTable = MaintenanceDAL.GetWorkGroupNotAssignedLocations(db, transaction, basicParam.SiteID, string.Join(",", locationIDList));

                                            foreach (DataRow locationRow in locationTable.Rows)
                                            {
                                                int locationID = Convert.ToInt32(locationRow["FLOCATIONID"]);
                                                foreach (int workGroupID in assignedWorkGroupIDList)
                                                {
                                                    if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID) == false)
                                                        MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                                    else
                                                        MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                                }
                                            }
                                        }

                                        if (locationEquipmentIDList.Count > 0)
                                        {
                                            DataTable equipmentTable = MaintenanceDAL.GetWorkGroupNotAssignedEquipments(db, transaction, basicParam.SiteID, string.Join(",", locationEquipmentIDList));

                                            foreach (DataRow equipmentRow in equipmentTable.Rows)
                                            {
                                                int equipmentID = Convert.ToInt32(equipmentRow["FEQUIPMENTID"]);
                                                foreach (int workGroupID in assignedWorkGroupIDList)
                                                {
                                                    if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                                        MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                                    else
                                                        MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            #region Log Information
                            //Log Information
                            description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoUpdated.Replace("[XXX]", functionalLocInfo.FunctionalLocationName.Trim().ToUpper());
                            descInEnglish = "Successfully updated information for functional location name : " + functionalLocInfo.FunctionalLocationName.Trim().ToUpper();
                            //CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            returnInfo.Code = functionalLocInfo.FunctionalLocationID;//successfully updated functional location
                        }
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
                return returnInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting or updating functional location info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        public int DeleteFunctionalLocInfo(BasicParam basicParam, int functionalLocationID)
        {
            IDataReader dataReaderFLocationInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                int result = 0;
                string functionalLocName = string.Empty;
                int checkIsParentLocation = 0;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                if (MaintenanceDAL.CheckFunctionalLocationExist(db, null, basicParam.SiteID, functionalLocationID))
                {
                    return 1;//can't delete functional location, already exist in equipment table                    
                }
                else
                {
                    dataReaderFLocationInfo = MaintenanceDAL.CheckIsParentFunctionalLocation(db, null, basicParam.SiteID, functionalLocationID);
                    if (dataReaderFLocationInfo.Read())
                    {
                        functionalLocName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                        checkIsParentLocation = Common.GetSafeInt32(dataReaderFLocationInfo, "FCOUNT");
                    }
                    dataReaderFLocationInfo.Close();
                    if (checkIsParentLocation > 0)
                    {
                        return result = 3; // location is assigned to another location so can't delete  
                    }
                }

                DbTransaction transaction = null;

                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        //mark status In-active all Measuring Points related to functional location
                        MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, functionalLocationID, Convert.ToChar(InfoType.Location), 0, 'I', basicParam.UserID, currentDate, currentTime);

                        //make status In-active for functional location
                        MaintenanceDAL.UpdateFunctionalLocStatus(db, transaction, basicParam.SiteID, functionalLocationID, 'I', basicParam.UserID, currentDate, currentTime);

                        MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", functionalLocationID.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);

                        #region Log Information
                        if (functionalLocName.Length > 0)
                        {
                            string description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoDeleted.Replace("[XXX]", functionalLocName.Trim());
                            string descInEnglish = "Successfully deleted information for functional location name : " + functionalLocName.Trim();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                        }
                        #endregion

                        result = 2;//functional location deleted successfully
                        transaction.Commit();

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }

            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting functional location info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        private FLocationListDetails GetAllFunctionalLocList(Database db, FLocationFilterInfo filterFLocInfo)
        {
            IDataReader dataReaderFLocationInfo = null;
            bool restrictAccess = true;
            try
            {
                FLocationListDetails fLocationListDetails = new FLocationListDetails();
                FLocationDetails functionalDetailInfo = null;

                int accessLevelID = Common.GetUserAccessLevelID(db, filterFLocInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocations(db, filterFLocInfo.SiteID, filterFLocInfo.PageSize, filterFLocInfo.PageIndex, filterFLocInfo.FLocationNameSearch, 0, filterFLocInfo.SortType, filterFLocInfo.UserID, restrictAccess);
                while (dataReaderFLocationInfo.Read())
                {
                    functionalDetailInfo = new FLocationDetails();
                    functionalDetailInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    functionalDetailInfo.FunctionalLocationName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    fLocationListDetails.FunctionalLocationListInfo.Add(functionalDetailInfo);

                    if (fLocationListDetails.TotalRecords == 0 && filterFLocInfo.PageSize > 0)
                        fLocationListDetails.TotalRecords = Common.GetSafeInt32(dataReaderFLocationInfo, "FCOUNT");
                }
                dataReaderFLocationInfo.Close();

                return fLocationListDetails;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional locations list info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + filterFLocInfo.SiteID + " ;UserID : " + filterFLocInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        public List<HierarchicalListInfo> GetFunctionalLocListForHierarchicalDropDown(FLocationFilterInfo fLocationFilterInfo)
        {
            IDataReader dataReaderInfo = null;
            bool restrictAccess = true;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<HierarchicalListInfo> functionalLocationListInfo = new List<HierarchicalListInfo>();
                List<HierarchicalListInfo> hierarchicalListInfo = new List<HierarchicalListInfo>();

                HierarchicalListInfo functionalDetailInfo = null;

                int accessLevelID = Common.GetUserAccessLevelID(db, fLocationFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }
                if (fLocationFilterInfo.ConsiderFLoc)
                {
                    dataReaderInfo = MaintenanceDAL.GetFunctionalLocListForHierarchicalDropDown(db, fLocationFilterInfo.SiteID, fLocationFilterInfo.UserID, restrictAccess);
                    while (dataReaderInfo.Read())
                    {

                        functionalDetailInfo = new HierarchicalListInfo();
                        functionalDetailInfo.TypeValue = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                        functionalDetailInfo.DisplayName = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");
                        functionalDetailInfo.ParentID = Common.GetSafeInt32(dataReaderInfo, "FPARENTLOCATIONID");
                        if (functionalDetailInfo.UserDefaultLocation == null)
                            functionalDetailInfo.UserDefaultLocation = Common.GetSafeString(dataReaderInfo, "FLOCATIONIDS");
                        functionalLocationListInfo.Add(functionalDetailInfo);
                    }
                    dataReaderInfo.Close();
                }
                else
                {
                    dataReaderInfo = MaintenanceDAL.GetEquipmentListForHierarchicalDropDown(db, fLocationFilterInfo.SiteID, fLocationFilterInfo.UserID, fLocationFilterInfo.FunctionalLocIDs, restrictAccess);
                    while (dataReaderInfo.Read())
                    {

                        functionalDetailInfo = new HierarchicalListInfo();
                        functionalDetailInfo.TypeValue = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                        functionalDetailInfo.DisplayName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                        functionalDetailInfo.ParentID = Common.GetSafeInt32(dataReaderInfo, "FPARENTEQUIPMENTID");
                        if (functionalDetailInfo.UserDefaultEquipment == null)
                            functionalDetailInfo.UserDefaultEquipment = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTIDS");
                        functionalLocationListInfo.Add(functionalDetailInfo);
                    }
                    dataReaderInfo.Close();
                }

                for (int index = 0; index < functionalLocationListInfo.Count; index++)
                {
                    HierarchicalListInfo hierarchicalList = new HierarchicalListInfo().BindHierarchicalListTree(functionalLocationListInfo[index], functionalLocationListInfo);
                    hierarchicalListInfo.Add(hierarchicalList);
                }

                return hierarchicalListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional locations list for hierarchical dropdown", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + fLocationFilterInfo.SiteID + " ;UserID : " + fLocationFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<LocationWorkGroupInfo> GetParentLocationDropDown(FLocationFilterInfo parentlocationFilter)
        {
            IDataReader dataReaderInfo = null;
            bool restrictAccess = true;
            try
            {
                List<LocationWorkGroupInfo> locationWorkGroupInfoList = new List<LocationWorkGroupInfo>();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                DataTable locationWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, parentlocationFilter.SiteID, 0, 0, "LOCATION");

                int accessLevelID = Common.GetUserAccessLevelID(db, parentlocationFilter.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetParentFunctionalLocationDropDown(db, null, parentlocationFilter.SiteID, parentlocationFilter.FLocationID, parentlocationFilter.UserID, restrictAccess, 0);
                while (dataReaderInfo.Read())
                {
                    LocationWorkGroupInfo locationInfo = new LocationWorkGroupInfo();
                    locationInfo.TypeValue = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                    locationInfo.DisplayName = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");

                    if (locationWorkGroupTable.Rows.Count > 0)
                    {
                        DataRow[] assignedWorkGroupRows = locationWorkGroupTable.Select("FREFERENCEID=" + locationInfo.TypeValue);
                        foreach (DataRow workGroupRow in assignedWorkGroupRows)
                        {
                            TypeValueInfo wGroupInfo = new TypeValueInfo();
                            wGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                            wGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                            locationInfo.WorkGroupInfoList.Add(wGroupInfo);
                        }
                    }
                    locationWorkGroupInfoList.Add(locationInfo);
                }
                dataReaderInfo.Close();

                return locationWorkGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting parent location dropdown information records ", "Vegam_MaintenanceService", MethodBase.GetCurrentMethod().Name, "SITEID: " + parentlocationFilter.SiteID + " ;USERID: " + parentlocationFilter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<TypeValueInfo> GetUserWorkGroups(BasicParam basicParam)
        {
            try
            {
                List<TypeValueInfo> userWorkGroupInfoList = new List<TypeValueInfo>();
                bool restrictAccess = true;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }


                DataTable userWorkGroupTable = MaintenanceDAL.GetUserWorkGroups(db, basicParam.SiteID, basicParam.UserID, restrictAccess, string.Empty);
                foreach (DataRow workGroupRow in userWorkGroupTable.Rows)
                {
                    TypeValueInfo workGroupInfo = new TypeValueInfo();
                    workGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                    workGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                    userWorkGroupInfoList.Add(workGroupInfo);
                }

                return userWorkGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting user work group", "Vegam_MaintenanceService", MethodBase.GetCurrentMethod().Name, "SITEID: " + basicParam.SiteID + " ;USERID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public FLocationListInfo GetAllFuncLocForSchedule(FLocationFilterInfo filterFLocationInfo)
        {
            IDataReader dataReaderFLocationInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                FLocationListInfo functionalLocationListInfo = new FLocationListInfo();
                FLocationInfo functionalDetailInfo = null;
                bool restrictAccess = true;

                int accessLevelID = Common.GetUserAccessLevelID(db, filterFLocationInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFuncLocForSchedule(db, filterFLocationInfo.SiteID, filterFLocationInfo.PageSize, filterFLocationInfo.PageIndex, filterFLocationInfo.FLocationNameSearch
                    , filterFLocationInfo.FLocationID, filterFLocationInfo.SortType, filterFLocationInfo.UserID, restrictAccess);

                while (dataReaderFLocationInfo.Read())
                {
                    functionalDetailInfo = new FLocationInfo();
                    functionalDetailInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    functionalDetailInfo.FunctionalLocationName = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    functionalLocationListInfo.FunctionalLocationListInfo.Add(functionalDetailInfo);

                    if (functionalLocationListInfo.TotalRecords == 0 && filterFLocationInfo.PageSize > 0)
                        functionalLocationListInfo.TotalRecords = Common.GetSafeInt32(dataReaderFLocationInfo, "FCOUNT");
                }
                dataReaderFLocationInfo.Close();

                return functionalLocationListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting functional locations list info for schedule ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + filterFLocationInfo.SiteID + " ;UserID : " + filterFLocationInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }

        #region Download & Upload

        #region Download Excel Info 
        public string DownloadFunctionalLocationInfo(FLocationFilterInfo locationFilterInfo)
        {
            try
            {
                string fileName = "FunctionalLocationInfo_Excel_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff");
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                DownloadFLocationInfo asyncFLocationInfo = new DownloadFLocationInfo(GetFunctionalLocationHeaderInfoForExcel);
                AsyncCallback cb = new AsyncCallback(send);
                asyncFLocationInfo.BeginInvoke(db, locationFilterInfo, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetFunctionalLocationHeaderInfoForExcel(Database db, FLocationFilterInfo filter, string fileName)
        {
            IDataReader dataReaderInfo = null;
            bool restrictAccess = true;
            string logFileLocation = ConfigurationManager.AppSettings["LogFileLocation"];
            int columnIndex = 1;
            int rowIndex = 1;
            try
            {
                string completeFileName = fileName + ".xls";
                string targetExcelFile = logFileLocation + completeFileName;
                FileInfo templateFile = new FileInfo(targetExcelFile);

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet workSheet = package.Workbook.Worksheets.Add("FunctionLocationInfo");//Added new sheet
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    #region  Get all functional location list 
                    List<string> fLocationList = new List<string>();
                    int accessLevelID = Common.GetUserAccessLevelID(db, filter.UserID);
                    if (accessLevelID != 5)
                    {
                        restrictAccess = false;
                    }

                    dataReaderInfo = MaintenanceDAL.GetParentFunctionalLocationDropDown(db, null, filter.SiteID, 0, filter.UserID, restrictAccess, 0);
                    while (dataReaderInfo.Read())
                    {
                        fLocationList.Add(Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME"));
                    }
                    dataReaderInfo.Close();
                    #endregion

                    //Binding Heading Information
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.FLCode;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.FLocationName;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.Description;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.ParentLocationName;
                    Common.BindExcelCellListData(package, workSheet, "parentLocation", columnIndex, fLocationList, true);
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.WorkGroup;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.LastUpdatedBy;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.LastUpdatedOn;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.Status;
                    rowIndex++;

                    Common.BindExcelCellListData(package, workSheet, "StatusList", columnIndex, new List<string> { "Mark Delete" }, false);

                    //Format the header for column
                    using (ExcelRange headerColumnRange = workSheet.Cells[workSheet.Dimension.Address])
                    {
                        headerColumnRange.Style.Font.Bold = true;
                        headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    }

                    GetFunctionalLocationContentForExcel(db, workSheet, filter);

                    workSheet.Cells[workSheet.Dimension.Address].AutoFitColumns();
                    workSheet.Column(columnIndex).Width = 15;//setting the individual column width

                    package.Save();
                    package.Dispose();
                }

                string txtFile = logFileLocation + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = logFileLocation + "\\" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write(exceptionErrorMessage);
                        sWriter.Close();
                    }
                    fStream.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Failed to download functional location information excel sheet", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + filter.SiteID + ";UserID:" + filter.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void GetFunctionalLocationContentForExcel(Database db, ExcelWorksheet wSheet, FLocationFilterInfo filter)
        {
            IDataReader dataReaderFLocationInfo = null;
            bool restrictAccess = true;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                string lastUpdatedDateTime = string.Empty;

                Common.GetSiteDateTimeFormat(db, filter.SiteID, ref siteDateFormat, ref siteTimeFormat);

                int accessLevelID = Common.GetUserAccessLevelID(db, filter.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderFLocationInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, null, filter.SiteID, 0, 0, 0, string.Empty, string.Empty, filter.FunctionalLocIDs, true, true, string.Empty, filter.UserID, restrictAccess);
                while (dataReaderFLocationInfo.Read())
                {
                    columnIndex = 1;
                    int fLocationID = Common.GetSafeInt32(dataReaderFLocationInfo, "FLOCATIONID");
                    string workgroup = string.Empty;

                    wSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONCODE");
                    columnIndex++;
                    wSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONNAME");
                    columnIndex++;
                    wSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderFLocationInfo, "FLOCATIONDESC");
                    columnIndex++;
                    wSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderFLocationInfo, "FPARENTLOCATIONNAME");
                    columnIndex++;
                    // workgroup
                    DataTable locationWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, filter.SiteID, 0, fLocationID, "LOCATION");
                    workgroup = string.Join(",", locationWorkGroupTable.AsEnumerable().Select(r => r.Field<string>("FNAME")).ToArray());
                    wSheet.Cells[rowIndex, columnIndex].Value = workgroup;
                    columnIndex++;
                    wSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderFLocationInfo, "FUPDATEUSERNAME");
                    columnIndex++;
                    int updatedDate = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDON");
                    int updatedTime = Common.GetSafeInt32(dataReaderFLocationInfo, "FUPDATEDTIME");
                    if (updatedDate > 0)
                    {
                        lastUpdatedDateTime = Common.GetDateFormat(updatedDate, siteDateFormat) + " " + Common.GetTimeFormat(updatedTime, siteTimeFormat);
                    }
                    wSheet.Cells[rowIndex, columnIndex].Value = lastUpdatedDateTime;
                    columnIndex++;

                    rowIndex++;
                }
                dataReaderFLocationInfo.Close();

            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Failed to download functional location information excel sheet", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + filter.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderFLocationInfo != null && !dataReaderFLocationInfo.IsClosed)
                    dataReaderFLocationInfo.Close();
            }
        }
        #endregion

        #region Download Template zip folder
        public string DownloadFunctionalLocationTemplate(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "FunctionalLocationInfo_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff");
                DownloadExcelTemplate asyncFLocationInfo = new DownloadExcelTemplate(GetFLocationExceltemplate);
                asyncFLocationInfo.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetFLocationExceltemplate(Database db, BasicParam basicParam, string fileName)
        {
            IDataReader dataReaderInfo = null;
            bool restrictAccess = true;
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string folderLocation = path + fileName;
                System.IO.Directory.CreateDirectory(folderLocation);
                string readMeTxtFile = folderLocation + "\\Read Me.txt";
                System.IO.Directory.CreateDirectory(folderLocation + "\\FunctionalLocationImages");
                string fLocationExcelFile = folderLocation + "\\FunctionalLocationTemplate.xls";

                using (FileStream fStream = new FileStream(readMeTxtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write(Language_Resources.FunctionalLocation_Resource.uploadReadme);
                        sWriter.Close();
                    }
                    fStream.Close();
                }

                FileInfo templateExcelFile = new FileInfo(fLocationExcelFile);
                if (templateExcelFile.Exists)//for overwrite on existing file if exist.
                {
                    templateExcelFile.Delete();
                    templateExcelFile = new FileInfo(fLocationExcelFile);
                }

                #region  Get all functional location list 
                List<string> fLocationList = new List<string>();
                int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetParentFunctionalLocationDropDown(db, null, basicParam.SiteID, 0, basicParam.UserID, restrictAccess, 0);
                while (dataReaderInfo.Read())
                {
                    fLocationList.Add(Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                using (ExcelPackage package = new ExcelPackage(templateExcelFile))
                {
                    ExcelWorksheet workSheet = package.Workbook.Worksheets.Add("FunctionLocationInfo");

                    //Binding Heading Information
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.FLCode;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.FLocationName;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.Description;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.ParentLocationName;
                    Common.BindExcelCellListData(package, workSheet, "parentLocation", columnIndex, fLocationList, true);
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.WorkGroup;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.ImageName;
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.FunctionalLocation_Resource.Status;
                    rowIndex++;

                    Common.BindExcelCellListData(package, workSheet, "StatusList", columnIndex, new List<string> { "Mark Delete" }, false);

                    workSheet.Cells[workSheet.Dimension.Address].AutoFitColumns();
                    workSheet.Column(columnIndex).Width = 15;//setting the individual column width

                    //Format the header for column
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");
                    using (ExcelRange headerColumnRange = workSheet.Cells[workSheet.Dimension.Address])
                    {
                        headerColumnRange.Style.Font.Bold = true;
                        headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                    }

                    package.Save();
                    package.Dispose();
                }

                string zipPath = folderLocation + ".zip";
                ZipFile.CreateFromDirectory(folderLocation, zipPath, System.IO.Compression.CompressionLevel.Fastest, true);

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Functional location excel template downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading functional location excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }
        #endregion

        #region Upload zip/excel Info
        public string UploadFunctionalLocationInfoExcel(BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadFunctionalLocationInfo asyncFunctionalLocationInfo = new UploadFunctionalLocationInfo(InsertFunctionalLocationInfoFromExcel);
                AsyncCallback cb = new AsyncCallback(send);
                asyncFunctionalLocationInfo.BeginInvoke(db, basicParam, fileName, unzipedFolderName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void InsertFunctionalLocationInfoFromExcel(Database db, BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            int inserted = 0;
            int updated = 0;
            int deleted = 0;
            int failure = 0;
            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;
            string path = ConfigurationManager.AppSettings["LogFileLocation"];
            try
            {
                string description = string.Empty;
                string descInEnglish = string.Empty;
                int createdOn = 0;
                int createdTime = 0;

                string completePath = path + fileName;
                string extractDestPath = string.Empty;
                string fLocationImagesPathSource = string.Empty;
                string fLocationImagesPathDest = string.Empty;
                string excelPath = string.Empty;

                if (!string.IsNullOrEmpty(unzipedFolderName))
                {
                    extractDestPath = completePath + "\\" + unzipedFolderName;
                    fLocationImagesPathSource = extractDestPath + "\\" + "FunctionalLocationImages";
                    ZipFile.ExtractToDirectory(completePath + ".zip", completePath);
                    string[] files = Directory.GetFiles(extractDestPath, "*.xls");
                    foreach(string excelFile in files)
                    excelPath = excelFile;
                }
                else
                    excelPath = completePath + ".xls";

                if (File.Exists(excelPath))
                {
                    string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + excelPath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                    OleDbConnection olDbObjConn = new OleDbConnection(connectionString);

                    OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [FunctionLocationInfo$]", olDbObjConn);
                    DataSet dtExcelDataSet = new DataSet();
                    oledbObject.Fill(dtExcelDataSet);
                    olDbObjConn.Close();

                    DataTable excelDataTable = dtExcelDataSet.Tables[0];
                    if (excelDataTable.Rows.Count > 0)
                    {
                        DbTransaction transaction = null;
                        using (DbConnection connection = db.CreateConnection())
                        {
                            IDataReader dataReaderInfo = null;
                            connection.Open();
                            transaction = connection.BeginTransaction();

                            try
                            {
                                int lineNumber = 2;
                                bool restrictAccess = true;
                                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);

                                int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                                if (accessLevelID != 5)
                                {
                                    restrictAccess = false;
                                }

                                foreach (DataRow row in excelDataTable.Rows)
                                {
                                    #region ReadExcel
                                    int fLocationID = 0;
                                    int parentLocationID = 0;
                                    string fLocationCode = string.Empty;
                                    string fLocationName = string.Empty;
                                    string fLocationdescription = string.Empty;
                                    string parentLocationName = string.Empty;
                                    string workGroupExcel = string.Empty;
                                    string[] workGroupList = new string[] { };
                                    List<int> workGroupIDList = new List<int>();
                                    string imageNameExcel = string.Empty;
                                    string fLocationImageName = string.Empty;
                                    char excelStatus = 'A';

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.FLCode))
                                        fLocationCode = row[Language_Resources.FunctionalLocation_Resource.FLCode].ToString().Trim();

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.FLocationName))
                                        fLocationName = row[Language_Resources.FunctionalLocation_Resource.FLocationName].ToString().Trim();

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.Description))
                                        fLocationdescription = row[Language_Resources.FunctionalLocation_Resource.Description].ToString().Trim();

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.ParentLocationName))
                                        parentLocationName = row[Language_Resources.FunctionalLocation_Resource.ParentLocationName].ToString().Trim();

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.WorkGroup))
                                    {
                                        workGroupExcel = row[Language_Resources.FunctionalLocation_Resource.WorkGroup].ToString().Trim();
                                        workGroupList = workGroupExcel.Split(',');
                                    }

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.ImageName))
                                        imageNameExcel = row[Language_Resources.FunctionalLocation_Resource.ImageName].ToString().Trim();

                                    if (imageNameExcel.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                                    {
                                        DirectoryInfo imageFolderPath = new DirectoryInfo(fLocationImagesPathSource);
                                        FileInfo[] files = imageFolderPath.GetFiles(imageNameExcel + ".*");
                                        if (files.Length > 0)
                                        {
                                            //File exists
                                            foreach (FileInfo file in files)
                                            {
                                                if (file.Extension == ".png" || file.Extension == ".jpeg" || file.Extension == ".jpg")
                                                {
                                                    fLocationImageName = "IMG_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + file.Extension;
                                                    imageNameExcel = imageNameExcel + file.Extension;
                                                }
                                            }
                                        }
                                        else
                                        {   
                                            //File does not exist
                                            failureMessage += "Functional location image : "+ fLocationImageName + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            continue;
                                        }
                                    }

                                    if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.Status))
                                        excelStatus = row[Language_Resources.FunctionalLocation_Resource.Status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';

                                    #endregion

                                    if (fLocationCode.Length > 0 || fLocationName.Length > 0)
                                    {
                                        List<int> deletedWorkGroupIDList = new List<int>();
                                        List<int> newWorkGroupIDList = new List<int>();
                                        List<int> locationIDList = new List<int>();
                                        List<int> locationEquipmentIDList = new List<int>();
                                        DataTable assignedUserGroupTable = null;
                                        bool assignNewWorkGroupsToChild = true;

                                        #region Validation fields
                                        if (fLocationCode.Length == 0)
                                        {
                                            failureMessage += "Functional location code is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (fLocationCode.Length > 10)
                                        {
                                            failureMessage += "Functional location code value's length exceeds max length (10) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (fLocationName.Length == 0)
                                        {
                                            failureMessage += "Functional location Name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (fLocationName.Length > 50)
                                        {
                                            failureMessage += "Functional location value's length exceeds max length (50) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (fLocationdescription.Length > 200)
                                        {
                                            failureMessage += "Functional location description length should be less than 200 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (parentLocationName.Length > 20)
                                        {
                                            failureMessage += "Parent functional location value's length exceeds max length (20) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (fLocationName.ToLower() == parentLocationName.ToLower())
                                        {
                                            failureMessage += "Functional location and parent location can't be same in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        #endregion
                                        else
                                        {
                                            Char status = 'N';
                                            dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, transaction, basicParam.SiteID, 0, 0, 0, fLocationName, fLocationCode, string.Empty, false, false, string.Empty, 0, restrictAccess);
                                            if (dataReaderInfo.Read())
                                            {
                                                fLocationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                                                status = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FSTATUS"));
                                            }
                                            dataReaderInfo.Close();

                                            if (excelStatus == 'I')
                                            {
                                                if (fLocationID > 0 && status == 'A')
                                                {
                                                    if (MaintenanceDAL.CheckFunctionalLocationExist(db, transaction, basicParam.SiteID, fLocationID))
                                                    {
                                                        //can't delete functional location, already exist in equipment table    
                                                        failureMessage += "One or more equipments created as part of this functional location " + fLocationName + ", can't be deleted in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                        lineNumber++;
                                                        continue;
                                                    }

                                                    int checkIsParentLocation = 0;
                                                    dataReaderInfo = MaintenanceDAL.CheckIsParentFunctionalLocation(db, transaction, basicParam.SiteID, fLocationID);
                                                    if (dataReaderInfo.Read())
                                                    {
                                                        checkIsParentLocation = Common.GetSafeInt32(dataReaderInfo, "FCOUNT");
                                                    }
                                                    dataReaderInfo.Close();
                                                    if (checkIsParentLocation > 0)
                                                    {
                                                        // functional location is assigned to another location so can't delete  
                                                        failureMessage += "One or more functional location created as part of this functional location " + fLocationName + ", can't be deleted in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                        lineNumber++;
                                                        continue;
                                                    }

                                                    MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, fLocationID, Convert.ToChar(InfoType.Location), 0, 'I', basicParam.UserID, createdOn, createdTime);
                                                    //make status In-active for functional location
                                                    MaintenanceDAL.UpdateFunctionalLocStatus(db, transaction, basicParam.SiteID, fLocationID, 'I', basicParam.UserID, createdOn, createdTime);
                                                    MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", fLocationID.ToString(), string.Empty, basicParam.UserID, createdOn, createdTime);

                                                    #region Log Information
                                                    description = Language_Resources.Maintenance_LogInformations_Resource.funcationalLocationDeletedExcel.Replace("[XXX]", fLocationName.Trim());
                                                    descInEnglish = "Successfully deleted functional location information : " + fLocationName.Trim() + " through excel";
                                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                                    #endregion

                                                    deleteMessage += "Funcational location : " + fLocationName + "  details deleted successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    deleted++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                                else
                                                {
                                                    failureMessage += "Funcational location : " + fLocationName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                            }

                                            #region Validation parent location field
                                            if (parentLocationName.Length > 0) //verifying parent location is exist or not
                                            {
                                                dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, transaction, basicParam.SiteID, 0, 0, 0, parentLocationName, string.Empty, string.Empty, true, false, string.Empty, 0, restrictAccess);
                                                if (dataReaderInfo.Read())
                                                {
                                                    parentLocationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                                                }
                                                dataReaderInfo.Close();

                                                if (parentLocationID > 0 && fLocationID > 0)
                                                {
                                                    dataReaderInfo = MaintenanceDAL.GetParentFunctionalLocationDropDown(db, transaction, basicParam.SiteID, fLocationID, basicParam.UserID, restrictAccess, parentLocationID);
                                                    if (!dataReaderInfo.Read())
                                                    {
                                                        dataReaderInfo.Close();
                                                        failureMessage += "Parent funcational location can't be assigned to " + fLocationName + " location in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                        lineNumber++;
                                                        continue;
                                                    }
                                                    else
                                                        dataReaderInfo.Close();
                                                }
                                                else if (parentLocationID == 0)
                                                {
                                                    failureMessage += "Parent funcational location doesn't exist : " + parentLocationName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                            }
                                            #endregion

                                            #region Validation WorkGroup field
                                            if (workGroupExcel.Length > 0)
                                            {
                                                bool isValid = true;
                                                string workGroupNameList = string.Empty;
                                                foreach (string workGroupName in workGroupList)
                                                {
                                                    DataTable userWorkGroupTable = MaintenanceDAL.GetUserWorkGroups(db, basicParam.SiteID, basicParam.UserID, restrictAccess, workGroupName);
                                                    if (userWorkGroupTable.Rows.Count > 0)
                                                        workGroupIDList.Add(Convert.ToInt32(userWorkGroupTable.Rows[0]["FMASTERID"]));
                                                    else
                                                    {
                                                        workGroupNameList += (string.IsNullOrEmpty(workGroupNameList)?"":",") + workGroupName;
                                                         isValid = false;
                                                    }
                                                }
                                                if (!isValid)
                                                {
                                                    failureMessage += "Invalid Work group name :" + workGroupNameList + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                            }
                                            if (fLocationID > 0 && status == 'A')
                                            {
                                                assignedUserGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, basicParam.SiteID, 0, fLocationID, "LOCATION");
                                                foreach (DataRow workGrouprow in assignedUserGroupTable.Rows)
                                                {
                                                    deletedWorkGroupIDList.Add(Convert.ToInt32(workGrouprow["FMASTERID"]));
                                                }

                                                foreach (int workGroupID in workGroupIDList)
                                                {
                                                    if (!deletedWorkGroupIDList.Contains(workGroupID))
                                                    {
                                                        newWorkGroupIDList.Add(workGroupID);
                                                    }
                                                    else
                                                    {
                                                        deletedWorkGroupIDList.RemoveAll(wID => wID == workGroupID);
                                                    }
                                                }

                                                if (newWorkGroupIDList.Count > 0 || deletedWorkGroupIDList.Count > 0)
                                                {
                                                    DataTable subLocationsTable = MaintenanceDAL.GetSubFuncationLocationsForParent(db, basicParam.SiteID, fLocationID);
                                                    foreach (DataRow locationRow in subLocationsTable.Rows)
                                                    {
                                                        locationIDList.Add(Convert.ToInt32(locationRow["FLOCATIONID"]));
                                                    }

                                                    string locationListString = locationIDList.Count > 0 ? (string.Join(",", locationIDList) + "," + fLocationID) : fLocationID.ToString();

                                                    DataTable locationEquipmentTable = MaintenanceDAL.GetLocationEquipments(db, basicParam.SiteID, locationListString);
                                                    foreach (DataRow equipmenetRow in locationEquipmentTable.Rows)
                                                    {
                                                        locationEquipmentIDList.Add(Convert.ToInt32(equipmenetRow["FEQUIPMENTID"]));
                                                    }
                                                }
                                            }
                                            #endregion

                                            if (fLocationID == 0 || status == 'I')
                                            {
                                                //Insert Funcational Location Info
                                                if (fLocationID == 0)
                                                {
                                                    fLocationID = MaintenanceDAL.InsertFunctionalLocationInfo(db, transaction, basicParam.SiteID, fLocationCode, fLocationName, fLocationdescription, parentLocationID, fLocationImageName, basicParam.UserID, createdOn, createdTime);
                                                }
                                                else if (status == 'I')
                                                {
                                                    //active existing record
                                                    MaintenanceDAL.UpdateFunctionalLocStatus(db, transaction, basicParam.SiteID, fLocationID, 'A', basicParam.UserID, createdOn, createdTime);
                                                    MaintenanceDAL.UpdateFunctionalLocationInfo(db, transaction, basicParam.SiteID, fLocationID, fLocationCode, fLocationName, fLocationdescription, parentLocationID, fLocationImageName, basicParam.UserID, createdOn, createdTime);
                                                    MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", fLocationID.ToString(), string.Empty, basicParam.UserID, createdOn, createdTime);
                                                }

                                                foreach (int workGroupID in workGroupIDList)
                                                {
                                                    if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID) == false)
                                                        MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                    else
                                                        MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID, createdOn, createdTime, basicParam.UserID);
                                                }

                                                #region Log Information
                                                //Log Information
                                                description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoAddedExcel.Replace("[XXX]", fLocationName.Trim());
                                                descInEnglish = "Successfully inserted information for functional location name : " + fLocationName.Trim();
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                                #endregion

                                                insertMessage += "Funcational location : " + fLocationName + "  details inserted successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                inserted++;
                                            }
                                            else
                                            {
                                                //Update Functional Location info
                                                MaintenanceDAL.UpdateFunctionalLocationInfo(db, transaction, basicParam.SiteID, fLocationID, fLocationCode, fLocationName, fLocationdescription, parentLocationID, fLocationImageName, basicParam.UserID, createdOn, createdTime);

                                                foreach (int workGroupID in newWorkGroupIDList)
                                                {
                                                    if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID) == false)
                                                        MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                    else
                                                        MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", fLocationID, workGroupID, createdOn, createdTime, basicParam.UserID);

                                                    if (assignNewWorkGroupsToChild || assignedUserGroupTable.Rows.Count == 0 || assignedUserGroupTable.Rows.Count == deletedWorkGroupIDList.Count)
                                                    {
                                                        //User confirmed(true) to assign work groups to its descendants (or) Assigning work group to parent for first time (or) deleting all existing workgroups from parent and assigning new workgroups.
                                                        //in any of te above case, adding the work groups to all its sub locations and equipments
                                                        foreach (int subLocationID in locationIDList)
                                                        {
                                                            if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID) == false)
                                                                MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                            else
                                                                MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", subLocationID, workGroupID, createdOn, createdTime, basicParam.UserID);
                                                        }

                                                        foreach (int equipmentID in locationEquipmentIDList)
                                                        {
                                                            if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                                                MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                            else
                                                                MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, createdOn, createdTime, basicParam.UserID);
                                                        }
                                                    }
                                                }

                                                if (deletedWorkGroupIDList.Count > 0)
                                                {
                                                    string deletedUserWorkGroupIDList = string.Join(",", deletedWorkGroupIDList);
                                                    string locationIDListString = locationIDList.Count > 0 ? (string.Join(",", locationIDList) + "," + fLocationID) : fLocationID.ToString();

                                                    MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", locationIDListString, deletedUserWorkGroupIDList, basicParam.UserID, createdOn, createdTime);

                                                    if (locationEquipmentIDList.Count > 0)
                                                    {
                                                        string equipmentIDListString = string.Join(",", locationEquipmentIDList);
                                                        MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentIDListString, deletedUserWorkGroupIDList, basicParam.UserID, createdOn, createdTime);
                                                    }

                                                    if ((locationIDList.Count > 0 || locationEquipmentIDList.Count > 0) && (newWorkGroupIDList.Count == 0 || assignNewWorkGroupsToChild == false))
                                                    {
                                                        /* If parent has work group assigned, the it is mandatory for its sub locations and equipments to have atleast one work group assigned.
                                                           While deleting a work group from parent, we are removing it from its sub locations and equipments, so there could be a chance that all assigned any sub locations or equipments might have got removed.
                                                           So making sure that if any sub location or equipment doesn't have work group assigned, if any then asssigning all the work groups it */
                                                        List<int> assignedWorkGroupIDList = new List<int>();

                                                        foreach (DataRow workGroupRow in assignedUserGroupTable.Rows)
                                                        {
                                                            int workGroupID = Convert.ToInt32(workGroupRow["FMASTERID"]);
                                                            if (!deletedWorkGroupIDList.Contains(workGroupID))
                                                                assignedWorkGroupIDList.Add(workGroupID);
                                                        }

                                                        if (newWorkGroupIDList.Count > 0)
                                                            assignedWorkGroupIDList.AddRange(newWorkGroupIDList);

                                                        if (assignedWorkGroupIDList.Count > 0)
                                                        {
                                                            if (locationIDList.Count > 0)
                                                            {
                                                                DataTable locationTable = MaintenanceDAL.GetWorkGroupNotAssignedLocations(db, transaction, basicParam.SiteID, string.Join(",", locationIDList));

                                                                foreach (DataRow locationRow in locationTable.Rows)
                                                                {
                                                                    int locationID = Convert.ToInt32(locationRow["FLOCATIONID"]);
                                                                    foreach (int workGroupID in assignedWorkGroupIDList)
                                                                    {
                                                                        if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID) == false)
                                                                            MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                                        else
                                                                            MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "LOCATION", locationID, workGroupID, createdOn, createdTime, basicParam.UserID);
                                                                    }
                                                                }
                                                            }

                                                            if (locationEquipmentIDList.Count > 0)
                                                            {
                                                                DataTable equipmentTable = MaintenanceDAL.GetWorkGroupNotAssignedEquipments(db, transaction, basicParam.SiteID, string.Join(",", locationEquipmentIDList));

                                                                foreach (DataRow equipmentRow in equipmentTable.Rows)
                                                                {
                                                                    int equipmentID = Convert.ToInt32(equipmentRow["FEQUIPMENTID"]);
                                                                    foreach (int workGroupID in assignedWorkGroupIDList)
                                                                    {
                                                                        if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                                                            MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                                        else
                                                                            MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, createdOn, createdTime, basicParam.UserID);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                #region Log Information
                                                //Log Information
                                                description = Language_Resources.Maintenance_LogInformations_Resource.functionalLocationInfoUpdatedExcel.Replace("[XXX]", fLocationName.Trim());
                                                descInEnglish = "Successfully updated information for functional location name : " + fLocationName.Trim().ToUpper();
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                                #endregion

                                                updateMessage += "Funcational location : " + fLocationName + "  details updated successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                updated++;
                                            }

                                            #region copying image file
                                            if (fLocationImageName.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                                            {
                                                fLocationImagesPathDest = path + "Image" + fileName;
                                                if (!Directory.Exists(fLocationImagesPathDest))
                                                {
                                                    System.IO.Directory.CreateDirectory(fLocationImagesPathDest);
                                                }
                                                System.IO.File.Copy(fLocationImagesPathSource + "\\" + imageNameExcel, fLocationImagesPathDest + "\\" + fLocationImageName, true);
                                            }
                                            #endregion
                                        }
                                        lineNumber++;
                                    }
                                }
                                transaction.Commit();
                            }
                            catch
                            {
                                if (transaction != null)
                                    transaction.Rollback();

                                throw;
                            }
                            finally
                            {
                                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                                    dataReaderInfo.Close();
                                connection.Close();
                            }
                        }
                    }
                    string logFileName = fileName + "_tempSuccess.txt";
                    string targetFile = path + logFileName;
                    using (FileStream fs = new FileStream(targetFile, FileMode.Create, FileAccess.Write))
                    {
                        using (StreamWriter sw = new StreamWriter(fs))
                        {
                            sw.WriteLine("Functional location Information Upload log" + "_" + DateTime.Now.ToString());
                            sw.WriteLine("-------------------------------------------------------------------------------------------");
                            sw.WriteLine("Successfully Inserted :" + inserted.ToString());
                            sw.WriteLine("Successfully Updated :" + updated.ToString());
                            sw.WriteLine("Successfully Deleted :" + deleted.ToString());
                            sw.WriteLine("Failure :" + failure.ToString());
                            if (!string.IsNullOrEmpty(insertMessage.ToString()))
                            {
                                sw.WriteLine("-----------Inserted------------------------------------------------------------------------");
                                sw.WriteLine(insertMessage);
                            }
                            if (!string.IsNullOrEmpty(updateMessage.ToString()))
                            {
                                sw.WriteLine("-----------Updated-------------------------------------------------------------------------");
                                sw.WriteLine(updateMessage);
                            }
                            if (!string.IsNullOrEmpty(deleteMessage.ToString()))
                            {
                                sw.WriteLine("-----------Deleted-------------------------------------------------------------------------");
                                sw.WriteLine(deleteMessage);
                            }
                            if (!string.IsNullOrEmpty(failureMessage.ToString()))
                            {
                                sw.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                                sw.WriteLine(failureMessage);
                            }
                            sw.Close();
                            fs.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine("Functional location Information Upload log" + "_" + DateTime.Now.ToString());
                        sw.WriteLine("-------------------------------------------------------------------------------------------");
                        sw.WriteLine("Successfully Inserted :" + inserted.ToString());
                        sw.WriteLine("Successfully Updated :" + updated.ToString());
                        sw.WriteLine("Successfully Deleted :" + deleted.ToString());
                        sw.WriteLine("Failure :" + failure.ToString());
                        if (!string.IsNullOrEmpty(insertMessage.ToString()))
                        {
                            sw.WriteLine("-----------Inserted------------------------------------------------------------------------");
                            sw.WriteLine(insertMessage);
                        }
                        if (!string.IsNullOrEmpty(updateMessage.ToString()))
                        {
                            sw.WriteLine("-----------Updated-------------------------------------------------------------------------");
                            sw.WriteLine(updateMessage);
                        }
                        if (!string.IsNullOrEmpty(deleteMessage.ToString()))
                        {
                            sw.WriteLine("-----------Deleted-------------------------------------------------------------------------");
                            sw.WriteLine(deleteMessage);
                        }
                        if (!string.IsNullOrEmpty(failureMessage.ToString()))
                        {
                            sw.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                            sw.WriteLine(failureMessage);
                        }
                        sw.Write("Error : ");
                        sw.Write(exceptionErrorMessage);
                        sw.Close();
                    }
                    fs.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while uploading Functional location information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " UserID: " + basicParam.UserID);
            }
        }

        #endregion

        #endregion

        #endregion

        #region Equipment Info

        #region Resource 
        public List<KeyValueInfo> GetResourceInfo(BasicParam basicParam)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<KeyValueInfo> keyValueInfoList = new List<KeyValueInfo>();
                KeyValueInfo keyValueInfo = null;

                dataReaderInfo = MaintenanceDAL.GetResourceInfo(db, basicParam.SiteID, basicParam.UserID, basicParam.AccessLevelID, string.Empty);
                while (dataReaderInfo.Read())
                {
                    keyValueInfo = new KeyValueInfo();
                    keyValueInfo.Key = Common.GetSafeString(dataReaderInfo, "FRESOURCECODE");
                    keyValueInfo.Value = Common.GetSafeInt32(dataReaderInfo, "FRESOURCEID").ToString();
                    keyValueInfoList.Add(keyValueInfo);
                }
                dataReaderInfo.Close();

                return keyValueInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching resource list info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + basicParam.SiteID + ", UserID : " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        public EquipmentListInfo GetAllEquipmentInfo(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                bool restrictAccess = true;

                Common.GetSiteDateTimeFormat(db, equipmentFilterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);
                string imagePath = ConfigurationManager.AppSettings["EquipmentImagePath"].ToString().TrimEnd('/') + "/" + equipmentFilterInfo.SiteID + "/" + "Thumbnail";
                string imageModelPath = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + equipmentFilterInfo.SiteID + "/" + "Thumbnail";

                EquipmentListInfo equipmentListInfo = new EquipmentListInfo();
                EquipmentInformation equipmentInfo = null;

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderEquipmentInfo = MaintenanceDAL.GetAllEquipmentInfo(db, equipmentFilterInfo.SiteID, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, 0, equipmentFilterInfo.SerachNameOrCode,
                    equipmentFilterInfo.SearchLocationIDs, equipmentFilterInfo.SearchCategoryIDs, true, equipmentFilterInfo.SortType, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.UserID, restrictAccess);

                while (dataReaderEquipmentInfo.Read())
                {
                    equipmentInfo = new EquipmentInformation();
                    equipmentInfo.EquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentInfo.EquipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID");
                    equipmentInfo.FunctionalLocationName = Common.GetSafeString(dataReaderEquipmentInfo, "FLOCATIONNAME");
                    equipmentInfo.EquipmentDesc = Common.GetSafeString(dataReaderEquipmentInfo, "FDESCRIPTION");
                    equipmentInfo.CategoryName = Common.GetSafeString(dataReaderEquipmentInfo, "FCATEGORYNAME");
                    equipmentInfo.ClassName = Common.GetSafeString(dataReaderEquipmentInfo, "FCLASSNAME");
                    equipmentInfo.ParentEquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FPARENTEQUIPMENTID");
                    int updatedDate = Common.GetSafeInt32(dataReaderEquipmentInfo, "FUPDATEDON");
                    int updatedTime = Common.GetSafeInt32(dataReaderEquipmentInfo, "FUPDATEDTIME");

                    if (updatedDate > 0)
                        equipmentInfo.UpdatedOn = Common.GetDateFormat(updatedDate, siteDateFormat) + " " + Common.GetTimeFormat(updatedTime, siteTimeFormat);

                    string imageName = Common.GetSafeString(dataReaderEquipmentInfo, "FIMAGENAME");
                    string modelImageName = Common.GetSafeString(dataReaderEquipmentInfo, "FMODELIMAGENAME");

                    string imageUrl = string.Empty;
                    if (imageName.Length > 0)
                        imageUrl = imagePath + "/" + imageName;
                    else
                        imageUrl = modelImageName.Length > 0 ? (imageModelPath + "/" + modelImageName) : string.Empty;

                    if (!string.IsNullOrEmpty(imageUrl))
                        equipmentInfo.EquipmentImagePath = imageUrl;
                    else
                        equipmentInfo.EquipmentImagePath = null;

                    if (equipmentListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentListInfo.TotalRecords = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCOUNT");

                    equipmentListInfo.EquipmentList.Add(equipmentInfo);
                }
                dataReaderEquipmentInfo.Close();

                return equipmentListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ";UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public EquipmentDetailList GetEquipmentInfoList(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                EquipmentDetailList equipmentListInfo = new EquipmentDetailList();
                EquipmentDetail equipmentInformation = null;
                DataTable equipmentWorkGroupTable = null;
                int fLocationID = -1;
                bool restrictAccess = true;

                if (!string.IsNullOrEmpty(equipmentFilterInfo.SearchLocationIDs))
                {
                    fLocationID = Convert.ToInt32((equipmentFilterInfo.SearchLocationIDs));
                }

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderEquipmentInfo = MaintenanceDAL.GetEquipmentInfo(db, equipmentFilterInfo.SiteID, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, equipmentFilterInfo.SerachNameOrCode, fLocationID, 0, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.SortType, equipmentFilterInfo.UserID, restrictAccess);
                while (dataReaderEquipmentInfo.Read())
                {
                    equipmentInformation = new EquipmentDetail();
                    equipmentInformation.EquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentInformation.EquipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentInformation.FunctionalLocationID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID");

                    if (equipmentFilterInfo.InfoType == InfoType.Equipment)
                    {
                        equipmentWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, equipmentFilterInfo.SiteID, 0, equipmentInformation.EquipmentID, "EQUIPMENT");
                    }

                    if (equipmentWorkGroupTable != null && equipmentWorkGroupTable.Rows.Count > 0)
                    {
                        DataRow[] assignedWorkGroupRows = equipmentWorkGroupTable.Select("FREFERENCEID=" + equipmentInformation.EquipmentID);
                        foreach (DataRow workGroupRow in assignedWorkGroupRows)
                        {
                            TypeValueInfo wGroupInfo = new TypeValueInfo();
                            wGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                            wGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                            equipmentInformation.AssignedWorkGroupList.Add(wGroupInfo);
                        }
                    }

                    equipmentListInfo.EquipmentList.Add(equipmentInformation);

                    if (equipmentListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentListInfo.TotalRecords = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCOUNT");
                }
                dataReaderEquipmentInfo.Close();

                return equipmentListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment list information ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + equipmentFilterInfo.SiteID + ";UserID: " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public EquipmentDetailsInfo GetEquipmentEditInfo(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                bool restrictAccess = true;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                Common.GetSiteDateTimeFormat(db, equipmentFilterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);
                string ImagePath = ConfigurationManager.AppSettings["EquipmentImagePath"].ToString().TrimEnd('/') + "/" + equipmentFilterInfo.SiteID + "/" + "Thumbnail";
                string ImageModelPath = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + equipmentFilterInfo.SiteID + "/" + "Thumbnail";

                EquipmentDetailsInfo equipmentDetailsInfo = new EquipmentDetailsInfo();
                SupportInfo supportInfo = null;

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderEquipmentInfo = MaintenanceDAL.GetAllEquipmentInfo(db, equipmentFilterInfo.SiteID, 0, 0, equipmentFilterInfo.EquipmentID, string.Empty, string.Empty, string.Empty, true, string.Empty, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.UserID, restrictAccess);
                if (dataReaderEquipmentInfo.Read())
                {
                    equipmentDetailsInfo.EquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentDetailsInfo.EquipmentCode = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTCODE");
                    equipmentDetailsInfo.EquipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentDetailsInfo.FLocationID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID");
                    equipmentDetailsInfo.FunctionalLocationName = Common.GetSafeString(dataReaderEquipmentInfo, "FLOCATIONNAME");
                    equipmentDetailsInfo.EquipmentDesc = Common.GetSafeString(dataReaderEquipmentInfo, "FDESCRIPTION");
                    equipmentDetailsInfo.CategoryName = Common.GetSafeString(dataReaderEquipmentInfo, "FCATEGORYNAME");
                    equipmentDetailsInfo.ClassName = Common.GetSafeString(dataReaderEquipmentInfo, "FCLASSNAME");
                    equipmentDetailsInfo.ResourceID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FRESOURCEID");
                    equipmentDetailsInfo.ModelReferenceID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FMODELREFERENCEID");
                    equipmentDetailsInfo.ModelNumber = Common.GetSafeString(dataReaderEquipmentInfo, "FMODELNUMBER");
                    equipmentDetailsInfo.ModelName = Common.GetSafeString(dataReaderEquipmentInfo, "FMODELNAME");
                    equipmentDetailsInfo.SerialNumber = Common.GetSafeString(dataReaderEquipmentInfo, "FSERIALNUMBER");
                    equipmentDetailsInfo.ManufacturerID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FMANUFID");
                    equipmentDetailsInfo.CategoryID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCATEGORYID");
                    equipmentDetailsInfo.ClassID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCLASSID");
                    equipmentDetailsInfo.WarrantyNumber = Common.GetSafeString(dataReaderEquipmentInfo, "FWARRANTYNUMBER");
                    equipmentDetailsInfo.WarrantyStartDate = Common.GetSafeInt32(dataReaderEquipmentInfo, "FWARRANTYSTARTDATE");
                    equipmentDetailsInfo.WarrantyExpireDate = Common.GetSafeInt32(dataReaderEquipmentInfo, "FWARRANTYEXPIREDDATE");
                    equipmentDetailsInfo.PurchaseDate = Common.GetSafeInt32(dataReaderEquipmentInfo, "FPURCHASEDATE");
                    equipmentDetailsInfo.InstallDate = Common.GetSafeInt32(dataReaderEquipmentInfo, "FINSTALLDATE");
                    equipmentDetailsInfo.ParentEquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FPARENTEQUIPMENTID");

                    string imageName = Common.GetSafeString(dataReaderEquipmentInfo, "FIMAGENAME");
                    string modelImageName = Common.GetSafeString(dataReaderEquipmentInfo, "FMODELIMAGENAME");

                    if (imageName.Trim().Length == 0)
                    {
                        imageName = modelImageName;
                        ImagePath = ImageModelPath;
                    }
                    else
                        equipmentDetailsInfo.EquipmentImageExist = true;

                    string imageUrl = string.Empty;

                    if (imageName.Length > 0)
                        imageUrl = ImagePath + "/" + imageName;

                    if (imageUrl.Length > 0)
                        equipmentDetailsInfo.EquipmentImagePath = imageUrl;
                    else
                        equipmentDetailsInfo.EquipmentImagePath = null;

                }
                dataReaderEquipmentInfo.Close();

                #region Support Info for Equipment 
                dataReaderEquipmentInfo = MaintenanceDAL.GetSupportInfo(db, null, equipmentFilterInfo.SiteID, equipmentFilterInfo.EquipmentID, 0, string.Empty, Convert.ToChar(SupportType.None));
                while (dataReaderEquipmentInfo.Read())
                {
                    supportInfo = new SupportInfo();
                    supportInfo.SupportID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FSUPPORTID");
                    supportInfo.SupportName = Common.GetSafeString(dataReaderEquipmentInfo, "FSUPPORTNAME");
                    supportInfo.SupportNumber = Common.GetSafeString(dataReaderEquipmentInfo, "FSUPPORTNUMBER");
                    supportInfo.SupportEmail = Common.GetSafeString(dataReaderEquipmentInfo, "FSUPPORTEMAILID");
                    supportInfo.SupportType = (SupportType)Enum.ToObject(typeof(SupportType), Common.GetSafeChar(dataReaderEquipmentInfo, "FSUPPORTTYPE"));
                    equipmentDetailsInfo.SupportInfoList.Add(supportInfo);
                }
                dataReaderEquipmentInfo.Close();
                #endregion

                DataTable equipmentWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, equipmentFilterInfo.SiteID, 0, equipmentFilterInfo.EquipmentID, "EQUIPMENT");
                foreach (DataRow workGroupRow in equipmentWorkGroupTable.Rows)
                {
                    TypeValueInfo workGroupInfo = new TypeValueInfo();
                    workGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                    workGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                    equipmentDetailsInfo.AssignedWorkGroupList.Add(workGroupInfo);
                }

                return equipmentDetailsInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ";UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public AddFLocationReturnInfo InsertOrUpdateEquipmentInfo(BasicParam basicParam, EquipmentDetailsInfo equipmentDetailsInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                string description = string.Empty;
                string descInEnglish = string.Empty;
                int equipmentID = 0;
                int modalReferenceID = 0;
                bool updateEquipmentStatus = false;
                char status = 'N';
                List<int> equipmentIDList = new List<int>();
                List<int> deletedWorkGroupIDList = new List<int>();
                List<int> newWorkGroupIDList = new List<int>();
                DataTable assignedUserGroupTable = null;
                AddFLocationReturnInfo returnInfo = new AddFLocationReturnInfo();

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;

                List<MeasuringPoint> measuringPointInfoList = new List<MeasuringPoint>();

                if (MaintenanceDAL.CheckEquipmentCodeExist(db, null, basicParam.SiteID, equipmentDetailsInfo.EquipmentCode, equipmentDetailsInfo.EquipmentID))
                {
                    returnInfo.Code = -1;// equipment code already exists     
                    return returnInfo;
                }

                dataReaderEquipmentInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, null, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, equipmentDetailsInfo.EquipmentCode, equipmentDetailsInfo.EquipmentName, false, false);
                if (dataReaderEquipmentInfo.Read())
                {
                    status = Convert.ToChar(Common.GetSafeString(dataReaderEquipmentInfo, "FSTATUS"));
                    equipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    modalReferenceID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FMODELREFERENCEID");

                    if (status == 'A')
                    {
                        returnInfo.Code = -1; //already exist equipment name                        
                    }
                    else
                    {
                        if (equipmentDetailsInfo.EquipmentID == 0)
                            updateEquipmentStatus = true;  //while inserting record updating equipment status if status is 'InActive' 
                        else
                            returnInfo.Code = -2;   //while updating cannot update equipment info, if it is already exist in 'InActive' state                            
                    }
                }
                dataReaderEquipmentInfo.Close();

                if (returnInfo.Code != 0)
                    return returnInfo;

                if (equipmentDetailsInfo.EquipmentID != 0 && !updateEquipmentStatus)
                {
                    assignedUserGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, basicParam.SiteID, basicParam.UserID, equipmentDetailsInfo.EquipmentID, "EQUIPMENT");
                    foreach (DataRow workGrouprow in assignedUserGroupTable.Rows)
                    {
                        deletedWorkGroupIDList.Add(Convert.ToInt32(workGrouprow["FMASTERID"]));
                    }

                    foreach (TypeValueInfo keyValueInfo in equipmentDetailsInfo.AssignedWorkGroupList)
                    {
                        if (!deletedWorkGroupIDList.Contains(keyValueInfo.TypeValue))
                        {
                            newWorkGroupIDList.Add(keyValueInfo.TypeValue);
                        }
                        else
                        {
                            deletedWorkGroupIDList.RemoveAll(wID => wID == keyValueInfo.TypeValue);
                        }
                    }

                    if (deletedWorkGroupIDList.Count > 0)
                    {
                        string deletedWorkGroupIDListString = string.Join(",", deletedWorkGroupIDList);

                        DataTable workGroupEquipmentTable = MaintenanceDAL.CheckWorkGroupAssignedForEquipments(db, basicParam.SiteID, 0, equipmentDetailsInfo.EquipmentID, deletedWorkGroupIDListString);

                        if (!equipmentDetailsInfo.WorkGroupDeletionConfirmed && workGroupEquipmentTable.Rows.Count > 0)
                        {
                            foreach (DataRow workGroupRow in workGroupEquipmentTable.Rows)
                            {
                                string workGroupName = Convert.ToString(workGroupRow["FNAME"]);
                                if (!returnInfo.MessageList.Contains(workGroupName))
                                    returnInfo.MessageList.Add(workGroupName);
                            }
                            returnInfo.Code = -5;
                        }
                    }

                    if (returnInfo.Code != 0)
                        return returnInfo;

                    if (newWorkGroupIDList.Count > 0 || deletedWorkGroupIDList.Count > 0)
                    {
                        DataTable subEquipmentsTable = MaintenanceDAL.GetSubEquipments(db, basicParam.SiteID, equipmentDetailsInfo.EquipmentID);
                        foreach (DataRow locationRow in subEquipmentsTable.Rows)
                        {
                            equipmentIDList.Add(Convert.ToInt32(locationRow["FEQUIPMENTID"]));
                        }
                    }
                }

                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        #region  To update equipment functional location

                        int topParentEquipmentID = 0;
                        bool updateEquipmentFLocation = false;
                        DataTable dtHierarchicalEquipmentList = null;

                        if (equipmentDetailsInfo.ParentEquipmentID > 0)
                        {
                            dataReaderEquipmentInfo = MaintenanceDAL.GetTopParentEquipmentInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.ParentEquipmentID);
                            if (dataReaderEquipmentInfo.Read())
                            {
                                topParentEquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                                updateEquipmentFLocation = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID") == 0 ? true : false;
                            }
                            dataReaderEquipmentInfo.Close();
                        }

                        if (equipmentDetailsInfo.FLocationID > 0 && updateEquipmentFLocation)
                        {
                            dtHierarchicalEquipmentList = MaintenanceDAL.GetHierarchicalEquipmentList(db, transaction, basicParam.SiteID, topParentEquipmentID);
                        }

                        if ((equipmentDetailsInfo.EquipmentID != 0 && !updateEquipmentFLocation) || (equipmentDetailsInfo.FLocationID == 0 && updateEquipmentFLocation))
                        {
                            dtHierarchicalEquipmentList = MaintenanceDAL.GetHierarchicalEquipmentList(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID);
                        }

                        if (dtHierarchicalEquipmentList != null && dtHierarchicalEquipmentList.Rows.Count > 0)
                        {
                            foreach (DataRow drEquipmentInfo in dtHierarchicalEquipmentList.Rows)
                            {
                                int relatedEquipmentID = Convert.ToInt32(drEquipmentInfo["FEQUIPMENTID"].ToString());
                                if (equipmentDetailsInfo.EquipmentID != relatedEquipmentID)
                                {
                                    MaintenanceDAL.UpdateEquipmentFunctionalLocation(db, transaction, basicParam.SiteID, relatedEquipmentID, equipmentDetailsInfo.FLocationID);
                                }
                            }
                        }
                        #endregion

                        #region Validate Modal Referance Info
                        if (((modalReferenceID != equipmentDetailsInfo.ModelReferenceID) || updateEquipmentStatus) && equipmentDetailsInfo.ModelReferenceID > 0)
                        {
                            //In case of modal reference ID below information fetch from equipment modal.
                            equipmentDetailsInfo.CategoryID = 0;
                            equipmentDetailsInfo.ClassID = 0;
                            equipmentDetailsInfo.ManufacturerID = 0;
                            equipmentDetailsInfo.ModelNumber = string.Empty;

                            //If refernce modal is selected, Delete all existing measuring point against equipmentID.
                            //MaintenanceDAL.DeleteMeasuringPointInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID);
                            if(equipmentDetailsInfo.EquipmentID > 0)
                            MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, '\0', 0, 'I', basicParam.UserID, currentDate, currentTime);

                            #region Copy all measuring points againt reference modal ID
                            MeasuringPoint measuringPointInfo = null;

                            dataReaderEquipmentInfo = MaintenanceDAL.GetAllMeasuringPointsForEquipmentID(db, transaction, basicParam.SiteID, equipmentDetailsInfo.ModelReferenceID);
                            while (dataReaderEquipmentInfo.Read())
                            {
                                measuringPointInfo = new MeasuringPoint();
                                measuringPointInfo.Code = Common.GetSafeString(dataReaderEquipmentInfo, "FMEASURINGPOINTCODE");
                                measuringPointInfo.Name = Common.GetSafeString(dataReaderEquipmentInfo, "FMEASURINGPOINTNAME");
                                measuringPointInfo.Description = Common.GetSafeString(dataReaderEquipmentInfo, "FDESCRIPTION");
                                measuringPointInfo.ImageName = Common.GetSafeString(dataReaderEquipmentInfo, "FIMAGENAME");
                                measuringPointInfo.Position = Common.GetSafeString(dataReaderEquipmentInfo, "FPOSITION");
                                measuringPointInfo.CategoryID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCATEGORYID");
                                measuringPointInfo.UOMID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FSENSORTYPEUOMID");
                                measuringPointInfo.ReadingType = (ReadingType)Enum.ToObject(typeof(ReadingType), Common.GetSafeChar(dataReaderEquipmentInfo, "FREADINGTYPE"));
                                measuringPointInfo.MaxTextLength = Common.GetSafeInt32(dataReaderEquipmentInfo, "FMAXTEXTLENGTH");
                                measuringPointInfo.MinValue = Common.GetSafeDecimal(dataReaderEquipmentInfo, "FLOWERLIMIT");
                                measuringPointInfo.MaxValue = Common.GetSafeDecimal(dataReaderEquipmentInfo, "FUPPERLIMIT");
                                measuringPointInfo.MinValueWarning = Common.GetSafeDecimal(dataReaderEquipmentInfo, "FLOWERLIMITWARNING");
                                measuringPointInfo.MaxValueWarning = Common.GetSafeDecimal(dataReaderEquipmentInfo, "FUPPERLIMITWARNING");
                                measuringPointInfo.DecimalPlaces = Common.GetSafeInt32(dataReaderEquipmentInfo, "FDECIMALPLACES");
                                measuringPointInfo.GroupID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FGROUPID");
                                measuringPointInfo.IsCounter = Common.GetSafeString(dataReaderEquipmentInfo, "FISCOUNTER") == "Y" ? true : false;
                                measuringPointInfo.TagUUID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FUUID");
                                measuringPointInfo.OpcTagID = Common.GetSafeString(dataReaderEquipmentInfo, "FOPCTAGID");
                                measuringPointInfoList.Add(measuringPointInfo);
                            }
                            dataReaderEquipmentInfo.Close();


                            #endregion
                        }
                        #endregion

                        if (equipmentDetailsInfo.EquipmentID == 0 || updateEquipmentStatus)
                        {
                            #region Insert Or Update Equipment Info
                            if (equipmentID == 0 || !updateEquipmentStatus)
                            {
                                //Insert Equipment information
                                equipmentID = MaintenanceDAL.InsertEquipmentInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentCode, equipmentDetailsInfo.EquipmentName, equipmentDetailsInfo.EquipmentDesc,
                                   equipmentDetailsInfo.ManufacturerID, equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID, equipmentDetailsInfo.EquipmentImageName, equipmentDetailsInfo.FLocationID,
                                   equipmentDetailsInfo.ResourceID, equipmentDetailsInfo.ModelReferenceID, equipmentDetailsInfo.ModelNumber, equipmentDetailsInfo.SerialNumber, equipmentDetailsInfo.WarrantyNumber,
                                  Convert.ToInt32(equipmentDetailsInfo.WarrantyStartDate), Convert.ToInt32(equipmentDetailsInfo.WarrantyExpireDate), Convert.ToInt32(equipmentDetailsInfo.PurchaseDate), Convert.ToInt32(equipmentDetailsInfo.InstallDate),
                                   equipmentDetailsInfo.ParentEquipmentID, Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoAdded.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentDetailsInfo.EquipmentCode.ToString().ToUpper());
                                descInEnglish = "Successfully inserted information for equipment name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper() + ", equipment code : " + equipmentDetailsInfo.EquipmentCode.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion

                            }
                            else
                            {
                                if (status == 'I')
                                {
                                    //active existing records
                                    MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentID, 'A', Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);

                                    #region Log Information
                                    //Log Information
                                    description = Language_Resources.Maintenance_LogInformations_Resource.equipmentLocationStatus.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentDetailsInfo.EquipmentCode.Trim().ToUpper());
                                    descInEnglish = "Successfully updated status active for equipment name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper() + " and equipment code : " + equipmentDetailsInfo.EquipmentCode.Trim().ToUpper();
                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);

                                    #endregion

                                }

                                //Update Equipment Info
                                MaintenanceDAL.UpdateEquipmentInfo(db, transaction, basicParam.SiteID, equipmentID, equipmentDetailsInfo.EquipmentCode, equipmentDetailsInfo.EquipmentName,
                                equipmentDetailsInfo.EquipmentDesc, equipmentDetailsInfo.ManufacturerID, equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID,
                                equipmentDetailsInfo.EquipmentImageName, equipmentDetailsInfo.FLocationID, equipmentDetailsInfo.ResourceID, equipmentDetailsInfo.ModelReferenceID, equipmentDetailsInfo.ModelNumber,
                                equipmentDetailsInfo.SerialNumber, equipmentDetailsInfo.WarrantyNumber, equipmentDetailsInfo.WarrantyStartDate, equipmentDetailsInfo.WarrantyExpireDate,
                                equipmentDetailsInfo.PurchaseDate, equipmentDetailsInfo.InstallDate, equipmentDetailsInfo.ParentEquipmentID, basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoUpdated.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentDetailsInfo.EquipmentCode.Trim().ToUpper());
                                descInEnglish = "Successfully updated information for equipment name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper() + " and equipment code : " + equipmentDetailsInfo.EquipmentCode.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }

                            #region Insert Support Information   
                            if (equipmentID == 0)
                                equipmentID = equipmentDetailsInfo.EquipmentID;

                            if (equipmentDetailsInfo.SupportInfoList.Count > 0)
                            {
                                foreach (SupportInfo supportInfo in equipmentDetailsInfo.SupportInfoList)
                                {
                                    //Insert all support information
                                    MaintenanceDAL.InsertSupportData(db, transaction, equipmentID, basicParam.SiteID, supportInfo.SupportName, supportInfo.SupportNumber, supportInfo.SupportEmail, Convert.ToChar(supportInfo.SupportType),
                                        basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            #endregion

                            foreach (TypeValueInfo keyValueInfo in equipmentDetailsInfo.AssignedWorkGroupList)
                            {
                                if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, keyValueInfo.TypeValue) == false)
                                    MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, keyValueInfo.TypeValue, basicParam.UserID, currentDate, currentTime);
                                else
                                    MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, keyValueInfo.TypeValue, currentDate, currentTime, basicParam.UserID);
                            }

                            returnInfo.Code = equipmentID; //successfully inserted equipment info
                            #endregion
                        }
                        else
                        {
                            //Update Equipment Info
                            MaintenanceDAL.UpdateEquipmentInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, equipmentDetailsInfo.EquipmentCode,
                                equipmentDetailsInfo.EquipmentName, equipmentDetailsInfo.EquipmentDesc, equipmentDetailsInfo.ManufacturerID, equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID,
                                equipmentDetailsInfo.EquipmentImageName, equipmentDetailsInfo.FLocationID, equipmentDetailsInfo.ResourceID, equipmentDetailsInfo.ModelReferenceID, equipmentDetailsInfo.ModelNumber,
                                 equipmentDetailsInfo.SerialNumber, equipmentDetailsInfo.WarrantyNumber, equipmentDetailsInfo.WarrantyStartDate, equipmentDetailsInfo.WarrantyExpireDate,
                                equipmentDetailsInfo.PurchaseDate, equipmentDetailsInfo.InstallDate, equipmentDetailsInfo.ParentEquipmentID, basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            //Log Information
                            description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoUpdated.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentDetailsInfo.EquipmentCode.Trim().ToUpper());
                            descInEnglish = "Successfully updated information for equipment name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper() + " and equipment code : " + equipmentDetailsInfo.EquipmentCode.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            //Delete all existing support info against equipment
                            // MaintenanceDAL.DeleteEquipmentSupportInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID);
                            MaintenanceDAL.UpdateSupportStatus(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, 0, 'I', basicParam.UserID, currentDate, currentTime);

                            #region Insert Support Information

                            if (equipmentDetailsInfo.SupportInfoList.Count > 0)
                            {
                                foreach (SupportInfo supportInfo in equipmentDetailsInfo.SupportInfoList)
                                {
                                    // Insert all support information
                                    MaintenanceDAL.InsertSupportData(db, transaction, equipmentDetailsInfo.EquipmentID, basicParam.SiteID, supportInfo.SupportName, supportInfo.SupportNumber, supportInfo.SupportEmail, Convert.ToChar(supportInfo.SupportType),
                                        basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            #endregion                           

                            foreach (int workGroupID in newWorkGroupIDList)
                            {
                                if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentDetailsInfo.EquipmentID, workGroupID) == false)
                                    MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentDetailsInfo.EquipmentID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                else
                                    MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentDetailsInfo.EquipmentID, workGroupID, currentDate, currentTime, basicParam.UserID);

                                if (equipmentDetailsInfo.AsignNewWorkGroupsToChild || assignedUserGroupTable.Rows.Count == 0 || assignedUserGroupTable.Rows.Count == deletedWorkGroupIDList.Count)
                                {
                                    //User confirmed to assign work groups to its descendants (or) Assigning work group to parent for first time (or) deleting all existing workgroups from parent and assigning new workgroups.
                                    //in any of te above case, adding the work groups to all its sub equipments
                                    foreach (int equipID in equipmentIDList)
                                    {
                                        if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID) == false)
                                            MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                        else
                                            MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                    }
                                }
                            }

                            if (deletedWorkGroupIDList.Count > 0)
                            {
                                string deletedUserWorkGroupIDList = string.Join(",", deletedWorkGroupIDList);
                                string equipmentIDListString = equipmentIDList.Count > 0 ? (string.Join(",", equipmentIDList) + "," + equipmentDetailsInfo.EquipmentID) : equipmentDetailsInfo.EquipmentID.ToString();

                                MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentIDListString, deletedUserWorkGroupIDList, basicParam.UserID, currentDate, currentTime);

                                if (equipmentIDList.Count > 0 && (newWorkGroupIDList.Count == 0 || equipmentDetailsInfo.AsignNewWorkGroupsToChild == false))
                                {
                                    /* If parent has work group assigned, the it is mandatory for its sub equipments to have atleast one work group assigned.
                                       While deleting a work group from parent, we are removing it from its sub equipments, so there could be a chance that all assigned any sub equipments might have got removed.
                                       So making sure that if any sub equipment doesn't have work group assigned, if any then asssigning all the work groups to it */
                                    List<int> assignedWorkGroupIDList = new List<int>();

                                    foreach (DataRow workGroupRow in assignedUserGroupTable.Rows)
                                    {
                                        int workGroupID = Convert.ToInt32(workGroupRow["FMASTERID"]);
                                        if (!deletedWorkGroupIDList.Contains(workGroupID))
                                            assignedWorkGroupIDList.Add(workGroupID);
                                    }

                                    if (newWorkGroupIDList.Count > 0)
                                        assignedWorkGroupIDList.AddRange(newWorkGroupIDList);

                                    if (assignedWorkGroupIDList.Count > 0)
                                    {
                                        DataTable equipmentTable = MaintenanceDAL.GetWorkGroupNotAssignedEquipments(db, transaction, basicParam.SiteID, string.Join(",", equipmentIDList));

                                        foreach (DataRow equipmentRow in equipmentTable.Rows)
                                        {
                                            int equipID = Convert.ToInt32(equipmentRow["FEQUIPMENTID"]);
                                            foreach (int workGroupID in assignedWorkGroupIDList)
                                            {
                                                if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID) == false)
                                                    MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                                else
                                                    MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                            }
                                        }
                                    }
                                }
                            }

                            returnInfo.Code = equipmentDetailsInfo.EquipmentID; //successfully updated equipment info
                        }

                        #region Insert Measuring Point against Equipment ID
                        //Insert all measuring point against modal reference ID
                        if (measuringPointInfoList.Count > 0)
                        {
                            if (equipmentID == 0)
                                equipmentID = equipmentDetailsInfo.EquipmentID;

                            foreach (MeasuringPoint measuringPointInfo in measuringPointInfoList)
                            {
                                //Insert all measuring point against equipment ID.
                                MaintenanceDAL.InsertMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPointInfo.Code, measuringPointInfo.Name, measuringPointInfo.Description,
                                measuringPointInfo.Position, measuringPointInfo.CategoryID, measuringPointInfo.UOMID, equipmentID, Convert.ToChar(InfoType.Equipment), measuringPointInfo.ImageName,
                                Convert.ToChar(measuringPointInfo.ReadingType), measuringPointInfo.MaxTextLength, measuringPointInfo.MinValue, measuringPointInfo.MaxValue,
                                measuringPointInfo.MinValueWarning, measuringPointInfo.MaxValueWarning, measuringPointInfo.DecimalPlaces, measuringPointInfo.GroupID, measuringPointInfo.IsCounter, 'N', measuringPointInfo.OpcTagID, measuringPointInfo.TagUUID, basicParam.UserID, currentDate, currentTime);

                            }
                        }

                        #endregion

                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
                return returnInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inerting or updating equipment records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public int DeleteEquipmentInfo(BasicParam basicParam, int equipmentID)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                int result = 0;
                string equipmentName = string.Empty;
                string equipmentCode = string.Empty;
                int checkIsParentEquipment = 0;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;

                dataReaderEquipmentInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, null, basicParam.SiteID, equipmentID, string.Empty, string.Empty, true, true);
                if (dataReaderEquipmentInfo.Read())
                {
                    equipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentCode = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTCODE");
                    checkIsParentEquipment = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCOUNT");
                }
                dataReaderEquipmentInfo.Close();

                if (string.IsNullOrEmpty(equipmentName))
                {
                    return 1;//Equipment info does not exist in 'active' status
                }
                if (checkIsParentEquipment > 0)
                {
                    return 3; // equipment is assigned to another equipment so can't delete    
                }

                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        //In-Active all measuring points related against equipment
                        MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, equipmentID, Convert.ToChar(InfoType.Equipment), 0, 'I', basicParam.UserID, currentDate, currentTime);

                        //In-Active all documents & images against equipment 
                        MaintenanceDAL.UpdateDocumentsInfoStatus(db, transaction, basicParam.SiteID, equipmentID, "EQUIPMENT", 'I', basicParam.UserID, currentDate, currentTime);

                        //In-Active all support informartion status against equipemt 
                        MaintenanceDAL.UpdateSupportStatus(db, transaction, basicParam.SiteID, equipmentID, 0, 'I', basicParam.UserID, currentDate, currentTime);

                        //In-Active equipment info
                        MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentID, 'I', Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);

                        MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);

                        #region Log Information
                        if (equipmentName.Length > 0 && equipmentCode.Length > 0)
                        {
                            string description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoDeleted.Replace("[XXX]", equipmentName.Trim()).Replace("[YYY]", equipmentCode.Trim());
                            string descInEnglish = "Successfully deleted information for equipment name : " + equipmentName.Trim() + " and equipment code : " + equipmentCode.Trim();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                        }
                        #endregion

                        transaction.Commit();
                        result = 2;//equipment info deleted successfully
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting equipment records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public int DeleteEquipmentSupportInfo(EquipmentSupportInfo supportInfoFilter)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                int currentDate = 0;
                int currentTime = 0;
                int result = 0;
                string equipmentName = string.Empty;
                string equipmentCode = string.Empty;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetCurrentSiteDateTime(db, supportInfoFilter.SiteID, ref currentDate, ref currentTime);

                dataReaderEquipmentInfo = MaintenanceDAL.GetSupportInfo(db, null, supportInfoFilter.SiteID, 0, supportInfoFilter.SupportID, string.Empty, Convert.ToChar(SupportType.None));
                if (dataReaderEquipmentInfo.Read())
                {
                    equipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentCode = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTCODE");
                }
                dataReaderEquipmentInfo.Close();

                if (string.IsNullOrEmpty(equipmentName))
                {
                    result = 1; //Equipment support info does not exist in 'active' status
                }
                else
                {
                    DbTransaction transaction = null;
                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        transaction = dbConnection.BeginTransaction();
                        try
                        {
                            //make status In-Active for functional location
                            MaintenanceDAL.UpdateSupportStatus(db, transaction, supportInfoFilter.SiteID, 0, supportInfoFilter.SupportID, 'I', supportInfoFilter.UserID, currentDate, currentTime);

                            #region Log Information
                            if (equipmentName.Length > 0 && equipmentCode.Length > 0)
                            {
                                string description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoDeleted.Replace("[XXX]", equipmentName.Trim()).Replace("[YYY]", equipmentCode.Trim());
                                string descInEnglish = "Successfully deleted support information for equipment name : " + equipmentName.Trim() + " and equipment code : " + equipmentCode.Trim();
                                CommonDAL.InsertLogInformation(db, transaction, supportInfoFilter.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, supportInfoFilter.UserID, currentDate, currentTime);
                            }
                            #endregion

                            transaction.Commit();
                            result = 2;//Equipment support info deleted successfully
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting equipment support records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + supportInfoFilter.SiteID + ";UserID: " + supportInfoFilter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        private EquipmentDetailList GetEquipmentInfoList(Database db, EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                EquipmentDetailList equipmentListInfo = new EquipmentDetailList();
                EquipmentDetail equipmentInformation = null;
                DataTable equipmentWorkGroupTable = null;
                int fLocationID = -1;
                bool restrictAccess = true;

                if (!string.IsNullOrEmpty(equipmentFilterInfo.SearchLocationIDs))
                {
                    fLocationID = Convert.ToInt32((equipmentFilterInfo.SearchLocationIDs));
                }

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }



                dataReaderEquipmentInfo = MaintenanceDAL.GetEquipmentInfo(db, equipmentFilterInfo.SiteID, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, equipmentFilterInfo.SerachNameOrCode, fLocationID, 0, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.SortType, equipmentFilterInfo.UserID, restrictAccess);
                while (dataReaderEquipmentInfo.Read())
                {
                    equipmentInformation = new EquipmentDetail();
                    equipmentInformation.EquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentInformation.EquipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentInformation.FunctionalLocationID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID");

                    if (equipmentFilterInfo.PageSize == 0)
                    {
                        equipmentWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, equipmentFilterInfo.SiteID, 0, equipmentInformation.EquipmentID, "EQUIPMENT");
                    }

                    if (equipmentWorkGroupTable != null && equipmentWorkGroupTable.Rows.Count > 0)
                    {
                        DataRow[] assignedWorkGroupRows = equipmentWorkGroupTable.Select("FREFERENCEID=" + equipmentInformation.EquipmentID);
                        foreach (DataRow workGroupRow in assignedWorkGroupRows)
                        {
                            TypeValueInfo wGroupInfo = new TypeValueInfo();
                            wGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                            wGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                            equipmentInformation.AssignedWorkGroupList.Add(wGroupInfo);
                        }
                    }

                    equipmentListInfo.EquipmentList.Add(equipmentInformation);

                    if (equipmentListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentListInfo.TotalRecords = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCOUNT");
                }
                dataReaderEquipmentInfo.Close();

                return equipmentListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + equipmentFilterInfo.SiteID + ";UserID: " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        public EquipmentModelListDetails GetAllEquipmentModelList(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentModel = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                EquipmentModelListDetails equipmentModelListInfo = new EquipmentModelListDetails();
                EquipmentModelInfo equipmentModelInfo = new EquipmentModelInfo();

                dataReaderEquipmentModel = MaintenanceDAL.GetEquipmentModelList(db, equipmentFilterInfo.SiteID, 0, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, equipmentFilterInfo.SerachNameOrCode,
                    Convert.ToInt32(equipmentFilterInfo.SearchManufactureIDs), Convert.ToInt32(equipmentFilterInfo.SearchCategoryIDs), string.Empty);

                while (dataReaderEquipmentModel.Read())
                {
                    equipmentModelInfo = new EquipmentModelInfo();
                    equipmentModelInfo.EquipmentModelID = Common.GetSafeInt32(dataReaderEquipmentModel, "FEQUIPMENTID");
                    equipmentModelInfo.EquipmentModelName = Common.GetSafeString(dataReaderEquipmentModel, "FEQUIPMENTNAME");
                    equipmentModelInfo.EquipmentModelDesc = Common.GetSafeString(dataReaderEquipmentModel, "FDESCRIPTION");
                    equipmentModelInfo.EquipmentModelNumber = Common.GetSafeString(dataReaderEquipmentModel, "FMODELNUMBER");
                    equipmentModelInfo.ManufacturerName = Common.GetSafeString(dataReaderEquipmentModel, "FMANUFACTURERNAME");
                    equipmentModelInfo.CategoryName = Common.GetSafeString(dataReaderEquipmentModel, "FCATEGORYNAME");
                    equipmentModelInfo.ClassName = Common.GetSafeString(dataReaderEquipmentModel, "FCLASSNAME");
                    equipmentModelListInfo.EquipmentModelInfoList.Add(equipmentModelInfo);

                    if (equipmentModelListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentModelListInfo.TotalRecords = Common.GetSafeInt32(dataReaderEquipmentModel, "FCOUNT");
                }
                dataReaderEquipmentModel.Close();

                return equipmentModelListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching equipment model list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ", UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentModel != null && !dataReaderEquipmentModel.IsClosed)
                    dataReaderEquipmentModel.Close();
            }
        }

        public List<EquipmentDetail> GetParentEquipmentListDropDown(EquipmentFilterInfo parentEquipmentFilter)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<EquipmentDetail> parentEquuipmentInfoList = new List<EquipmentDetail>();
                bool restrictAccess = true;

                DataTable locationWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, parentEquipmentFilter.SiteID, 0, 0, "EQUIPMENT");

                int accessLevelID = Common.GetUserAccessLevelID(db, parentEquipmentFilter.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetParentEquipmentListDropDown(db, null, parentEquipmentFilter.SiteID, parentEquipmentFilter.EquipmentID, parentEquipmentFilter.UserID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    EquipmentDetail equipmentInfo = new EquipmentDetail();
                    equipmentInfo.EquipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                    equipmentInfo.EquipmentName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                    equipmentInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");

                    if (locationWorkGroupTable.Rows.Count > 0)
                    {
                        DataRow[] assignedWorkGroupRows = locationWorkGroupTable.Select("FREFERENCEID=" + equipmentInfo.EquipmentID);
                        foreach (DataRow workGroupRow in assignedWorkGroupRows)
                        {
                            TypeValueInfo wGroupInfo = new TypeValueInfo();
                            wGroupInfo.TypeValue = Convert.ToInt32(workGroupRow["FMASTERID"]);
                            wGroupInfo.DisplayName = Convert.ToString(workGroupRow["FNAME"]);
                            equipmentInfo.AssignedWorkGroupList.Add(wGroupInfo);
                        }
                    }
                    parentEquuipmentInfoList.Add(equipmentInfo);
                }
                dataReaderInfo.Close();

                return parentEquuipmentInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting parent equipment dropdown information records ", "Vegam_MaintenanceService", MethodBase.GetCurrentMethod().Name, "SITEID: " + parentEquipmentFilter.SiteID + " ;USERID: " + parentEquipmentFilter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public EquipmentListInfo GetAllEquipmentLocationInfoSchedule(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                EquipmentListInfo equipmentListInfo = new EquipmentListInfo();
                EquipmentInformation equipmentInfo = null;
                bool restrictAccess = true;

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }


                dataReaderEquipmentInfo = MaintenanceDAL.GetAllEquipmentLocationInfo(db, equipmentFilterInfo.SiteID, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, equipmentFilterInfo.SerachNameOrCode,
                    equipmentFilterInfo.SearchCategoryIDs, equipmentFilterInfo.EquipmentID, equipmentFilterInfo.SortType, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.UserID, restrictAccess);

                while (dataReaderEquipmentInfo.Read())
                {
                    equipmentInfo = new EquipmentInformation();
                    equipmentInfo.EquipmentID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentInfo.EquipmentName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentInfo.FunctionalLocationID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FLOCATIONID");
                    equipmentInfo.FunctionalLocationName = Common.GetSafeString(dataReaderEquipmentInfo, "FLOCATIONNAME");
                    equipmentInfo.CategoryName = Common.GetSafeString(dataReaderEquipmentInfo, "FCATEGORYNAME");

                    if (equipmentListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentListInfo.TotalRecords = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCOUNT");

                    equipmentListInfo.EquipmentList.Add(equipmentInfo);
                }
                dataReaderEquipmentInfo.Close();

                return equipmentListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment location records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ";UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        #region Download & Upload

        #region Download Equipment Template zip 

        public string DownloadEquipmentTemplate(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "EquipmentInfo_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff");
                DownloadExcelTemplate asyncEquipmentInfo = new DownloadExcelTemplate(GetEquipmentTemplate);
                asyncEquipmentInfo.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetEquipmentTemplate(Database db, BasicParam basicParam, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string folderLocation = path + fileName;
                System.IO.Directory.CreateDirectory(folderLocation);
                string readMeTxtFile = folderLocation + "\\Read Me.txt";
                System.IO.Directory.CreateDirectory(folderLocation + "\\EquipmentAttachments");
                System.IO.Directory.CreateDirectory(folderLocation + "\\MeasuringPointImages");
                string equipmentExcelFile = folderLocation + "\\EquipmentInfoTemplate.xls";

                using (FileStream fStream = new FileStream(readMeTxtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write(Language_Resources.Equipment_Resource.uploadReadme);
                        sWriter.Close();
                    }
                    fStream.Close();
                }

                FileInfo templateExcelFile = new FileInfo(equipmentExcelFile);
                if (templateExcelFile.Exists)//for overwrite on existing file if exist.
                {
                    templateExcelFile.Delete();
                    templateExcelFile = new FileInfo(equipmentExcelFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateExcelFile))
                {
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    ExcelWorksheet equipmentWorksheet = package.Workbook.Worksheets.Add("Equipment Info");
                    BindEquipmentExcelHeaderInfo(db, equipmentWorksheet, colFromHex, package, rowIndex, columnIndex, minValue, basicParam.SiteID, basicParam.UserID, basicParam.AccessLevelID, true);

                    ExcelWorksheet supportInfoWorksheet = package.Workbook.Worksheets.Add("Support Info");
                    BindSupportExcelHeaderInfo(db, supportInfoWorksheet, colFromHex, package, rowIndex, columnIndex, minValue, basicParam.SiteID, basicParam.UserID);

                    ExcelWorksheet documnetWorkSheet = package.Workbook.Worksheets.Add("Document Attachments");
                    BindDocumentExcelHeaderInfo(db, documnetWorkSheet, colFromHex, package, rowIndex, columnIndex, minValue, basicParam.SiteID, basicParam.UserID);

                    ExcelWorksheet worksheetMeasuringPoint = package.Workbook.Worksheets.Add("Measuring Point");
                    BindMeasuringPointExcelHeaderInfo(db, worksheetMeasuringPoint, colFromHex, package, rowIndex, columnIndex, minValue, basicParam.SiteID, basicParam.UserID, true);

                    package.Save();
                    package.Dispose();
                }

                string zipPath = folderLocation + ".zip";
                ZipFile.CreateFromDirectory(folderLocation, zipPath, System.IO.Compression.CompressionLevel.Fastest, true);

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Equipment excel template downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading equipment excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void BindEquipmentExcelHeaderInfo(Database db, ExcelWorksheet workSheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue, int siteID, int userID, int accessLevelIDs, bool isTemplate)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                List<string> equipmentList = new List<string>();
                List<string> functionalLocationList = new List<string>();
                List<string> resourceList = new List<string>();
                List<string> modelList = new List<string>();
                List<string> manufacturerList = new List<string>();
                List<string> typeList = new List<string>();
                List<string> classList = new List<string>();
                bool restrictAccess = true;

                int accessLevelID = Common.GetUserAccessLevelID(db, userID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                # region Bind Equipment List Info
                dataReaderInfo = MaintenanceDAL.GetAllEquipmentLocationInfo(db, siteID, 0, 0, string.Empty, string.Empty, 0, string.Empty, Convert.ToChar(InfoType.Equipment), userID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    equipmentList.Add(Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Functional Location List Info
                dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocations(db, siteID, 0, 0, string.Empty, 0, string.Empty, userID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    functionalLocationList.Add(Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Resource
                dataReaderInfo = MaintenanceDAL.GetResourceInfo(db, siteID, userID, accessLevelID, string.Empty);
                while (dataReaderInfo.Read())
                {
                    resourceList.Add(Common.GetSafeString(dataReaderInfo, "FRESOURCECODE"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Reference Modal List Info
                dataReaderInfo = MaintenanceDAL.GetEquipmentModelList(db, siteID, 0, 0, 0, string.Empty, 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    modelList.Add(Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Manufacturer List Info
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.MANUFACTURER.ToString(), 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    manufacturerList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Equipment Type List Info
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.TYPE.ToString(), 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    typeList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Bind Equipment Class List Info
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.CLASS.ToString(), 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    classList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                workSheet.Cells.Style.Numberformat.Format = "@";

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentCode;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", minValue, 10, Language_Resources.Equipment_Resource.equipmentCode, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentName;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", minValue, 50, Language_Resources.Equipment_Resource.equipmentName, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.description;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", minValue, 200, Language_Resources.Equipment_Resource.description, ExcelDataValidation.TextLength);
                workSheet.Column(columnIndex).Width = 25;
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.parentEquipment;
                Common.BindExcelCellListData(package, workSheet, "ParentEquipmentList", columnIndex, equipmentList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.functionalLocation;
                Common.BindExcelCellListData(package, workSheet, "FuntionalLocationList", columnIndex, functionalLocationList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.linkToResource;
                Common.BindExcelCellListData(package, workSheet, "ResourceList", columnIndex, resourceList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.workGroup;
                workSheet.Column(columnIndex).Width = 25;
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.referFromModel;
                Common.BindExcelCellListData(package, workSheet, "ModelList", columnIndex, modelList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.modelNumber;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 50, Language_Resources.Equipment_Resource.modelNumber, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.manufacturerName;
                Common.BindExcelCellListData(package, workSheet, "ManufacturerList", columnIndex, manufacturerList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.serailNumber;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 200, Language_Resources.Equipment_Resource.serailNumber, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.type;
                Common.BindExcelCellListData(package, workSheet, "EquipmentTypeList", columnIndex, typeList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentClass;
                Common.BindExcelCellListData(package, workSheet, "ClassList", columnIndex, classList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.warrantyNumber;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 100, Language_Resources.Equipment_Resource.warrantyNumber, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.warrantyStartDate;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 10, Language_Resources.Equipment_Resource.warrantyStartDate, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.purchaseDate;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 10, Language_Resources.Equipment_Resource.purchaseDate, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.warrantyExpireDate;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 10, Language_Resources.Equipment_Resource.warrantyExpireDate, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.installDate;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 10, Language_Resources.Equipment_Resource.installDate, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.imageName;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 200, Language_Resources.Equipment_Resource.imageName, ExcelDataValidation.TextLength);
                columnIndex++;

                if (!isTemplate)
                {
                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.lastUpdatedBy;
                    Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 50, Language_Resources.Equipment_Resource.lastUpdatedBy, ExcelDataValidation.TextLength);
                    columnIndex++;

                    workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.lastUpdatedOn;
                    Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 50, Language_Resources.Equipment_Resource.lastUpdatedOn, ExcelDataValidation.TextLength);
                    columnIndex++;
                }

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.status;
                Common.BindExcelCellListData(package, workSheet, "StatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                workSheet.Cells[workSheet.Dimension.Address].AutoFitColumns();
                workSheet.Column(columnIndex).Width = 20;//setting the individual column width

                //Format the header for column
                using (ExcelRange headerColumnRange = workSheet.Cells[workSheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void BindSupportExcelHeaderInfo(Database db, ExcelWorksheet workSheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue, int siteID, int userID)
        {
            try
            {
                workSheet.Cells.Style.Numberformat.Format = "@";

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentCode;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", minValue, 10, Language_Resources.Equipment_Resource.equipmentCode, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentName;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", minValue, 50, Language_Resources.Equipment_Resource.equipmentName, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.supportName;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 50, Language_Resources.Equipment_Resource.supportName, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.supportNumber;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 50, Language_Resources.Equipment_Resource.supportNumber, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.supportEmailID;
                Common.BindDataValidationForExcel(db, workSheet, package, columnIndex, "", "", 0, 20, Language_Resources.Equipment_Resource.supportEmailID, ExcelDataValidation.TextLength);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.supportType;
                Common.BindExcelCellListData(package, workSheet, "SupportTypeList", columnIndex, Enum.GetNames(typeof(SupportType)).ToList(), false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.status;
                Common.BindExcelCellListData(package, workSheet, "SupportStatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                workSheet.Cells[workSheet.Dimension.Address].AutoFitColumns();
                workSheet.Column(columnIndex).Width = 25;//setting the individual column width

                //Format the header for column
                using (ExcelRange headerColumnRange = workSheet.Cells[workSheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void BindDocumentExcelHeaderInfo(Database db, ExcelWorksheet workSheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue, int siteID, int userID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                List<string> equipmentList = new List<string>();

                #region Bind Equipment List Info
                bool restrictAccess = true;
                int accessLevelID = Common.GetUserAccessLevelID(db, userID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetAllEquipmentLocationInfo(db, siteID, 0, 0, string.Empty, string.Empty, 0, string.Empty, Convert.ToChar(InfoType.Equipment), userID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    equipmentList.Add(Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                workSheet.Cells.Style.Numberformat.Format = "@";

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.equipmentName;
                Common.BindExcelCellListData(package, workSheet, "EquipmentList", columnIndex, equipmentList, false);
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.specificationDocument;
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.manuals;
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.photosAndVideos;
                columnIndex++;

                workSheet.Cells[rowIndex, columnIndex].Value = Language_Resources.Equipment_Resource.status;
                Common.BindExcelCellListData(package, workSheet, "DocumentStatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                workSheet.Cells[workSheet.Dimension.Address].AutoFitColumns();
                workSheet.Column(columnIndex).Width = 25;//setting the individual column width

                //Format the header for column
                using (ExcelRange headerColumnRange = workSheet.Cells[workSheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }

        }

        #endregion

        #region Download Equipment Excel Info

        public string DownloadEquipmentInfo(EquipmentFilterInfo equipmentFilterInfo)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "EquipmentInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadEquipmetExcelInfo asyncEquipmentInfo = new DownloadEquipmetExcelInfo(GetEquipmentInfoForDownload);
                asyncEquipmentInfo.BeginInvoke(db, equipmentFilterInfo, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetEquipmentInfoForDownload(Database db, EquipmentFilterInfo equipmentFilterInfo, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    ExcelWorksheet equipmentWorksheet = package.Workbook.Worksheets.Add("Equipment Info");
                    BindEquipmentExcelHeaderInfo(db, equipmentWorksheet, colFromHex, package, rowIndex, columnIndex, minValue, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID, equipmentFilterInfo.AccessLevelID, false);

                    ExcelWorksheet supportInfoWorksheet = package.Workbook.Worksheets.Add("Support Info");
                    BindSupportExcelHeaderInfo(db, supportInfoWorksheet, colFromHex, package, rowIndex, columnIndex, minValue, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID);

                    ExcelWorksheet documnetWorkSheet = package.Workbook.Worksheets.Add("Document Attachments");
                    BindDocumentExcelHeaderInfo(db, documnetWorkSheet, colFromHex, package, rowIndex, columnIndex, minValue, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID);

                    ExcelWorksheet worksheetMeasuringPoint = package.Workbook.Worksheets.Add("Measuring Point");
                    BindMeasuringPointExcelHeaderInfo(db, worksheetMeasuringPoint, colFromHex, package, rowIndex, columnIndex, minValue, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID, true);

                    //Get Content for excel sheet
                    List<int> equipmentIDList = new List<int>();
                    GetExcelContentForEquipmentInfo(db, equipmentWorksheet, equipmentFilterInfo, ref equipmentIDList);
                    GetExcelContentForSupportInfo(db, supportInfoWorksheet, equipmentIDList, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID);
                    GetExcelContentForDocumentInfo(db, documnetWorkSheet, equipmentIDList, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID);
                    GetExcelContentForMeasuringPoint(db, worksheetMeasuringPoint, null, equipmentFilterInfo.SiteID, equipmentIDList, false);
                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "\\" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading equipment excel info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + equipmentFilterInfo.SiteID + " ;UserID: " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void GetExcelContentForEquipmentInfo(Database db, ExcelWorksheet equipmentWorkSheet, EquipmentFilterInfo equipmentFilterInfo, ref List<int> equipmentIDList)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                bool restrictAccess = true;

                Common.GetSiteDateTimeFormat(db, equipmentFilterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);
                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetAllEquipmentInfo(db, equipmentFilterInfo.SiteID, 0, 0, equipmentFilterInfo.EquipmentID, equipmentFilterInfo.SerachNameOrCode, equipmentFilterInfo.SearchLocationIDs, equipmentFilterInfo.SearchCategoryIDs, true, string.Empty, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.UserID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    columnIndex = 1;

                    int equipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                    equipmentIDList.Add(equipmentID);
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTCODE");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FDESCRIPTION");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FPARENTEQUIPMENT");
                    columnIndex++;
                    string functionalLocation = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = functionalLocation.ToUpper() != "NONE" ? functionalLocation : string.Empty;
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FRESOURCECODE");
                    columnIndex++;
                    DataTable equipmentWorkGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, equipmentFilterInfo.SiteID, 0, equipmentID, "EQUIPMENT");
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = string.Join(",", equipmentWorkGroupTable.AsEnumerable().Select(r => r.Field<string>("FNAME")).ToArray());
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FMODELNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FMODELNUMBER");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FMANUFACTURERNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FSERIALNUMBER");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FCATEGORYNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FCLASSNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FWARRANTYNUMBER");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetDateFormat(Common.GetSafeInt32(dataReaderInfo, "FWARRANTYSTARTDATE"), siteDateFormat);
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetDateFormat(Common.GetSafeInt32(dataReaderInfo, "FPURCHASEDATE"), siteDateFormat);
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetDateFormat(Common.GetSafeInt32(dataReaderInfo, "FWARRANTYEXPIREDDATE"), siteDateFormat);
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetDateFormat(Common.GetSafeInt32(dataReaderInfo, "FINSTALLDATE"), siteDateFormat);
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FIMAGENAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FUPDATEUSERNAME");
                    columnIndex++;
                    equipmentWorkSheet.Cells[rowIndex, columnIndex].Value = Common.GetDateFormat(Common.GetSafeInt32(dataReaderInfo, "FUPDATEDON"), siteDateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(dataReaderInfo, "FUPDATEDTIME"), siteTimeFormat);
                    columnIndex++;
                    rowIndex++;
                }
                dataReaderInfo.Close();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void GetExcelContentForSupportInfo(Database db, ExcelWorksheet supportInfoWorksheet, List<int> equipmentIDList, int siteID, int userID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;

                foreach (int equipmentID in equipmentIDList)
                {
                    dataReaderInfo = MaintenanceDAL.GetSupportInfo(db, null, siteID, equipmentID, 0, string.Empty, Convert.ToChar(SupportType.None));
                    while (dataReaderInfo.Read())
                    {
                        columnIndex = 1;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTCODE");
                        columnIndex++;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                        columnIndex++;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FSUPPORTNAME");
                        columnIndex++;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FSUPPORTNUMBER");
                        columnIndex++;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FSUPPORTEMAILID");
                        columnIndex++;
                        supportInfoWorksheet.Cells[rowIndex, columnIndex].Value = (SupportType)Enum.ToObject(typeof(SupportType), Common.GetSafeChar(dataReaderInfo, "FSUPPORTTYPE"));
                        rowIndex++;
                    }
                    dataReaderInfo.Close();
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void GetExcelContentForDocumentInfo(Database db, ExcelWorksheet documnetWorkSheet, List<int> equipmentIDList, int siteID, int userID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;
                string equipmentName;
                List<string> sDocumentsList = null;
                List<string> manualsList = null;
                List<string> photosAndVideosList = null;

                foreach (int equipmentID in equipmentIDList)
                {
                    columnIndex = 1;
                    equipmentName = string.Empty;
                    sDocumentsList = new List<string>();
                    manualsList = new List<string>();
                    photosAndVideosList = new List<string>();
                    dataReaderInfo = MaintenanceDAL.GetAllDocumentsAndImagesInfo(db, siteID, equipmentID, Convert.ToChar(InfoType.Equipment), false);
                    while (dataReaderInfo.Read())
                    {
                        DocumentType documentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(dataReaderInfo, "FDOCUMENTTYPE"));
                        string documentName = Common.GetSafeString(dataReaderInfo, "FDOCUMENTNAME");
                        documentName = documentName.Substring(documentName.IndexOf('_', documentName.IndexOf('_') + 1) + 1);
                        if (string.IsNullOrEmpty(equipmentName))
                            equipmentName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");

                        if (documentType == DocumentType.SDOCUMENT)
                            sDocumentsList.Add(documentName);
                        else if (documentType == DocumentType.DOCUMENT)
                            manualsList.Add(documentName);
                        else if (documentType == DocumentType.IMAGE || documentType == DocumentType.VIDEO)
                            photosAndVideosList.Add(documentName);
                    }
                    dataReaderInfo.Close();

                    documnetWorkSheet.Cells[rowIndex, columnIndex].Value = equipmentName;
                    columnIndex++;
                    documnetWorkSheet.Cells[rowIndex, columnIndex].Value = string.Join(",", sDocumentsList);
                    columnIndex++;
                    documnetWorkSheet.Cells[rowIndex, columnIndex].Value = string.Join(",", manualsList);
                    columnIndex++;
                    documnetWorkSheet.Cells[rowIndex, columnIndex].Value = string.Join(",", photosAndVideosList);
                    rowIndex++;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }
        #endregion

        #region Upload zip/excel Info
        public string UploadEquipmentInfoExcel(BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadFunctionalLocationInfo asyncFunctionalLocationInfo = new UploadFunctionalLocationInfo(InsertEquipmentTemplateDetails);
                AsyncCallback cb = new AsyncCallback(send);
                asyncFunctionalLocationInfo.BeginInvoke(db, basicParam, fileName, unzipedFolderName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void InsertEquipmentTemplateDetails(Database db, BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            string path = string.Empty;
            try
            {
                path = System.Configuration.ConfigurationManager.AppSettings["LogFileLocation"];

                using (System.Data.Common.DbConnection connection = db.CreateConnection())
                {
                    OleDbConnection olDbObjConn = null;
                    FileStream logFileStream = null;
                    StreamWriter logStreamWriter = null;

                    try
                    {
                        connection.Open();
                        string completePath = path + fileName;
                        string extractDestPath = string.Empty;
                        string excelPath = string.Empty;

                        if (!string.IsNullOrEmpty(unzipedFolderName))
                        {
                            extractDestPath = completePath + "\\" + unzipedFolderName;
                            ZipFile.ExtractToDirectory(completePath + ".zip", completePath);
                            string[] files = Directory.GetFiles(extractDestPath, "*.xls");
                            foreach (string excelFile in files)
                                excelPath = excelFile;
                        }
                        else
                            excelPath = completePath + ".xls";

                        if (File.Exists(excelPath))
                        {
                            String connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + excelPath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                            olDbObjConn = new OleDbConnection(connectionString);

                            string oldLogFileName = fileName + "_Temp_Success.txt";
                            string oldTargetFile = path + "//" + oldLogFileName;
                            string newLogFileName = fileName + "_Success.txt";
                            string newTargetFile = path + "//" + newLogFileName;
                            string equipmentAttachmentTempSource = string.Empty;

                            if (!string.IsNullOrEmpty(unzipedFolderName))
                            {
                                equipmentAttachmentTempSource = path + "Temp" + fileName;
                                System.IO.Directory.CreateDirectory(equipmentAttachmentTempSource);
                            }

                            using (logFileStream = new FileStream(oldTargetFile, FileMode.Append, FileAccess.Write))
                            {
                                using (logStreamWriter = new StreamWriter(logFileStream))
                                {
                                    InsertEquipmentInfoFromExcel(db, basicParam, fileName, unzipedFolderName, equipmentAttachmentTempSource, connection, olDbObjConn, connectionString, logFileStream, logStreamWriter);
                                    InsertEquipmentSupportInfoFromExcel(db, basicParam, connection, olDbObjConn, connectionString, logFileStream, logStreamWriter);
                                    if (!string.IsNullOrEmpty(unzipedFolderName))
                                        InsertDocumentsInfoFromExcel(db, basicParam, fileName, unzipedFolderName, equipmentAttachmentTempSource, connection, olDbObjConn, connectionString, logFileStream, logStreamWriter);
                                    InsertMeasuringPointInfoFromExcelSheet(db, basicParam, fileName, unzipedFolderName, equipmentAttachmentTempSource, connection, olDbObjConn, connectionString, logFileStream, logStreamWriter);
                                    logStreamWriter.Close();
                                }
                                logFileStream.Close();
                                System.IO.File.Move(oldTargetFile, newTargetFile);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    finally
                    {
                        connection.Close();

                        if (olDbObjConn != null)
                            olDbObjConn.Close();

                        if (logStreamWriter != null)
                            logStreamWriter.Close();

                        if (logFileStream != null)
                            logFileStream.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                using (FileStream errorFileStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter errorStreamWriter = new StreamWriter(errorFileStream))
                    {
                        errorStreamWriter.Write(ex.Message);
                        errorStreamWriter.Close();
                    }
                    errorFileStream.Close();
                }
                Common.LogException(ex, "SOPService", "Error while Uploading Equipment Template Deatils", "Vegam_PreWeighService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID);
            }
        }

        private void InsertEquipmentInfoFromExcel(Database db, BasicParam basicParam, string fileName, string unzipedFolderName, string equipmentAttachmentTempSource, DbConnection connection, OleDbConnection olDbObjConn, String connectionString, FileStream logFileStream, StreamWriter logStreamWriter)
        {
            int inserted = 0;
            int updated = 0;
            int deleted = 0;
            int failure = 0;
            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;
            int lineNumber = 2;
            string path = ConfigurationManager.AppSettings["LogFileLocation"];

            IDataReader dataReaderInfo = null;
            try
            {
                int currentDate = 0;
                int currentTime = 0;
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                string description = string.Empty;
                string descInEnglish = string.Empty;
                bool restrictAccess = true;
                string equipmentAttachmentPathSource = string.Empty;
                string equipmentAttachmentPathDest = string.Empty;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                Common.GetSiteDateTimeFormat(db, basicParam.SiteID, ref siteDateFormat, ref siteTimeFormat);

                if (!string.IsNullOrEmpty(unzipedFolderName))
                {
                    equipmentAttachmentPathSource = path + fileName + "\\" + unzipedFolderName + "\\EquipmentAttachments";
                    equipmentAttachmentPathDest = equipmentAttachmentTempSource + "\\EquipmentImages";
                }

                olDbObjConn = new OleDbConnection(connectionString);
                olDbObjConn.Open();
                OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [Equipment Info$]", olDbObjConn);
                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DbTransaction transaction = null;
                DataTable excelDataTable = dtExcelDataSet.Tables[0];
                if (excelDataTable.Rows.Count > 0)
                {
                    try
                    {
                        int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                        if (accessLevelID != 5)
                            restrictAccess = false;

                        transaction = connection.BeginTransaction();
                        foreach (DataRow row in excelDataTable.Rows)
                        {
                            #region ReadExcel
                            int equipmentID = 0;
                            int parentEquipmentID = 0;
                            int fLocationID = 0;
                            int resourceID = 0;
                            int modelReferenceID = 0;
                            int manufacturerID = 0;
                            int typeID = 0;
                            int classID = 0;
                            int warrantyStartDate = 0;
                            int purchaseDate = 0;
                            int warrantyExpireDate = 0;
                            int installDate = 0;
                            List<int> workGroupIDList = new List<int>();
                            string equipmentCode = string.Empty;
                            string equipmentName = string.Empty;
                            string equipmentdescription = string.Empty;
                            string parentEquipmentName = string.Empty;
                            string fLocationName = string.Empty;
                            string linkToResource = string.Empty;
                            string workGroupExcel = string.Empty;
                            string[] workGroupList = new string[] { };
                            string referModelName = string.Empty;
                            string modelNumber = string.Empty;
                            string manufacturerName = string.Empty;
                            string serialNumber = string.Empty;
                            string typeName = string.Empty;
                            string className = string.Empty;
                            string warrantyNumber = string.Empty;
                            string imageNameExcel = string.Empty;
                            string equipmentImageName = string.Empty;
                            char excelStatus = 'A';

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentCode))
                                equipmentCode = row[Language_Resources.Equipment_Resource.equipmentCode].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentName))
                                equipmentName = row[Language_Resources.Equipment_Resource.equipmentName].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.description))
                                equipmentdescription = row[Language_Resources.Equipment_Resource.description].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.parentEquipment))
                                parentEquipmentName = row[Language_Resources.Equipment_Resource.parentEquipment].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.functionalLocation))
                                fLocationName = row[Language_Resources.Equipment_Resource.functionalLocation].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.linkToResource))
                                linkToResource = row[Language_Resources.Equipment_Resource.linkToResource].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.FunctionalLocation_Resource.WorkGroup))
                            {
                                workGroupExcel = row[Language_Resources.FunctionalLocation_Resource.WorkGroup].ToString().Trim();
                                workGroupList = workGroupExcel.Split(',');
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.referFromModel))
                                referModelName = row[Language_Resources.Equipment_Resource.referFromModel].ToString().Trim();

                            if (string.IsNullOrEmpty(referModelName))
                            {
                                if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.modelNumber))
                                    modelNumber = row[Language_Resources.Equipment_Resource.modelNumber].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.manufacturerName))
                                    manufacturerName = row[Language_Resources.Equipment_Resource.manufacturerName].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.type))
                                    typeName = row[Language_Resources.Equipment_Resource.type].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentClass))
                                    className = row[Language_Resources.Equipment_Resource.equipmentClass].ToString().Trim();
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.serailNumber))
                                serialNumber = row[Language_Resources.Equipment_Resource.serailNumber].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.warrantyNumber))
                                warrantyNumber = row[Language_Resources.Equipment_Resource.warrantyNumber].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.warrantyStartDate))
                            {
                                string warrantyStartDateExcel = row[Language_Resources.Equipment_Resource.warrantyStartDate].ToString().Trim();
                                if (warrantyStartDateExcel.Length > 0)
                                {
                                    warrantyStartDateExcel = Common.GetFormatedDate(warrantyStartDateExcel, siteDateFormat);
                                    if (warrantyStartDateExcel.Length > 0)
                                        warrantyStartDate = Common.ValidateDateFormatExcel(warrantyStartDateExcel, siteDateFormat);
                                    else
                                        warrantyStartDate = -1;
                                }
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.purchaseDate))
                            {
                                string purchaseDateExcel = row[Language_Resources.Equipment_Resource.purchaseDate].ToString().Trim();
                                if (purchaseDateExcel.Length > 0)
                                {
                                    purchaseDateExcel = Common.GetFormatedDate(purchaseDateExcel, siteDateFormat);
                                    if (purchaseDateExcel.Length > 0)
                                        purchaseDate = Common.ValidateDateFormatExcel(purchaseDateExcel, siteDateFormat);
                                    else
                                        purchaseDate = -1;
                                }
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.warrantyExpireDate))
                            {
                                string warrantyExpireDateExcel = row[Language_Resources.Equipment_Resource.warrantyExpireDate].ToString().Trim();
                                if (warrantyExpireDateExcel.Length > 0)
                                {
                                    warrantyExpireDateExcel = Common.GetFormatedDate(warrantyExpireDateExcel, siteDateFormat);
                                    if (warrantyExpireDateExcel.Length > 0)
                                        warrantyExpireDate = Common.ValidateDateFormatExcel(warrantyExpireDateExcel, siteDateFormat);
                                    else
                                        warrantyExpireDate = -1;
                                }
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.installDate))
                            {
                                string installDateExcel = row[Language_Resources.Equipment_Resource.installDate].ToString().Trim();
                                if (installDateExcel.Length > 0)
                                {
                                    installDateExcel = Common.GetFormatedDate(installDateExcel, siteDateFormat);
                                    if (installDateExcel.Length > 0)
                                        installDate = Common.ValidateDateFormatExcel(installDateExcel, siteDateFormat);
                                    else
                                        installDate = -1;
                                }
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.imageName))
                                imageNameExcel = row[Language_Resources.Equipment_Resource.imageName].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.status))
                                excelStatus = row[Language_Resources.Equipment_Resource.status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';

                            #endregion

                            if (equipmentCode.Length > 0 || equipmentName.Length > 0)
                            {
                                List<int> deletedWorkGroupIDList = new List<int>();
                                List<int> newWorkGroupIDList = new List<int>();
                                List<int> equipmentIDList = new List<int>();
                                List<int> locationEquipmentIDList = new List<int>();
                                DataTable assignedUserGroupTable = null;
                                bool assignNewWorkGroupsToChild = true;

                                #region Validation fields
                                if (equipmentCode.Length == 0)
                                {
                                    failureMessage += "Equipment code is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentCode.Length > 10)
                                {
                                    failureMessage += "Equipment code value's length exceeds max length (10) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentName.Length == 0)
                                {
                                    failureMessage += "Equipment Name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentName.Length > 50)
                                {
                                    failureMessage += "Equipment value's length exceeds max length (50) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentdescription.Length > 1000)
                                {
                                    failureMessage += "Equipment description length should be less than 1000 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (parentEquipmentName.Length > 50)
                                {
                                    failureMessage += "Parent equipment value's length exceeds max length (50) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentName.ToLower() == parentEquipmentName.ToLower())
                                {
                                    failureMessage += "Equipment and parent Equipment can't be same in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (modelNumber.Length > 50)
                                {
                                    failureMessage += "Model number value's length exceeds max length (50) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (serialNumber.Length > 200)
                                {
                                    failureMessage += "Serial number value's length exceeds max length (200) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (warrantyNumber.Length > 100)
                                {
                                    failureMessage += "Warranty number value's length exceeds max length (100) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (warrantyStartDate < 0)
                                {
                                    failureMessage += "Please enter Warranty start date in " + siteDateFormat + " format in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (purchaseDate < 0)
                                {
                                    failureMessage += "Please enter purchase date in " + siteDateFormat + " format in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (warrantyExpireDate < 0)
                                {
                                    failureMessage += "Please enter warranty expire date in " + siteDateFormat + " format in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (installDate < 0)
                                {
                                    failureMessage += "Please enter install date in " + siteDateFormat + " format in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if ((warrantyStartDate > warrantyExpireDate) && warrantyExpireDate > 0)
                                {
                                    failureMessage += "Warranty expire date cannot be lesser than warranty start date in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (purchaseDate > 0 && (((purchaseDate > installDate) && installDate > 0) || ((purchaseDate > warrantyStartDate) && warrantyStartDate > 0)))
                                {
                                    failureMessage += "Purchase date cannot be greater than install date / warranty start date in line number " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                #endregion
                                else
                                {
                                    #region Validation Images
                                    if (imageNameExcel.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                                    {
                                        DirectoryInfo imageFolderPath = new DirectoryInfo(equipmentAttachmentPathSource);
                                        FileInfo[] files = imageFolderPath.GetFiles(imageNameExcel + ".*");
                                        if (files.Length > 0)
                                        {
                                            //File exists
                                            foreach (FileInfo file in files)
                                            {
                                                if (file.Extension == ".png" || file.Extension == ".jpeg" || file.Extension == ".jpg")
                                                {
                                                    equipmentImageName = "IMG_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + file.Extension;
                                                    imageNameExcel = imageNameExcel + file.Extension;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //File does not exist
                                            failureMessage += "Equipment image : " + imageNameExcel + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            continue;
                                        }
                                    }
                                    #endregion

                                    Char status = 'N';
                                    dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, equipmentID, equipmentCode, equipmentName, false, false);
                                    if (dataReaderInfo.Read())
                                    {
                                        status = Convert.ToChar(Common.GetSafeString(dataReaderInfo, "FSTATUS"));
                                        equipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                        modelReferenceID = Common.GetSafeInt32(dataReaderInfo, "FMODELREFERENCEID");
                                    }
                                    dataReaderInfo.Close();

                                    if (excelStatus == 'I')
                                    {
                                        if (equipmentID > 0 && status == 'A')
                                        {
                                            bool checkIsParentEquipment = false;
                                            dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, equipmentID, string.Empty, string.Empty, true, true);
                                            if (dataReaderInfo.Read())
                                            {
                                                checkIsParentEquipment = Common.GetSafeInt32(dataReaderInfo, "FCOUNT") > 0 ? true : false;
                                            }
                                            dataReaderInfo.Close();
                                            if (checkIsParentEquipment)
                                            {
                                                // equipment is assigned to another equipment so can't delete  
                                                failureMessage += "One or more equipment created as part of this equipment " + equipmentName + ", can't be deleted in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }

                                            //In-Active all measuring points related against equipment
                                            MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, equipmentID, Convert.ToChar(InfoType.Equipment), 0, 'I', basicParam.UserID, currentDate, currentTime);
                                            //In-Active all documents & images against equipment 
                                            MaintenanceDAL.UpdateDocumentsInfoStatus(db, transaction, basicParam.SiteID, equipmentID, "EQUIPMENT", 'I', basicParam.UserID, currentDate, currentTime);
                                            //In-Active all support informartion status against equipemt 
                                            MaintenanceDAL.UpdateSupportStatus(db, transaction, basicParam.SiteID, equipmentID, 0, 'I', basicParam.UserID, currentDate, currentTime);
                                            //In-Active equipment info
                                            MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentID, 'I', Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);
                                            MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);

                                            #region Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoDeletedExcel.Replace("[XXX]", equipmentName.Trim()).Replace("[YYY]", equipmentCode.Trim());
                                            descInEnglish = "Successfully deleted information for equipment name : " + equipmentName + " and equipment code : " + equipmentCode + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                            #endregion

                                            deleteMessage += "Equipment : " + equipmentName + "  details deleted successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            deleted++;
                                            lineNumber++;
                                            continue;
                                        }
                                        else
                                        {
                                            failureMessage += "Equipment : " + equipmentName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }
                                    }

                                    #region Validation parent equipment field
                                    if (parentEquipmentName.Length > 0) //verifying parent equipment is exist or not
                                    {
                                        dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, 0, string.Empty, parentEquipmentName, false, true);
                                        if (dataReaderInfo.Read())
                                        {
                                            parentEquipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                        }
                                        dataReaderInfo.Close();

                                        if (parentEquipmentID > 0 && equipmentID > 0)
                                        {
                                            dataReaderInfo = MaintenanceDAL.GetParentEquipmentListDropDown(db, transaction, basicParam.SiteID, parentEquipmentID, basicParam.UserID, false);
                                            if (!dataReaderInfo.Read())
                                            {
                                                dataReaderInfo.Close();
                                                failureMessage += "Parent equipment can't be assigned to " + equipmentName + " equipment in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }
                                            else
                                                dataReaderInfo.Close();
                                        }
                                        else if (parentEquipmentID == 0)
                                        {
                                            failureMessage += "Equipment doesn't exist : " + equipmentName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }
                                    }
                                    #endregion

                                    #region Validation Functional Location field
                                    if (fLocationName.Length > 0)
                                    {
                                        dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, transaction, basicParam.SiteID, 0, 0, 0, fLocationName, string.Empty, string.Empty, true, false, string.Empty, basicParam.UserID, restrictAccess);
                                        if (dataReaderInfo.Read())
                                        {
                                            fLocationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                                            dataReaderInfo.Close();
                                        }
                                        else
                                        {
                                            dataReaderInfo.Close();
                                            failureMessage += "Functional Location doesn't exist : " + fLocationName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }
                                    }
                                    #endregion

                                    #region Validation Resource field
                                    if (linkToResource.Length > 0)
                                    {
                                        dataReaderInfo = MaintenanceDAL.GetResourceInfo(db, basicParam.SiteID, basicParam.UserID, basicParam.AccessLevelID, linkToResource);
                                        if (dataReaderInfo.Read())
                                        {
                                            resourceID = Common.GetSafeInt32(dataReaderInfo, "FRESOURCEID");
                                            dataReaderInfo.Close();
                                        }
                                        else
                                        {
                                            dataReaderInfo.Close();
                                            failureMessage += "Resource doesn't exist : " + linkToResource + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }
                                    }
                                    #endregion

                                    #region Validation WorkGroup field
                                    if (workGroupExcel.Length > 0)
                                    {
                                        bool isValid = true;
                                        string workGroupNameList = string.Empty;
                                        foreach (string workGroupName in workGroupList)
                                        {
                                            DataTable userWorkGroupTable = MaintenanceDAL.GetUserWorkGroups(db, basicParam.SiteID, basicParam.UserID, restrictAccess, workGroupName);
                                            if (userWorkGroupTable.Rows.Count > 0)
                                                workGroupIDList.Add(Convert.ToInt32(userWorkGroupTable.Rows[0]["FMASTERID"]));
                                            else
                                            {
                                                workGroupNameList += (string.IsNullOrEmpty(workGroupNameList) ? "" : ",") + workGroupName;
                                                isValid = false;
                                            }
                                        }
                                        if (!isValid)
                                        {
                                            failureMessage += "Invalid Work group name :" + workGroupNameList + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }
                                    }

                                    if (equipmentID != 0 && status == 'A')
                                    {
                                        assignedUserGroupTable = MaintenanceDAL.GetAssignedWorkGroups(db, basicParam.SiteID, basicParam.UserID, equipmentID, "EQUIPMENT");
                                        foreach (DataRow workGrouprow in assignedUserGroupTable.Rows)
                                        {
                                            deletedWorkGroupIDList.Add(Convert.ToInt32(workGrouprow["FMASTERID"]));
                                        }

                                        foreach (int workGroupID in workGroupIDList)
                                        {
                                            if (!deletedWorkGroupIDList.Contains(workGroupID))
                                            {
                                                newWorkGroupIDList.Add(workGroupID);
                                            }
                                            else
                                            {
                                                deletedWorkGroupIDList.RemoveAll(wID => wID == workGroupID);
                                            }
                                        }

                                        if (newWorkGroupIDList.Count > 0 || deletedWorkGroupIDList.Count > 0)
                                        {
                                            DataTable subEquipmentsTable = MaintenanceDAL.GetSubEquipments(db, basicParam.SiteID, equipmentID);
                                            foreach (DataRow locationRow in subEquipmentsTable.Rows)
                                            {
                                                equipmentIDList.Add(Convert.ToInt32(locationRow["FEQUIPMENTID"]));
                                            }
                                        }
                                    }
                                    #endregion

                                    #region  Validation Equipment Model, Manufacture, Class and Type
                                    string modelStatus = string.Empty;
                                    int newModelReferenceID = 0;
                                    List<MeasuringPoint> measuringPointInfoList = new List<MeasuringPoint>();
                                    if (referModelName.Length > 0) //if user referred model, getting details from master data else considering the excel data
                                    {
                                        newModelReferenceID = MaintenanceDAL.GetEquipmentModelID(db, transaction, basicParam.SiteID, 0, referModelName, out modelStatus);
                                        if (newModelReferenceID == 0 || modelStatus == "I")
                                        {
                                            failureMessage += "Referred Model Name doesn't exist : " + referModelName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                            lineNumber++;
                                            continue;
                                        }

                                        if (((newModelReferenceID != modelReferenceID) || status == 'I') && newModelReferenceID > 0)
                                        {
                                            modelReferenceID = newModelReferenceID;
                                            //If refernce modal is selected, Delete all existing measuring point against equipmentID.
                                            if (equipmentID > 0)
                                                MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, equipmentID, '\0', 0, 'I', basicParam.UserID, currentDate, currentTime);

                                            #region Copy all measuring points againt reference modal ID
                                            MeasuringPoint measuringPointInfo = null;
                                            dataReaderInfo = MaintenanceDAL.GetAllMeasuringPointsForEquipmentID(db, transaction, basicParam.SiteID, modelReferenceID);
                                            while (dataReaderInfo.Read())
                                            {
                                                measuringPointInfo = new MeasuringPoint();
                                                measuringPointInfo.Code = Common.GetSafeString(dataReaderInfo, "FMEASURINGPOINTCODE");
                                                measuringPointInfo.Name = Common.GetSafeString(dataReaderInfo, "FMEASURINGPOINTNAME");
                                                measuringPointInfo.Description = Common.GetSafeString(dataReaderInfo, "FDESCRIPTION");
                                                measuringPointInfo.ImageName = Common.GetSafeString(dataReaderInfo, "FIMAGENAME");
                                                measuringPointInfo.Position = Common.GetSafeString(dataReaderInfo, "FPOSITION");
                                                measuringPointInfo.CategoryID = Common.GetSafeInt32(dataReaderInfo, "FCATEGORYID");
                                                measuringPointInfo.UOMID = Common.GetSafeInt32(dataReaderInfo, "FSENSORTYPEUOMID");
                                                measuringPointInfo.ReadingType = (ReadingType)Enum.ToObject(typeof(ReadingType), Common.GetSafeChar(dataReaderInfo, "FREADINGTYPE"));
                                                measuringPointInfo.MaxTextLength = Common.GetSafeInt32(dataReaderInfo, "FMAXTEXTLENGTH");
                                                measuringPointInfo.MinValue = Common.GetSafeDecimal(dataReaderInfo, "FLOWERLIMIT");
                                                measuringPointInfo.MaxValue = Common.GetSafeDecimal(dataReaderInfo, "FUPPERLIMIT");
                                                measuringPointInfo.MinValueWarning = Common.GetSafeDecimal(dataReaderInfo, "FLOWERLIMITWARNING");
                                                measuringPointInfo.MaxValueWarning = Common.GetSafeDecimal(dataReaderInfo, "FUPPERLIMITWARNING");
                                                measuringPointInfo.DecimalPlaces = Common.GetSafeInt32(dataReaderInfo, "FDECIMALPLACES");
                                                measuringPointInfo.GroupID = Common.GetSafeInt32(dataReaderInfo, "FGROUPID");
                                                measuringPointInfo.IsCounter = Common.GetSafeString(dataReaderInfo, "FISCOUNTER") == "Y" ? true : false;
                                                measuringPointInfo.TagUUID = Common.GetSafeInt32(dataReaderInfo, "FUUID");
                                                measuringPointInfo.OpcTagID = Common.GetSafeString(dataReaderInfo, "FOPCTAGID");
                                                measuringPointInfoList.Add(measuringPointInfo);
                                            }
                                            dataReaderInfo.Close();
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        string masterStatus = string.Empty;
                                        if (manufacturerName.Length > 0)
                                        {
                                            manufacturerID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, manufacturerName, MasterDataType.MANUFACTURER.ToString(), out masterStatus);
                                            if (manufacturerID == 0 || masterStatus == "I")
                                            {
                                                failureMessage += "Manufacturer Name doesn't exist : " + manufacturerName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }
                                        }

                                        if (typeName.Length > 0)
                                        {
                                            masterStatus = string.Empty;
                                            typeID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, typeName, MasterDataType.TYPE.ToString(), out masterStatus);
                                            if (typeID == 0 || masterStatus == "I")
                                            {
                                                failureMessage += "Type Name doesn't exist : " + typeName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }
                                        }

                                        if (className.Length > 0)
                                        {
                                            masterStatus = string.Empty;
                                            classID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, className, MasterDataType.CLASS.ToString(), out masterStatus);
                                            if (classID == 0 || masterStatus == "I")
                                            {
                                                failureMessage += "Class Name doesn't exist : " + referModelName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region  To update equipment functional location
                                    int topParentEquipmentID = 0;
                                    bool updateEquipmentFLocation = false;
                                    DataTable dtHierarchicalEquipmentList = null;

                                    if (parentEquipmentID > 0)
                                    {
                                        dataReaderInfo = MaintenanceDAL.GetTopParentEquipmentInfo(db, transaction, basicParam.SiteID, parentEquipmentID);
                                        if (dataReaderInfo.Read())
                                        {
                                            topParentEquipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                            updateEquipmentFLocation = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID") == 0 ? true : false;
                                        }
                                        dataReaderInfo.Close();
                                    }

                                    if (fLocationID > 0 && updateEquipmentFLocation)
                                        dtHierarchicalEquipmentList = MaintenanceDAL.GetHierarchicalEquipmentList(db, transaction, basicParam.SiteID, topParentEquipmentID);

                                    if ((equipmentID != 0 && !updateEquipmentFLocation) || (fLocationID == 0 && updateEquipmentFLocation))
                                        dtHierarchicalEquipmentList = MaintenanceDAL.GetHierarchicalEquipmentList(db, transaction, basicParam.SiteID, equipmentID);

                                    if (dtHierarchicalEquipmentList != null && dtHierarchicalEquipmentList.Rows.Count > 0)
                                    {
                                        foreach (DataRow drEquipmentInfo in dtHierarchicalEquipmentList.Rows)
                                        {
                                            int relatedEquipmentID = Convert.ToInt32(drEquipmentInfo["FEQUIPMENTID"].ToString());
                                            if (equipmentID != relatedEquipmentID)
                                                MaintenanceDAL.UpdateEquipmentFunctionalLocation(db, transaction, basicParam.SiteID, relatedEquipmentID, fLocationID);
                                        }
                                    }
                                    #endregion

                                    #region Insert Or Update Equipment Info
                                    if (equipmentID == 0 || status == 'I')
                                    {
                                        if (equipmentID == 0 || status == 'A')
                                        {
                                            //Insert Equipment information
                                            equipmentID = MaintenanceDAL.InsertEquipmentInfo(db, transaction, basicParam.SiteID, equipmentCode, equipmentName, equipmentdescription, manufacturerID, typeID, classID, equipmentImageName, fLocationID,
                                               resourceID, modelReferenceID, modelNumber, serialNumber, warrantyNumber, warrantyStartDate, warrantyExpireDate, purchaseDate, installDate, parentEquipmentID, Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);

                                            #region Log Information
                                            //Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoAddedExcel.Replace("[XXX]", equipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentCode.ToString().ToUpper());
                                            descInEnglish = "Successfully inserted information for equipment name : " + equipmentName.Trim().ToUpper() + ", equipment code : " + equipmentCode.Trim().ToUpper() + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                            #endregion
                                        }
                                        else
                                        {
                                            if (status == 'I')
                                            {
                                                //active existing records
                                                MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentID, 'A', Convert.ToChar(InfoType.Equipment), basicParam.UserID, currentDate, currentTime);

                                                #region Log Information
                                                //Log Information
                                                description = Language_Resources.Maintenance_LogInformations_Resource.equipmentStatusExcel.Replace("[XXX]", equipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentCode.Trim().ToUpper());
                                                descInEnglish = "Successfully updated status active for equipment name : " + equipmentName.Trim().ToUpper() + " and equipment code : " + equipmentCode.Trim().ToUpper() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                                #endregion
                                            }

                                            //Update Equipment Info
                                            MaintenanceDAL.UpdateEquipmentInfo(db, transaction, basicParam.SiteID, equipmentID, equipmentCode, equipmentName, equipmentdescription, manufacturerID, typeID, classID, equipmentImageName, fLocationID,
                                            resourceID, modelReferenceID, modelNumber, serialNumber, warrantyNumber, warrantyStartDate, warrantyExpireDate, purchaseDate, installDate, parentEquipmentID, basicParam.UserID, currentDate, currentTime);

                                            #region Log Information
                                            //Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoUpdatedExcel.Replace("[XXX]", equipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentCode.Trim().ToUpper());
                                            descInEnglish = "Successfully updated information for equipment name : " + equipmentName.Trim().ToUpper() + " and equipment code : " + equipmentCode.Trim().ToUpper() + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                            #endregion
                                        }

                                        foreach (int workGroupID in workGroupIDList)
                                        {
                                            if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                                MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                            else
                                                MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                        }

                                        insertMessage += "Equipment : " + equipmentName + "  details inserted successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                        inserted++;
                                    }
                                    else
                                    {
                                        //Update Equipment Info
                                        MaintenanceDAL.UpdateEquipmentInfo(db, transaction, basicParam.SiteID, equipmentID, equipmentCode, equipmentName, equipmentdescription, manufacturerID, typeID, classID, equipmentImageName, fLocationID,
                                            resourceID, modelReferenceID, modelNumber, serialNumber, warrantyNumber, warrantyStartDate, warrantyExpireDate, purchaseDate, installDate, parentEquipmentID, basicParam.UserID, currentDate, currentTime);

                                        foreach (int workGroupID in newWorkGroupIDList)
                                        {
                                            if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID) == false)
                                                MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                            else
                                                MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentID, workGroupID, currentDate, currentTime, basicParam.UserID);

                                            if (assignNewWorkGroupsToChild || assignedUserGroupTable.Rows.Count == 0 || assignedUserGroupTable.Rows.Count == deletedWorkGroupIDList.Count)
                                            {
                                                //User confirmed to assign work groups to its descendants (or) Assigning work group to parent for first time (or) deleting all existing workgroups from parent and assigning new workgroups.
                                                //in any of te above case, adding the work groups to all its sub equipments
                                                foreach (int equipID in equipmentIDList)
                                                {
                                                    if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID) == false)
                                                        MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                                    else
                                                        MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                                }
                                            }
                                        }

                                        if (deletedWorkGroupIDList.Count > 0)
                                        {
                                            string deletedUserWorkGroupIDList = string.Join(",", deletedWorkGroupIDList);
                                            string equipmentIDListString = equipmentIDList.Count > 0 ? (string.Join(",", equipmentIDList) + "," + equipmentID) : equipmentID.ToString();

                                            MaintenanceDAL.DeleteAssignedWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipmentIDListString, deletedUserWorkGroupIDList, basicParam.UserID, currentDate, currentTime);

                                            if (equipmentIDList.Count > 0 && (newWorkGroupIDList.Count == 0 || assignNewWorkGroupsToChild == false))
                                            {
                                                /* If parent has work group assigned, the it is mandatory for its sub equipments to have atleast one work group assigned.
                                                   While deleting a work group from parent, we are removing it from its sub equipments, so there could be a chance that all assigned any sub equipments might have got removed.
                                                   So making sure that if any sub equipment doesn't have work group assigned, if any then asssigning all the work groups to it */
                                                List<int> assignedWorkGroupIDList = new List<int>();

                                                foreach (DataRow workGroupRow in assignedUserGroupTable.Rows)
                                                {
                                                    int workGroupID = Convert.ToInt32(workGroupRow["FMASTERID"]);
                                                    if (!deletedWorkGroupIDList.Contains(workGroupID))
                                                        assignedWorkGroupIDList.Add(workGroupID);
                                                }

                                                if (newWorkGroupIDList.Count > 0)
                                                    assignedWorkGroupIDList.AddRange(newWorkGroupIDList);

                                                if (assignedWorkGroupIDList.Count > 0)
                                                {
                                                    DataTable equipmentTable = MaintenanceDAL.GetWorkGroupNotAssignedEquipments(db, transaction, basicParam.SiteID, string.Join(",", equipmentIDList));

                                                    foreach (DataRow equipmentRow in equipmentTable.Rows)
                                                    {
                                                        int equipID = Convert.ToInt32(equipmentRow["FEQUIPMENTID"]);
                                                        foreach (int workGroupID in assignedWorkGroupIDList)
                                                        {
                                                            if (MaintenanceDAL.CheckAuthorizationGroupExists(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID) == false)
                                                                MaintenanceDAL.InsertWorkGroup(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, basicParam.UserID, currentDate, currentTime);
                                                            else
                                                                MaintenanceDAL.UpdateAuthorizationGroupStatus(db, transaction, basicParam.SiteID, "EQUIPMENT", equipID, workGroupID, currentDate, currentTime, basicParam.UserID);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        #region Log Information
                                        //Log Information
                                        description = Language_Resources.Maintenance_LogInformations_Resource.equipmentInfoUpdatedExcel.Replace("[XXX]", equipmentName.Trim().ToUpper()).Replace("[YYY]", equipmentCode.Trim().ToUpper());
                                        descInEnglish = "Successfully updated information for equipment name : " + equipmentName.Trim().ToUpper() + " and equipment code : " + equipmentCode.Trim().ToUpper() + " through excel";
                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                        #endregion

                                        updateMessage += "Equipment : " + equipmentName + "  details updated successfully for line number : " + lineNumber.ToString() + Environment.NewLine;
                                        updated++;
                                    }
                                    #endregion

                                    #region Insert Measuring Point against Equipment ID
                                    //Insert all measuring point against modal reference ID
                                    if (measuringPointInfoList.Count > 0 && equipmentID > 0)
                                    {
                                        foreach (MeasuringPoint measuringPointInfo in measuringPointInfoList)
                                        {
                                            //Insert all measuring point against equipment ID.
                                            MaintenanceDAL.InsertMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPointInfo.Code, measuringPointInfo.Name, measuringPointInfo.Description,
                                            measuringPointInfo.Position, measuringPointInfo.CategoryID, measuringPointInfo.UOMID, equipmentID, Convert.ToChar(InfoType.Equipment), measuringPointInfo.ImageName,
                                            Convert.ToChar(measuringPointInfo.ReadingType), measuringPointInfo.MaxTextLength, measuringPointInfo.MinValue, measuringPointInfo.MaxValue,
                                            measuringPointInfo.MinValueWarning, measuringPointInfo.MaxValueWarning, measuringPointInfo.DecimalPlaces, measuringPointInfo.GroupID, measuringPointInfo.IsCounter, 'N', measuringPointInfo.OpcTagID, measuringPointInfo.TagUUID, basicParam.UserID, currentDate, currentTime);
                                        }
                                    }
                                    #endregion

                                    #region copying image file
                                    if (equipmentImageName.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                                    {
                                        if (!Directory.Exists(equipmentAttachmentPathDest))
                                        {
                                            System.IO.Directory.CreateDirectory(equipmentAttachmentPathDest);
                                        }
                                        System.IO.File.Copy(equipmentAttachmentPathSource + "\\" + imageNameExcel, equipmentAttachmentPathDest + "\\" + equipmentImageName, true);
                                    }
                                    #endregion
                                }
                            }
                            lineNumber++;
                        }
                        transaction.Commit();
                    }
                    catch
                    {
                        if (transaction != null)
                            transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                            dataReaderInfo.Close();
                    }
                }
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentLogInformation + "_" + DateTime.Now.ToString());
                logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentBasicInfoUploadLog);
                logStreamWriter.WriteLine("****************************************************************************************");
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyInserted + " : " + inserted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyUpdated + " : " + updated.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyDeleted + " : " + deleted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.failure + " : " + failure.ToString());

                if (insertMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.Equipment_Resource.addedItems + "--------------------------------------");
                    logStreamWriter.WriteLine(insertMessage);
                }

                if (updateMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.Equipment_Resource.updatedItems + "-------------------------------------");
                    logStreamWriter.WriteLine(updateMessage);
                }

                if (deleteMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.Equipment_Resource.deletedItems + "-------------------------------------");
                    logStreamWriter.WriteLine(deleteMessage);
                }

                if (failureMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                    logStreamWriter.WriteLine(failureMessage);
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while uploading equipment information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " UserID: " + basicParam.UserID);
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentLogInformation + "_" + DateTime.Now.ToString());
                logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentBasicInfoUploadLog);
                logStreamWriter.WriteLine("****************************************************************************************");
                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                logStreamWriter.WriteLine(ex.Message + " " + Language_Resources.Equipment_Resource.inTheLineNumber + " : " + lineNumber.ToString() + Environment.NewLine);
            }
        }

        private void InsertEquipmentSupportInfoFromExcel(Database db, BasicParam basicParam, DbConnection connection, OleDbConnection olDbObjConn, String connectionString, FileStream logFileStream, StreamWriter logStreamWriter)
        {
            int inserted = 0;
            int updated = 0;
            int deleted = 0;
            int failure = 0;
            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;
            int lineNumber = 2;

            IDataReader dataReaderInfo = null;
            try
            {
                int createdOn = 0;
                int createdTime = 0;
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                string description = string.Empty;
                string descInEnglish = string.Empty;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);
                Common.GetSiteDateTimeFormat(db, basicParam.SiteID, ref siteDateFormat, ref siteTimeFormat);

                olDbObjConn = new OleDbConnection(connectionString);
                olDbObjConn.Open();
                OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [Support Info$]", olDbObjConn);
                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DbTransaction transaction = null;
                DataTable excelDataTable = dtExcelDataSet.Tables[0];
                if (excelDataTable.Rows.Count > 0)
                {
                    try
                    {
                        transaction = connection.BeginTransaction();
                        foreach (DataRow row in excelDataTable.Rows)
                        {
                            #region ReadExcel
                            int equipmentID = 0;
                            int supportID = 0;
                            string equipmentCode = string.Empty;
                            string equipmentName = string.Empty;
                            string supportName = string.Empty;
                            string supportNumber = string.Empty;
                            string supportEmail = string.Empty;
                            string supportTypeExcel = string.Empty;
                            SupportType supportType = SupportType.None;
                            char excelStatus = 'A';

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentCode))
                                equipmentCode = row[Language_Resources.Equipment_Resource.equipmentCode].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentName))
                                equipmentName = row[Language_Resources.Equipment_Resource.equipmentName].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.supportName))
                                supportName = row[Language_Resources.Equipment_Resource.supportName].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.supportNumber))
                                supportNumber = row[Language_Resources.Equipment_Resource.supportNumber].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.supportEmailID))
                            {
                                supportEmail = row[Language_Resources.Equipment_Resource.supportEmailID].ToString().Trim();
                                Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
                                Match match = regex.Match(supportEmail);
                                if (supportEmail.Length>0 && !match.Success)
                                {
                                    failureMessage += "Invalid support email id in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                    lineNumber++;
                                    continue;
                                }
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.supportType))
                            {
                                supportTypeExcel = row[Language_Resources.Equipment_Resource.supportType].ToString().Trim();
                                if (supportTypeExcel.Length > 0)
                                    Enum.TryParse(supportTypeExcel, out supportType);
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.status))
                                excelStatus = row[Language_Resources.Equipment_Resource.status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';
                            #endregion

                            if (supportName.Length > 0 || supportNumber.Length > 0 || supportEmail.Length > 0 || supportTypeExcel.Length > 0)
                            {
                                #region Validation fields
                                if (equipmentCode.Length == 0)
                                {
                                    failureMessage += "Equipment code is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (equipmentName.Length == 0)
                                {
                                    failureMessage += "Equipment name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (supportName.Length == 0)
                                {
                                    failureMessage += "Support name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (supportTypeExcel.Length == 0)
                                {
                                    failureMessage += "Support type is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (supportName.Length > 50)
                                {
                                    failureMessage += "Support name  length should be less than 50 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (supportNumber.Length > 50)
                                {
                                    failureMessage += "Support number  length should be less than 50 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (supportEmail.Length > 200)
                                {
                                    failureMessage += "Support email length should be less than 200 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                #endregion
                                else
                                {
                                    #region Validation Equipment 
                                    dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, 0, equipmentCode, equipmentName, false, true);
                                    if (dataReaderInfo.Read())
                                    {
                                        equipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                        dataReaderInfo.Close();
                                    }
                                    else
                                    {
                                        dataReaderInfo.Close();
                                        failureMessage += "Equipment doesn't exist : " + equipmentName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                        lineNumber++;
                                        continue;
                                    }
                                    #endregion

                                    dataReaderInfo = MaintenanceDAL.GetSupportInfo(db, transaction, basicParam.SiteID, equipmentID, 0, supportName, Convert.ToChar(supportType));
                                    if (dataReaderInfo.Read())
                                        supportID = Common.GetSafeInt32(dataReaderInfo, "FSUPPORTID");
                                    dataReaderInfo.Close();

                                    if (excelStatus == 'I')
                                    {
                                        if (supportID > 0)
                                        {
                                            MaintenanceDAL.UpdateSupportStatus(db, transaction, basicParam.SiteID, equipmentID, supportID, 'I', basicParam.UserID, createdOn, createdTime);
                                            #region Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.supportInfoDeletedExcel.Replace("[XXX]", supportName.Trim()).Replace("[XXX]", equipmentName.Trim());
                                            descInEnglish = "Successfully deleted support info : " + supportName + " for equipment name : " + equipmentName.Trim() + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            #endregion

                                            deleteMessage += "Support Name : " + supportName + "  details deleted successfully  for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            deleted++;
                                        }
                                        else
                                        {
                                            failureMessage += "Support Name : " + supportName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                    }
                                    else if (supportID == 0)
                                    {
                                        MaintenanceDAL.InsertSupportData(db, transaction, equipmentID, basicParam.SiteID, supportName, supportNumber, supportEmail, Convert.ToChar(supportType), basicParam.UserID, createdOn, createdTime);
                                        #region Log Information
                                        description = Language_Resources.Maintenance_LogInformations_Resource.supportInfoInsertExcel.Replace("[XXX]", supportName.Trim()).Replace("[XXX]", equipmentName.Trim());
                                        descInEnglish = "Successfully inserted support info : " + supportName + " for equipment name : " + equipmentName.Trim() + " through excel";
                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                        #endregion

                                        insertMessage += "Support Name : " + supportName + "  details inserted successfully for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                        inserted++;
                                    }
                                    else
                                    {
                                        MaintenanceDAL.UpdateSupportData(db, transaction, basicParam.SiteID, equipmentID, supportID, supportNumber, supportEmail, basicParam.UserID, createdOn, createdTime);
                                        #region Log Information
                                        description = Language_Resources.Maintenance_LogInformations_Resource.supportInfoUpdatedExcel.Replace("[XXX]", supportName.Trim()).Replace("[XXX]", equipmentName.Trim());
                                        descInEnglish = "Successfully updated support info : " + supportName + " for equipment name : " + equipmentName.Trim() + " through excel";
                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Equipment_Info.ToString(), description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                        #endregion

                                        updateMessage += "Support Name : " + supportName + "  details updated successfully  for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                        updated++;
                                    }
                                }
                            }
                            lineNumber++;
                        }
                        transaction.Commit();
                    }
                    catch
                    {
                        if (transaction != null)
                            transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                            dataReaderInfo.Close();
                    }
                }

                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentSupportInfoUploadLog);
                logStreamWriter.WriteLine("****************************************************************************************");
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyInserted + " : " + inserted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyUpdated + " : " + updated.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyDeleted + " : " + deleted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.failure + " : " + failure.ToString());

                if (insertMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.Equipment_Resource.addedItems + "--------------------------------------");
                    logStreamWriter.WriteLine(insertMessage);
                }

                if (updateMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.Equipment_Resource.updatedItems + "-------------------------------------");
                    logStreamWriter.WriteLine(updateMessage);
                }

                if (deleteMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.Equipment_Resource.deletedItems + "-------------------------------------");
                    logStreamWriter.WriteLine(deleteMessage);
                }

                if (failureMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                    logStreamWriter.WriteLine(failureMessage);
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while uploading equipment support information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " UserID: " + basicParam.UserID);
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentSupportInfoUploadLog);
                logStreamWriter.WriteLine("****************************************************************************************");
                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                logStreamWriter.WriteLine(ex.Message + " " + Language_Resources.Equipment_Resource.inTheLineNumber + " : " + lineNumber.ToString() + Environment.NewLine);
            }
        }

        private void InsertDocumentsInfoFromExcel(Database db, BasicParam basicParam, string fileName, string unzipedFolderName, string equipmentAttachmentTempSource, DbConnection connection, OleDbConnection olDbObjConn, String connectionString, FileStream logFileStream, StreamWriter logStreamWriter)
        {
            int inserted = 0;
            int deleted = 0;
            int failure = 0;
            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string deleteMessage = string.Empty;
            int lineNumber = 2;
            string path = ConfigurationManager.AppSettings["LogFileLocation"];

            DbTransaction transaction = null;
            IDataReader dataReaderInfo = null;
            try
            {
                int createdOn = 0;
                int createdTime = 0;
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                string description = string.Empty;
                string descInEnglish = string.Empty;
                string equipmentAttachmentPathSource = path + fileName + "\\" + unzipedFolderName + "\\EquipmentAttachments";
                string equipmentAttachmentPathDest = equipmentAttachmentTempSource + "\\EquipmentAttachments";

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);
                Common.GetSiteDateTimeFormat(db, basicParam.SiteID, ref siteDateFormat, ref siteTimeFormat);

                olDbObjConn = new OleDbConnection(connectionString);
                olDbObjConn.Open();
                OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [Document Attachments$]", olDbObjConn);
                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DataTable excelDataTable = dtExcelDataSet.Tables[0];
                if (excelDataTable.Rows.Count > 0)
                {
                    try
                    {
                        transaction = connection.BeginTransaction();

                        foreach (DataRow row in excelDataTable.Rows)
                        {
                            #region ReadExcel
                            int equipmentID = 0;
                            string equipmentName = string.Empty;
                            string specificationDocumentExcel = string.Empty;
                            string manualsExcel = string.Empty;
                            string photosAndVideosExcel = string.Empty;
                            string[] sDocumentsList = new string[] { }; ;
                            string[] manualsList = new string[] { }; ;
                            string[] photosAndVideosList = new string[] { }; ;
                            char excelStatus = 'A';


                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.equipmentName))
                                equipmentName = row[Language_Resources.Equipment_Resource.equipmentName].ToString().Trim();

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.specificationDocument))
                            {
                                specificationDocumentExcel = row[Language_Resources.Equipment_Resource.specificationDocument].ToString().Trim();
                                sDocumentsList = specificationDocumentExcel.Split(',');
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.manuals))
                            {
                                manualsExcel = row[Language_Resources.Equipment_Resource.manuals].ToString().Trim();
                                manualsList = manualsExcel.Split(',');
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.photosAndVideos))
                            {
                                photosAndVideosExcel = row[Language_Resources.Equipment_Resource.photosAndVideos].ToString().Trim();
                                photosAndVideosList = photosAndVideosExcel.Split(',');
                            }

                            if (excelDataTable.Columns.Contains(Language_Resources.Equipment_Resource.status))
                                excelStatus = row[Language_Resources.Equipment_Resource.status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';
                            #endregion

                            if (equipmentName.Length > 0 || specificationDocumentExcel.Length > 0 || manualsExcel.Length > 0 || photosAndVideosExcel.Length > 0)
                            {
                                #region Validation fields
                                if (equipmentName.Length == 0)
                                {
                                    failureMessage += "Equipment Name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                #endregion
                                else
                                {
                                    #region Validation Equipment fields 
                                    dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, 0, string.Empty, equipmentName, false, true);
                                    if (dataReaderInfo.Read())
                                    {
                                        equipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                        dataReaderInfo.Close();
                                    }
                                    else
                                    {
                                        dataReaderInfo.Close();
                                        failureMessage += "Equipment doesn't exist : " + equipmentName + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                        lineNumber++;
                                        continue;
                                    }
                                    #endregion

                                    #region Insert/InActive attached documents
                                    if (specificationDocumentExcel.Length > 0)
                                    {
                                        foreach (string sDocumentName in sDocumentsList)
                                        {
                                            #region validation 
                                            DocumentType documentType = DocumentType.NONE;
                                            string fileSourcePath = string.Empty;
                                            string extension = string.Empty;
                                            string[] fileIndex = sDocumentName.Split('.');
                                            if (fileIndex.Length > 1)
                                                extension = fileIndex[1];
                                            if (string.IsNullOrEmpty(extension))
                                            {
                                                failureMessage += "Invalid file format for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            if ((extension == "pdf" || extension == "xls" || extension == "xlsx" || extension == "doc" || extension == "docx" || extension == "txt" || extension == "xps" || extension == "ppt" || extension == "pptx" || extension == "gif" || extension == "png" || extension == "jpeg" || extension == "jpg"))
                                                documentType = DocumentType.SDOCUMENT;
                                            else
                                            {
                                                failureMessage += "File format not supported for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            #endregion

                                            int documentID = 0;
                                            dataReaderInfo = MaintenanceDAL.CheckDocumentExistFromExcel(db, transaction, basicParam.SiteID, sDocumentName, Convert.ToChar(documentType), InfoType.Equipment.ToString().ToUpper(), equipmentID);
                                            if (dataReaderInfo.Read())
                                            {
                                                documentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                                                dataReaderInfo.Close();
                                            }
                                            else
                                            {
                                                dataReaderInfo.Close();
                                                if (excelStatus == 'I')
                                                {
                                                    failureMessage += "Specification document : " + sDocumentName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    continue;
                                                }
                                            }

                                            if (excelStatus == 'I')
                                            {
                                                MaintenanceDAL.InActivateDocumentsInfo(db, transaction, basicParam.SiteID, documentID, basicParam.UserID, createdOn, createdTime);
                                                deleteMessage += "Specification document : " + sDocumentName + " deleted successfully  for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                deleted++;
                                            }
                                            else if (excelStatus == 'A')
                                            {
                                                DirectoryInfo attachmentFolderPath = new DirectoryInfo(equipmentAttachmentPathSource);
                                                FileInfo[] files = attachmentFolderPath.GetFiles(sDocumentName);
                                                if (files.Length > 0)
                                                {
                                                    if (documentID == 0)
                                                    {
                                                        if (!Directory.Exists(equipmentAttachmentPathDest))
                                                            System.IO.Directory.CreateDirectory(equipmentAttachmentPathDest);

                                                        string equipmentPath = equipmentAttachmentPathDest + "\\" + equipmentID;
                                                        string thumbnailEquipmentPath = equipmentPath + "\\" + "Thumbnail\\";
                                                        if (!Directory.Exists(equipmentPath))
                                                        {
                                                            Directory.CreateDirectory(equipmentPath);
                                                            Directory.CreateDirectory(thumbnailEquipmentPath);
                                                        }

                                                        string equipmentDocName = "Spec_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + "_" + sDocumentName;
                                                        System.IO.File.Copy(files[0].FullName, equipmentPath + "\\" + equipmentDocName, true);

                                                        MaintenanceDAL.InsertDocumentsAndImagesInfo(db, transaction, basicParam.SiteID, equipmentID, InfoType.Equipment.ToString().ToUpper(), equipmentDocName, Convert.ToChar(documentType), basicParam.UserID, createdOn, createdTime);

                                                        insertMessage += "Specification document : " + sDocumentName + " inserted successfully  for equipment name : " + equipmentName + "  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else
                                                    {
                                                        //File does not exist in folder
                                                        failureMessage += "Specification document : " + sDocumentName + " is already exist, can't be updated  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                    }
                                                }
                                                else
                                                {
                                                    //File does not exist in folder
                                                    failureMessage += "Specification document : " + sDocumentName + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                }
                                            }
                                        }
                                    }
                                    if (manualsExcel.Length > 0)
                                    {
                                        foreach (string manualName in manualsList)
                                        {
                                            #region validation 
                                            DocumentType documentType = DocumentType.NONE;
                                            string fileSourcePath = string.Empty;
                                            string extension = string.Empty;
                                            string[] fileIndex = manualName.Split('.');
                                            if (fileIndex.Length > 1)
                                                extension = fileIndex[1];
                                            if (string.IsNullOrEmpty(extension))
                                            {
                                                failureMessage += "Invalid file format for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            if ((extension == "pdf" || extension == "xls" || extension == "xlsx" || extension == "doc" || extension == "docx" || extension == "txt" || extension == "xps" || extension == "ppt" || extension == "pptx" || extension == "gif" || extension == "png" || extension == "jpeg" || extension == "jpg"))
                                                documentType = DocumentType.DOCUMENT;
                                            else
                                            {
                                                failureMessage += "File format not supported for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            #endregion

                                            int documentID = 0;
                                            dataReaderInfo = MaintenanceDAL.CheckDocumentExistFromExcel(db, transaction, basicParam.SiteID, manualName, Convert.ToChar(documentType), InfoType.Equipment.ToString().ToUpper(), equipmentID);
                                            if (dataReaderInfo.Read())
                                            {
                                                documentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                                                dataReaderInfo.Close();
                                            }
                                            else
                                            {
                                                dataReaderInfo.Close();
                                                if (excelStatus == 'I')
                                                {
                                                    failureMessage += "Manual : " + manualName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    continue;
                                                }
                                            }

                                            if (excelStatus == 'I')
                                            {
                                                MaintenanceDAL.InActivateDocumentsInfo(db, transaction, basicParam.SiteID, documentID, basicParam.UserID, createdOn, createdTime);
                                                deleteMessage += "Manual : " + manualName + " deleted successfully  for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                deleted++;
                                            }
                                            else if (excelStatus == 'A')
                                            {
                                                DirectoryInfo attachmentFolderPath = new DirectoryInfo(equipmentAttachmentPathSource);
                                                FileInfo[] files = attachmentFolderPath.GetFiles(manualName);
                                                if (files.Length > 0)
                                                {
                                                    if (documentID == 0)
                                                    {
                                                        if (!Directory.Exists(equipmentAttachmentPathDest))
                                                            System.IO.Directory.CreateDirectory(equipmentAttachmentPathDest);

                                                        string equipmentPath = equipmentAttachmentPathDest + "\\" + equipmentID;
                                                        string thumbnailEquipmentPath = equipmentPath + "\\" + "Thumbnail\\";
                                                        if (!Directory.Exists(equipmentPath))
                                                        {
                                                            Directory.CreateDirectory(equipmentPath);
                                                            Directory.CreateDirectory(thumbnailEquipmentPath);
                                                        }

                                                        string equipmentDocName = "Doc_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + "_" + manualName;
                                                        System.IO.File.Copy(files[0].FullName, equipmentPath + "\\" + equipmentDocName, true);

                                                        MaintenanceDAL.InsertDocumentsAndImagesInfo(db, transaction, basicParam.SiteID, equipmentID, InfoType.Equipment.ToString().ToUpper(), equipmentDocName, Convert.ToChar(documentType), basicParam.UserID, createdOn, createdTime);

                                                        insertMessage += "Manual : " + manualName + " inserted successfully  for equipment name : " + equipmentName + "  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else
                                                    {
                                                        //File does not exist in folder
                                                        failureMessage += "Manual : " + manualName + " is already exist, can't be updated  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                    }
                                                }
                                                else
                                                {
                                                    //File does not exist in folder
                                                    failureMessage += "Manual : " + manualName + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                }
                                            }
                                        }
                                    }
                                    if (photosAndVideosExcel.Length > 0)
                                    {
                                        foreach (string photoAndVideoName in photosAndVideosList)
                                        {
                                            #region validation 
                                            DocumentType documentType = DocumentType.NONE;
                                            string fileSourcePath = string.Empty;
                                            string extension = string.Empty;
                                            string[] fileIndex = photoAndVideoName.Split('.');
                                            if (fileIndex.Length > 1)
                                                extension = fileIndex[1];
                                            if (string.IsNullOrEmpty(extension))
                                            {
                                                failureMessage += "Invalid file format for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            if ((extension == "gif" || extension == "png" || extension == "jpeg" || extension == "jpg"))
                                                documentType = DocumentType.IMAGE;
                                            else if (extension == "ogg" || extension == "ogv" || extension == "avi" || extension == "mpeg" || extension == "mov" || extension == "wmv" || extension == "flv" || extension == "mp4" || extension == "mpg")
                                                documentType = DocumentType.VIDEO;
                                            else
                                            {
                                                failureMessage += "File format not supported for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                continue;
                                            }
                                            #endregion

                                            int documentID = 0;
                                            dataReaderInfo = MaintenanceDAL.CheckDocumentExistFromExcel(db, transaction, basicParam.SiteID, photoAndVideoName, Convert.ToChar(documentType), InfoType.Equipment.ToString().ToUpper(), equipmentID);
                                            if (dataReaderInfo.Read())
                                            {
                                                documentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                                                dataReaderInfo.Close();
                                            }
                                            else
                                            {
                                                dataReaderInfo.Close();
                                                if (excelStatus == 'I')
                                                {
                                                    failureMessage += "Photos & Videos : " + photoAndVideoName + " cannot be deleted as it is not available for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    continue;
                                                }
                                            }

                                            if (excelStatus == 'I')
                                            {
                                                MaintenanceDAL.InActivateDocumentsInfo(db, transaction, basicParam.SiteID, documentID, basicParam.UserID, createdOn, createdTime);
                                                deleteMessage += "Photos & Videos : " + photoAndVideoName + " deleted successfully  for equipment name : " + equipmentName + " for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                deleted++;
                                            }
                                            else if (excelStatus == 'A')
                                            {
                                                DirectoryInfo attachmentFolderPath = new DirectoryInfo(equipmentAttachmentPathSource);
                                                FileInfo[] files = attachmentFolderPath.GetFiles(photoAndVideoName);
                                                if (files.Length > 0)
                                                {
                                                    if (documentID == 0)
                                                    {
                                                        if (!Directory.Exists(equipmentAttachmentPathDest))
                                                            System.IO.Directory.CreateDirectory(equipmentAttachmentPathDest);

                                                        string equipmentPath = equipmentAttachmentPathDest + "\\" + equipmentID;
                                                        string thumbnailEquipmentPath = equipmentPath + "\\" + "Thumbnail\\";
                                                        if (!Directory.Exists(equipmentPath))
                                                        {
                                                            Directory.CreateDirectory(equipmentPath);
                                                            Directory.CreateDirectory(thumbnailEquipmentPath);
                                                        }

                                                        string equipmentDocName = string.Empty;
                                                        if (documentType == DocumentType.IMAGE)
                                                            equipmentDocName = "IMG_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + "_" + photoAndVideoName;
                                                        else if (documentType == DocumentType.VIDEO)
                                                            equipmentDocName = "VID_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + "_" + photoAndVideoName;

                                                        System.IO.File.Copy(files[0].FullName, equipmentPath + "\\" + equipmentDocName, true);

                                                        MaintenanceDAL.InsertDocumentsAndImagesInfo(db, transaction, basicParam.SiteID, equipmentID, InfoType.Equipment.ToString().ToUpper(), equipmentDocName, Convert.ToChar(documentType), basicParam.UserID, createdOn, createdTime);

                                                        insertMessage += "Photos & Videos : " + photoAndVideoName + " inserted successfully  for equipment name : " + equipmentName + "  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else
                                                    {
                                                        //File does not exist in folder
                                                        failureMessage += "Photos & Videos : " + photoAndVideoName + " is already exist, can't be updated  for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                    }
                                                }
                                                else
                                                {
                                                    //File does not exist in folder
                                                    failureMessage += "Photos & Videos : " + photoAndVideoName + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                }
                            }
                            lineNumber++;
                        }
                        transaction.Commit();
                    }
                    catch
                    {
                        if (transaction != null)
                            transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                            dataReaderInfo.Close();
                    }
                }
                logStreamWriter.WriteLine(Environment.NewLine + Language_Resources.Equipment_Resource.equipmentAttachmentInfoUploadLog);
                logStreamWriter.WriteLine("*****************************************************************************************");
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyInserted + " : " + inserted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.successfullyDeleted + " : " + deleted.ToString());
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.failure + " : " + failure.ToString());

                if (insertMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.Equipment_Resource.addedItems + "--------------------------------------");
                    logStreamWriter.WriteLine(insertMessage);
                }
                if (deleteMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.Equipment_Resource.deletedItems + "--------------------------------------");
                    logStreamWriter.WriteLine(deleteMessage);
                }

                if (failureMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                    logStreamWriter.WriteLine(failureMessage);
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while uploading equipment information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " UserID: " + basicParam.UserID);
                logStreamWriter.WriteLine(Language_Resources.Equipment_Resource.equipmentAttachmentInfoUploadLog);
                logStreamWriter.WriteLine("*****************************************************************************************");
                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.Equipment_Resource.failureResons + "------------------------------------");
                logStreamWriter.WriteLine(ex.Message + " " + Language_Resources.Equipment_Resource.inTheLineNumber + " : " + lineNumber.ToString() + Environment.NewLine);
            }
        }
        #endregion
        #endregion

        #endregion

        #region Equipment Model Info
        public EquipmentModelListInfo GetEquipmentModelList(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader datatReaderEquipmentModel = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                EquipmentModelListInfo equipmentModelListInfo = new EquipmentModelListInfo();
                TypeValueInfo equipmentModelInfo = null;

                //Return measuring point group info list for the site
                datatReaderEquipmentModel = MaintenanceDAL.GetEquipmentModelList(db, equipmentFilterInfo.SiteID, 0, equipmentFilterInfo.PageSize, equipmentFilterInfo.PageIndex, equipmentFilterInfo.SerachNameOrCode, 0, 0, equipmentFilterInfo.SortType);
                while (datatReaderEquipmentModel.Read())
                {
                    equipmentModelInfo = new TypeValueInfo();
                    equipmentModelInfo.DisplayName = Common.GetSafeString(datatReaderEquipmentModel, "FEQUIPMENTNAME");
                    equipmentModelInfo.TypeValue = Common.GetSafeInt32(datatReaderEquipmentModel, "FEQUIPMENTID");
                    equipmentModelListInfo.EquipmentModelList.Add(equipmentModelInfo);

                    if (equipmentModelListInfo.TotalRecords == 0 && equipmentFilterInfo.PageSize > 0)
                        equipmentModelListInfo.TotalRecords = Common.GetSafeInt32(datatReaderEquipmentModel, "FCOUNT");
                }
                datatReaderEquipmentModel.Close();

                return equipmentModelListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching equipment model list info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ", UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (datatReaderEquipmentModel != null && !datatReaderEquipmentModel.IsClosed)
                    datatReaderEquipmentModel.Close();
            }
        }

        public EquipmentModelInfo GetEquipmentModelInfo(EquipmentFilterInfo equipmentFilterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                return GetEquipmentModelEditInfo(db, equipmentFilterInfo.SiteID, equipmentFilterInfo.UserID, equipmentFilterInfo.EquipmentID);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int InsertOrUpdateEquipmentModelInfo(BasicParam basicParam, EquipmentDetailsInfo equipmentDetailsInfo)
        {
            try
            {
                #region Validation
                if (string.IsNullOrEmpty(equipmentDetailsInfo.EquipmentName))
                {
                    return -1;
                }
                if (string.IsNullOrEmpty(equipmentDetailsInfo.ModelNumber))
                {
                    return -4;
                }
                if (equipmentDetailsInfo.ManufacturerID <= 0)
                {
                    return -5;
                }
                if (equipmentDetailsInfo.CategoryID <= 0)
                {
                    return -6;
                }
                #endregion

                int currentDate = 0;
                int currentTime = 0;

                string description = string.Empty;
                string descInEnglish = string.Empty;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                int equipmentModelDBID = 0;
                int equipmentModelReturnID = 0;
                string modelStatus = string.Empty;

                if (MaintenanceDAL.CheckEquipmentModelInfoExist(db, null, basicParam.SiteID, 0, equipmentDetailsInfo.EquipmentID, equipmentDetailsInfo.ManufacturerID, equipmentDetailsInfo.ModelNumber, true))
                {
                    return -7; // Manufacturer and Version name is already exists
                }

                equipmentModelDBID = MaintenanceDAL.GetEquipmentModelID(db, null, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, equipmentDetailsInfo.EquipmentName, out modelStatus);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();

                    try
                    {
                        if (equipmentDetailsInfo.EquipmentID > 0)
                        {
                            //update
                            if (equipmentModelDBID > 0)
                            {
                                equipmentModelReturnID = -2;//Master data name is already exist
                            }
                            else
                            {   // update
                                MaintenanceDAL.UpdateEquipmentModelInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentID, equipmentDetailsInfo.EquipmentName, equipmentDetailsInfo.EquipmentDesc, equipmentDetailsInfo.ManufacturerID,
                                    equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID, equipmentDetailsInfo.EquipmentImageName, equipmentDetailsInfo.ModelNumber, basicParam.UserID, currentDate, currentTime);

                                equipmentModelReturnID = equipmentDetailsInfo.EquipmentID;

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.equipmentModelInfoUpdated.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper());
                                descInEnglish = "Successfully updated information for equipment model name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_EquipmentModel_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }
                        }
                        else
                        {   //insert
                            if (equipmentModelDBID > 0)//update
                            {
                                if (modelStatus == "I")
                                {
                                    //mark equipment madel status as 'active'
                                    MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentModelDBID, 'A', Convert.ToChar(InfoType.Equipment_Model), basicParam.UserID, currentDate, currentTime);

                                    #region Log Information
                                    description = Language_Resources.Maintenance_LogInformations_Resource.equipmentModelInfoStatus.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper());
                                    descInEnglish = "Successfully updated status active for equipment model name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper();
                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Functional_Location.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                    #endregion

                                    //update return masterDataDBID id
                                    MaintenanceDAL.UpdateEquipmentModelInfo(db, transaction, basicParam.SiteID, equipmentModelDBID, equipmentDetailsInfo.EquipmentName, equipmentDetailsInfo.EquipmentDesc, equipmentDetailsInfo.ManufacturerID,
                                        equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID, equipmentDetailsInfo.EquipmentImageName, equipmentDetailsInfo.ModelNumber, basicParam.UserID, currentDate, currentTime);

                                    equipmentModelReturnID = equipmentModelDBID;
                                }
                                else
                                {
                                    equipmentModelReturnID = -2;//Master data name is already exist
                                }
                            }
                            else
                            {
                                //Insert
                                equipmentModelReturnID = MaintenanceDAL.InsertEquipmentModelInfo(db, transaction, basicParam.SiteID, equipmentDetailsInfo.EquipmentName, equipmentDetailsInfo.EquipmentDesc,
                                equipmentDetailsInfo.ManufacturerID, equipmentDetailsInfo.CategoryID, equipmentDetailsInfo.ClassID, equipmentDetailsInfo.EquipmentImageName,
                                equipmentDetailsInfo.ModelNumber, basicParam.UserID, currentDate, currentTime);


                            }

                            #region Log Information
                            //Log Information
                            description = Language_Resources.Maintenance_LogInformations_Resource.equipmentModelInfoAdded.Replace("[XXX]", equipmentDetailsInfo.EquipmentName.Trim().ToUpper());
                            descInEnglish = "Successfully inserted information for equipment model name : " + equipmentDetailsInfo.EquipmentName.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_EquipmentModel_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                        }

                        transaction.Commit();
                        return equipmentModelReturnID;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while insert or updating equipment model data info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public int DeleteEquipmentModelInfo(BasicParam basicParam, int equipmentModelID)
        {
            IDataReader datatReaderEquipmentModel = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                int result = 0;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();

                    try
                    {
                        if (!MaintenanceDAL.CheckEquipmentModelInfoExist(db, transaction, basicParam.SiteID, equipmentModelID, 0, 0, string.Empty, false))
                        {
                            //In-activating documents & images against equipment model

                            MaintenanceDAL.UpdateDocumentsInfoStatus(db, transaction, basicParam.SiteID, equipmentModelID, "MODEL", 'I', basicParam.UserID, currentDate, currentTime);

                            //In-activating  measuring point against equipment model                           
                            MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, equipmentModelID, Convert.ToChar(InfoType.Equipment_Model), 0, 'I', basicParam.UserID, currentDate, currentTime);
                            //Mark status as 'In-active' for equipment model 
                            MaintenanceDAL.UpdateEquipmentInfoStatus(db, transaction, basicParam.SiteID, equipmentModelID, 'I', Convert.ToChar(InfoType.Equipment_Model), basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            string equipmentModelName = string.Empty;
                            datatReaderEquipmentModel = MaintenanceDAL.GetEquipmentModelList(db, basicParam.SiteID, equipmentModelID, 0, 0, string.Empty, 0, 0, string.Empty);
                            if (datatReaderEquipmentModel.Read())
                            {
                                equipmentModelName = Common.GetSafeString(datatReaderEquipmentModel, "FEQUIPMENTNAME");
                            }
                            datatReaderEquipmentModel.Close();

                            //Log Information
                            string description = Language_Resources.Maintenance_LogInformations_Resource.equipmentModelInfoUpdated.Replace("[XXX]", equipmentModelName.Trim().ToUpper());
                            string descInEnglish = "Successfully deleted information for equipment model name : " + equipmentModelName.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_EquipmentModel_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            transaction.Commit();
                            result = 1; //successfully deleted equipment model info
                        }
                        else
                        {

                            transaction.Rollback();
                            result = 2; //equipment model is already link with equipment, can't delete
                        }

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while deleting equipment model data info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (datatReaderEquipmentModel != null && !datatReaderEquipmentModel.IsClosed)
                    datatReaderEquipmentModel.Close();
            }
        }

        private EquipmentModelInfo GetEquipmentModelEditInfo(Database db, int siteID, int userID, int equipmentID)
        {
            IDataReader dataReaderEquipmentInfo = null;
            try
            {
                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                EquipmentModelInfo equipmentDetailsInfo = null;

                Common.GetSiteDateTimeFormat(db, siteID, ref siteDateFormat, ref siteTimeFormat);
                string ImagePath = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + siteID + "/" + "Thumbnail";

                dataReaderEquipmentInfo = MaintenanceDAL.GetEquipmentModelList(db, siteID, equipmentID, 0, 0, string.Empty, 0, 0, string.Empty);
                if (dataReaderEquipmentInfo.Read())
                {
                    equipmentDetailsInfo = new EquipmentModelInfo();
                    equipmentDetailsInfo.EquipmentModelID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FEQUIPMENTID");
                    equipmentDetailsInfo.EquipmentModelName = Common.GetSafeString(dataReaderEquipmentInfo, "FEQUIPMENTNAME");
                    equipmentDetailsInfo.EquipmentModelDesc = Common.GetSafeString(dataReaderEquipmentInfo, "FDESCRIPTION");
                    equipmentDetailsInfo.EquipmentModelNumber = Common.GetSafeString(dataReaderEquipmentInfo, "FMODELNUMBER");
                    equipmentDetailsInfo.ManufacturerID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FMANUFID");
                    equipmentDetailsInfo.CategoryID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCATEGORYID");
                    equipmentDetailsInfo.ClassID = Common.GetSafeInt32(dataReaderEquipmentInfo, "FCLASSID");

                    string imageName = Common.GetSafeString(dataReaderEquipmentInfo, "FIMAGENAME");
                    string imageUrl = string.Empty;

                    if (imageName.Length > 0)
                        imageUrl = ImagePath + "/" + imageName;

                    if (imageUrl.Length > 0)
                        equipmentDetailsInfo.EquipmentImagePath = imageUrl;
                    else
                        equipmentDetailsInfo.EquipmentImagePath = null;

                }
                dataReaderEquipmentInfo.Close();

                return equipmentDetailsInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting equipment model records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + siteID + ";UserID : " + userID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderEquipmentInfo != null && !dataReaderEquipmentInfo.IsClosed)
                    dataReaderEquipmentInfo.Close();
            }
        }

        #endregion

        #region Measuring Point Info
        public List<TypeValueInfo> GetSensorTypeInfo(BasicParam basicParam)
        {
            IDataReader datatReaderSensorTypeInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<TypeValueInfo> sensorTypeInfoList = new List<TypeValueInfo>();
                TypeValueInfo sensorTypeInfo = null;

                //Return sensor type info list for the site
                datatReaderSensorTypeInfo = MaintenanceDAL.GetSensorTypeInfo(db, basicParam.SiteID);
                while (datatReaderSensorTypeInfo.Read())
                {
                    sensorTypeInfo = new TypeValueInfo();
                    sensorTypeInfo.DisplayName = Common.GetSafeString(datatReaderSensorTypeInfo, "FSENSORTYPENAME");
                    sensorTypeInfo.TypeValue = Common.GetSafeInt32(datatReaderSensorTypeInfo, "FSENSORTYPEID");
                    sensorTypeInfoList.Add(sensorTypeInfo);
                }
                datatReaderSensorTypeInfo.Close();

                return sensorTypeInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching sensor type info list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + basicParam.SiteID + ", UserID : " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (datatReaderSensorTypeInfo != null && !datatReaderSensorTypeInfo.IsClosed)
                    datatReaderSensorTypeInfo.Close();
            }
        }

        public List<TypeValueInfo> GetSensorUnitInfo(BasicParam basicParam, int sensorTypeID)
        {
            IDataReader datatReaderSensorTypeInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<TypeValueInfo> sensorTypeInfoList = new List<TypeValueInfo>();
                TypeValueInfo sensorTypeInfo = null;

                //Return sensor unit info list for the sensor type
                datatReaderSensorTypeInfo = MaintenanceDAL.GetSensorUnitInfo(db, basicParam.SiteID, sensorTypeID);
                while (datatReaderSensorTypeInfo.Read())
                {
                    sensorTypeInfo = new TypeValueInfo();
                    sensorTypeInfo.DisplayName = Common.GetSafeString(datatReaderSensorTypeInfo, "FUOMNAME");
                    sensorTypeInfo.TypeValue = Common.GetSafeInt32(datatReaderSensorTypeInfo, "FSENSORTYPEUOMID");
                    sensorTypeInfoList.Add(sensorTypeInfo);
                }
                datatReaderSensorTypeInfo.Close();

                return sensorTypeInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching sensor unit info list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (datatReaderSensorTypeInfo != null && !datatReaderSensorTypeInfo.IsClosed)
                    datatReaderSensorTypeInfo.Close();
            }
        }

        public MeasuringPointListInfo GetMeasuringPointList(MeasuringPointFilter measuringPointfilter)
        {
            IDataReader dataReaderMeasuringPointList = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                MeasuringPointListInfo measuringPointListInfo = new MeasuringPointListInfo();
                MeasuringPointList measuringPointDetails = null;

                char parentType = measuringPointfilter.MeasuringPointDataType == null ? '\0' : (char)measuringPointfilter.MeasuringPointDataType;
                dataReaderMeasuringPointList = MaintenanceDAL.GetMeasuringPointList(db, null, measuringPointfilter.PageSize, measuringPointfilter.PageIndex, measuringPointfilter.SiteID, measuringPointfilter.SelectionID, parentType, measuringPointfilter.SearchString, 0, measuringPointfilter.SortType);
                while (dataReaderMeasuringPointList.Read())
                {
                    measuringPointDetails = new MeasuringPointList();
                    measuringPointDetails.MeasuringPointID = Common.GetSafeInt32(dataReaderMeasuringPointList, "FMEASURINGPOINTID");
                    measuringPointDetails.MeasuringPointName = Common.GetSafeString(dataReaderMeasuringPointList, "FMEASURINGPOINTNAME");
                    measuringPointDetails.IsActivated = Common.GetSafeString(dataReaderMeasuringPointList, "FSTATUS").Trim() == "A" ? true : false;
                    measuringPointListInfo.MeasuringPointList.Add(measuringPointDetails);

                    if (measuringPointListInfo.TotalRecords == 0)
                        measuringPointListInfo.TotalRecords = Common.GetSafeInt32(dataReaderMeasuringPointList, "FCOUNT");
                }
                dataReaderMeasuringPointList.Close();
                return measuringPointListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while getting measuring point info list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + measuringPointfilter.SiteID + ";UserID: " + measuringPointfilter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderMeasuringPointList != null && !dataReaderMeasuringPointList.IsClosed)
                    dataReaderMeasuringPointList.Close();
            }
        }

        public MeasuringPointDataTypeList GetMeasuringPointDropDownDataInfo(MeasuringPointDataTypeFilterInfo measuringPointDataTypeFilterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                EquipmentFilterInfo equipmentFilterInfo = new EquipmentFilterInfo();
                FLocationFilterInfo fLocationFilterInfo = new FLocationFilterInfo();
                MeasuringPointDataTypeList measuringPointDataTypeList = new MeasuringPointDataTypeList();

                fLocationFilterInfo.SiteID = measuringPointDataTypeFilterInfo.SiteID;
                fLocationFilterInfo.UserID = measuringPointDataTypeFilterInfo.UserID;
                equipmentFilterInfo.SiteID = measuringPointDataTypeFilterInfo.SiteID;
                equipmentFilterInfo.UserID = measuringPointDataTypeFilterInfo.UserID;

                foreach (MeasuringPointDataType masterDataType in measuringPointDataTypeFilterInfo.MeasuringPointDataTypeList)
                {
                    switch (masterDataType)
                    {
                        case MeasuringPointDataType.Functional_Location:
                            measuringPointDataTypeList.FunctionalLocationList = GetAllFunctionalLocList(db, fLocationFilterInfo).FunctionalLocationListInfo;
                            break;
                        case MeasuringPointDataType.Equipment:
                            equipmentFilterInfo.InfoType = InfoType.Equipment;
                            measuringPointDataTypeList.EquipmentList = GetEquipmentInfoList(db, equipmentFilterInfo).EquipmentList;
                            break;
                        case MeasuringPointDataType.Equipment_Model:
                            equipmentFilterInfo.InfoType = InfoType.Equipment_Model;
                            measuringPointDataTypeList.EquipmentModelList = GetEquipmentInfoList(db, equipmentFilterInfo).EquipmentList;
                            break;
                    }
                }

                return measuringPointDataTypeList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while getting measuring point data type info for dropdown ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + measuringPointDataTypeFilterInfo.SiteID + "UserID: " + measuringPointDataTypeFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }

        }

        public MeasuringPoint GetSelectedMeasuringPointInfo(BasicParam basicParam, int measuringPointID)
        {
            IDataReader dataReaderMeasuringPointInfo = null;
            try
            {

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                string ImagePath = ConfigurationManager.AppSettings["MeasuringPointImagePath"].ToString().TrimEnd('/') + "/" + basicParam.SiteID + "/" + "Thumbnail";

                MeasuringPoint measuringPointInfo = null;

                dataReaderMeasuringPointInfo = MaintenanceDAL.GetMeasuringPointInfo(db, basicParam.SiteID, measuringPointID);
                if (dataReaderMeasuringPointInfo.Read())
                {
                    measuringPointInfo = new MeasuringPoint();
                    measuringPointInfo.ID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FMEASURINGPOINTID");
                    measuringPointInfo.Code = Common.GetSafeString(dataReaderMeasuringPointInfo, "FMEASURINGPOINTCODE");
                    measuringPointInfo.Name = Common.GetSafeString(dataReaderMeasuringPointInfo, "FMEASURINGPOINTNAME");
                    measuringPointInfo.Description = Common.GetSafeString(dataReaderMeasuringPointInfo, "FDESCRIPTION");
                    measuringPointInfo.Position = Common.GetSafeString(dataReaderMeasuringPointInfo, "FPOSITION");
                    measuringPointInfo.CategoryID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FCATEGORYID");
                    measuringPointInfo.SensorTypeID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FSENSORTYPEID");
                    measuringPointInfo.UOMID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FSENSORTYPEUOMID");
                    measuringPointInfo.ImageName = Common.GetSafeString(dataReaderMeasuringPointInfo, "FIMAGENAME");
                    measuringPointInfo.ReadingType = (ReadingType)Common.GetSafeString(dataReaderMeasuringPointInfo, "FREADINGTYPE")[0];
                    measuringPointInfo.MeasuringPointDataType = (MeasuringPointDataType)Common.GetSafeString(dataReaderMeasuringPointInfo, "FPARENTTYPE")[0];
                    measuringPointInfo.ParentID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FPARENTID");
                    measuringPointInfo.DecimalPlaces = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FDECIMALPLACES");
                    measuringPointInfo.MinValue = Common.GetSafeDecimal(dataReaderMeasuringPointInfo, "FLOWERLIMIT");
                    measuringPointInfo.MaxValue = Common.GetSafeDecimal(dataReaderMeasuringPointInfo, "FUPPERLIMIT");
                    measuringPointInfo.MinValueWarning = Common.GetSafeDecimal(dataReaderMeasuringPointInfo, "FLOWERLIMITWARNING");
                    measuringPointInfo.MaxValueWarning = Common.GetSafeDecimal(dataReaderMeasuringPointInfo, "FUPPERLIMITWARNING");
                    measuringPointInfo.MaxTextLength = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FMAXTEXTLENGTH");
                    measuringPointInfo.GroupID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FGROUPID");
                    measuringPointInfo.IsCounter = Common.GetSafeChar(dataReaderMeasuringPointInfo, "FISCOUNTER") == 'Y' ? true : false;
                    measuringPointInfo.ParentID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FPARENTID");
                    measuringPointInfo.TagUUID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FUUID");
                    measuringPointInfo.OpcTagID = Common.GetSafeString(dataReaderMeasuringPointInfo, "FOPCTAGID");
                    measuringPointInfo.LocationID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FLOCATIONID");

                    string imageUrl = string.Empty;
                    if (measuringPointInfo.ImageName.Length > 0)
                        imageUrl = ImagePath + "/" + measuringPointInfo.ImageName;

                    if (imageUrl.Length > 0)
                        measuringPointInfo.ImagePath = imageUrl;
                    else
                        measuringPointInfo.ImagePath = null;
                }
                dataReaderMeasuringPointInfo.Close();

                return measuringPointInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while inserting/updating measuring point ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderMeasuringPointInfo != null && !dataReaderMeasuringPointInfo.IsClosed)
                    dataReaderMeasuringPointInfo.Close();
            }

        }

        public int InsertUpdateMeasuringPointInfo(BasicParam basicParam, MeasuringPoint measuringPoint)
        {
            IDataReader dataReaderMeasuringPointInfo = null;
            try
            {
                #region Validation
                /* Validation start*/
                if (string.IsNullOrEmpty(measuringPoint.Name))
                {
                    return -1;
                }
                /*Validation End*/
                #endregion

                int currentDate = 0;
                int currentTime = 0;
                int result = 0;

                string description = string.Empty;
                string descInEnglish = string.Empty;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        int measuringPointID = 0;
                        bool updateMeasuringPointStatus = false;
                        char status = 'N';

                        if (measuringPoint.MeasuringPointDataType != MeasuringPointDataType.Equipment_Model)
                        {
                            if (!string.IsNullOrEmpty(measuringPoint.Code) && measuringPoint.Code.Length > 0)
                            {
                                bool isMeasuringCodeExist = MaintenanceDAL.CheckMeasuringPointCodeExist(db, transaction, basicParam.SiteID, measuringPoint.Code, measuringPoint.ID, true);
                                if (isMeasuringCodeExist)
                                {
                                    transaction.Rollback();
                                    return -3;//measuring code already exist in this site

                                }
                            }
                            else
                            {
                                transaction.Rollback();
                                return -2;// measuring code is empty
                            }
                        }

                        dataReaderMeasuringPointInfo = MaintenanceDAL.GetMeasuringPointID(db, transaction, basicParam.SiteID, measuringPoint.ID, string.Empty, measuringPoint.Name, measuringPoint.ParentID, (char)measuringPoint.MeasuringPointDataType);
                        if (dataReaderMeasuringPointInfo.Read())
                        {
                            status = Convert.ToChar(Common.GetSafeString(dataReaderMeasuringPointInfo, "FSTATUS"));
                            measuringPointID = Common.GetSafeInt32(dataReaderMeasuringPointInfo, "FMEASURINGPOINTID");
                            dataReaderMeasuringPointInfo.Close();
                            if (status == 'A')
                            {
                                transaction.Rollback();
                                result = -4; //already exist measuring point
                                return result;
                            }
                            else
                            {
                                if (measuringPoint.ID == 0)
                                {
                                    updateMeasuringPointStatus = true;  //while inserting record Updating measuring point status if status is InActive 
                                }
                                else
                                {
                                    transaction.Rollback();
                                    result = -5;   //while updating Cannot update measuring point if it is already exist in 'InActive' state
                                    return result;
                                }

                            }
                        }
                        dataReaderMeasuringPointInfo.Close();

                        if (measuringPoint.ID == 0 || updateMeasuringPointStatus)
                        {
                            #region Insert/Update Measuring point information
                            if (measuringPointID == 0 && !updateMeasuringPointStatus)
                            {
                                //insert measuring point information
                                MaintenanceDAL.InsertMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPoint.Code, measuringPoint.Name, measuringPoint.Description, measuringPoint.Position, measuringPoint.CategoryID,
                                measuringPoint.UOMID, measuringPoint.ParentID, (char)measuringPoint.MeasuringPointDataType, measuringPoint.ImageName, (char)measuringPoint.ReadingType, measuringPoint.MaxTextLength,
                                measuringPoint.MinValue, measuringPoint.MaxValue, measuringPoint.MinValueWarning, measuringPoint.MaxValueWarning, measuringPoint.DecimalPlaces, measuringPoint.GroupID,
                                measuringPoint.IsCounter, 'A', measuringPoint.OpcTagID, measuringPoint.TagUUID, basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.measuringPointInfoAdded.Replace("[XXX]", measuringPoint.Name.Trim().ToUpper());
                                descInEnglish = "Successfully added information for measuring point name : " + measuringPoint.Name.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);

                                #endregion

                            }
                            else
                            {
                                if (status == 'I')
                                {
                                    MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, 0, '\0', measuringPointID, 'A', basicParam.UserID, currentDate, currentTime);

                                    #region Log Information
                                    //Log Information
                                    description = Language_Resources.Maintenance_LogInformations_Resource.measuringPointStatus.Replace("[XXX]", measuringPoint.Name.Trim().ToUpper());
                                    descInEnglish = "Successfully updated status active for measuring point name : " + measuringPoint.Name.Trim().ToUpper();
                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                    #endregion

                                }

                                //Updating measuring point status
                                MaintenanceDAL.UpdateMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPoint.ID, measuringPoint.Code, measuringPoint.Name, measuringPoint.Description, (char)measuringPoint.MeasuringPointDataType,
                                measuringPoint.ParentID, measuringPoint.Position, measuringPoint.CategoryID, measuringPoint.UOMID, measuringPoint.ImageName, (char)measuringPoint.ReadingType, measuringPoint.MaxTextLength,
                                measuringPoint.MinValue, measuringPoint.MaxValue, measuringPoint.MinValueWarning, measuringPoint.MaxValueWarning, measuringPoint.DecimalPlaces, measuringPoint.GroupID, measuringPoint.IsCounter, measuringPoint.OpcTagID, measuringPoint.TagUUID, basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                //Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.measuringPointInfoUpdated;
                                descInEnglish = "Successfully updated information for measuring point name : " + measuringPoint.Name.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }

                            result = -6; //successfully inserted measuring point
                            #endregion
                        }
                        else
                        {
                            //Updating measuring point 
                            MaintenanceDAL.UpdateMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPoint.ID, measuringPoint.Code, measuringPoint.Name, measuringPoint.Description, (char)measuringPoint.MeasuringPointDataType,
                            measuringPoint.ParentID, measuringPoint.Position, measuringPoint.CategoryID, measuringPoint.UOMID, measuringPoint.ImageName, (char)measuringPoint.ReadingType, measuringPoint.MaxTextLength,
                            measuringPoint.MinValue, measuringPoint.MaxValue, measuringPoint.MinValueWarning, measuringPoint.MaxValueWarning, measuringPoint.DecimalPlaces, measuringPoint.GroupID,
                            measuringPoint.IsCounter, measuringPoint.OpcTagID, measuringPoint.TagUUID, basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            //Log Information
                            description = Language_Resources.Maintenance_LogInformations_Resource.measuringPointInfoUpdated;
                            descInEnglish = "Successfully updated information for measuring point name : " + measuringPoint.Name.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            result = -7; ;//successfully updated measuring point
                        }

                        transaction.Commit();
                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while inserting or updating measuring point", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID" + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderMeasuringPointInfo != null && !dataReaderMeasuringPointInfo.IsClosed)
                    dataReaderMeasuringPointInfo.Close();
            }

        }

        public int DeleteMeasuringPointInfo(BasicParam basicParam, int measuringPointID)
        {
            IDataReader datatReaderMeasuringPoint = null;
            try
            {

                int currentDate = 0;
                int currentTime = 0;
                int result = 0;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        bool isExist = false;
                        string measuringPointName = string.Empty;
                        datatReaderMeasuringPoint = MaintenanceDAL.GetMeasuringPointList(db, transaction, 0, 0, basicParam.SiteID, 0, '\0', string.Empty, measuringPointID, string.Empty);
                        if (datatReaderMeasuringPoint.Read())
                        {
                            measuringPointName = Common.GetSafeString(datatReaderMeasuringPoint, "FMEASURINGPOINTNAME");
                            isExist = true;
                        }
                        datatReaderMeasuringPoint.Close();

                        if (isExist == true)
                        {
                            MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, 0, '\0', measuringPointID, 'I', basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            //Log Information
                            string description = Language_Resources.Maintenance_LogInformations_Resource.measuringPointInfoUpdated.Replace("[XXX]", measuringPointName.Trim().ToUpper());
                            string descInEnglish = "Successfully deleted information for measuring point name : " + measuringPointName.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            transaction.Commit();
                            result = 1;//successfully deleted information
                        }
                        else
                        {
                            transaction.Rollback();
                            result = 2;//measuring point info don't exist in active status
                        }

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while deleting measuring point ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + "UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (datatReaderMeasuringPoint != null && !datatReaderMeasuringPoint.IsClosed)
                    datatReaderMeasuringPoint.Close();
            }
        }

        #region OPC Configuration
        private List<DataSourceInfo> GetDataSourceDetails(int siteID)
        {
            JavaScriptSerializer apiSerialize = new JavaScriptSerializer();
            List<DataSourceInfo> dataSourceInfoList = new List<DataSourceInfo>();
            try
            {
                string restAPIPath = ConfigurationManager.AppSettings["VegamViewServicePath"].TrimEnd('/') + "/GetDataSourceList";
                var webrequest = (HttpWebRequest)WebRequest.Create(string.Format(restAPIPath));
                webrequest.Method = "POST";
                webrequest.ContentType = "application/json; charset=utf-8";
                webrequest.Timeout = 100000;
                webrequest.KeepAlive = true;
                var restAPIInputParametes = new { siteID = siteID };
                string restAPIInputString = apiSerialize.Serialize(restAPIInputParametes);
                using (var streamWriter = new StreamWriter(webrequest.GetRequestStream()))
                {
                    streamWriter.Write(restAPIInputString);
                    streamWriter.Flush();
                    streamWriter.Close();
                }
                using (StreamReader responseReader = new StreamReader(webrequest.GetResponse().GetResponseStream()))
                {
                    string opcDataSourceNodeResponse = responseReader.ReadToEnd();
                    dataSourceInfoList = apiSerialize.Deserialize<List<DataSourceInfo>>(opcDataSourceNodeResponse);
                    responseReader.Close();
                }
                webrequest.Abort();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return dataSourceInfoList;
        }

        private List<IoTUUIDInfo> GetTagServerDetails(int siteID, List<int> tagsUUIDList)
        {
            JavaScriptSerializer apiSerialize = new JavaScriptSerializer();
            List<IoTUUIDInfo> iotTagServerInfo = new List<IoTUUIDInfo>();
            try
            {
                string restAPIPath = ConfigurationManager.AppSettings["VegamViewServicePath"].TrimEnd('/') + "/GetTagUUIDInfo";
                var webrequest = (HttpWebRequest)WebRequest.Create(string.Format(restAPIPath));
                webrequest.Method = "POST";
                webrequest.ContentType = "application/json; charset=utf-8";
                webrequest.Timeout = 100000;
                webrequest.KeepAlive = true;
                var restAPIInputParametes = new { siteID = siteID, tagUUIDs = tagsUUIDList };
                string restAPIInputString = apiSerialize.Serialize(restAPIInputParametes);
                using (var streamWriter = new StreamWriter(webrequest.GetRequestStream()))
                {
                    streamWriter.Write(restAPIInputString);
                    streamWriter.Flush();
                    streamWriter.Close();
                }
                using (StreamReader responseReader = new StreamReader(webrequest.GetResponse().GetResponseStream()))
                {
                    string opcUUIDNodeResponse = responseReader.ReadToEnd();
                    iotTagServerInfo = apiSerialize.Deserialize<List<IoTUUIDInfo>>(opcUUIDNodeResponse);
                    responseReader.Close();
                }
                webrequest.Abort();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return iotTagServerInfo;
        }

        private int GetDataSourceId(Database db, int siteID, string dataSourceName)
        {
            IDataReader objDataReader = null;
            int dataSourceID = 0;
            try
            {
                objDataReader = MaintenanceDAL.GetDataSourceList(db, siteID, dataSourceName);
                if (objDataReader.Read())
                {
                    dataSourceID = Common.GetSafeInt32(objDataReader, "FDATASOURCEID");
                }
                objDataReader.Close();
            }
            catch
            { throw; }
            finally
            {
                if (objDataReader != null && !objDataReader.IsClosed)
                {
                    objDataReader.Close();
                }
            }
            return dataSourceID;
        }

        private int GetGatewayServiceID(Database db, int siteID, string gatewayName, int dataSourceID)
        {
            IDataReader objDataReader = null;
            int gatewayServiceID = 0;
            try
            {
                objDataReader = MaintenanceDAL.GetGatewayServiceID(db, siteID, gatewayName, dataSourceID);
                if (objDataReader.Read())
                {
                    gatewayServiceID = Common.GetSafeInt32(objDataReader, "FGATEWAYSERVICEID");
                }
                objDataReader.Close();
            }
            catch
            { throw; }
            finally
            {
                if (objDataReader != null && !objDataReader.IsClosed)
                {
                    objDataReader.Close();
                }
            }
            return gatewayServiceID;
        }

        private int GetTagUUID(int datasourceID, int gatewayServiceID, string serverName, int siteID, string tagName, string sensorTypeName, ref int tagUUID)
        {
            List<ServerInfo> opcServerInfo = new List<ServerInfo>();
            JavaScriptSerializer apiSerialize = new JavaScriptSerializer();
            TagFilterInfo objTagFilter = new TagFilterInfo();
            TagPropertiesFilterInfo objFilterInfo = new TagPropertiesFilterInfo();
            try
            {
                string restAPIPath = ConfigurationManager.AppSettings["VegamViewServicePath"].TrimEnd('/') + "/GetServerInfoList";
                var webrequest = (HttpWebRequest)WebRequest.Create(string.Format(restAPIPath));
                webrequest.Method = "POST";
                webrequest.ContentType = "application/json; charset=utf-8";
                webrequest.Timeout = 100000;
                webrequest.KeepAlive = true;
                objTagFilter.ServerName = serverName;
                objTagFilter.ServerID = 0;
                objTagFilter.TagName = tagName;
                objFilterInfo.TransducerType = sensorTypeName;
                objTagFilter.UUIDProperties = objFilterInfo;
                var restAPIInputParametes = new { siteID = siteID, dataSourceID = datasourceID, gatewayServiceID = gatewayServiceID, opcTagFilterInfo = objTagFilter };
                string restAPIInputString = apiSerialize.Serialize(restAPIInputParametes);
                using (var streamWriter = new StreamWriter(webrequest.GetRequestStream()))
                {
                    streamWriter.Write(restAPIInputString);
                    streamWriter.Flush();
                    streamWriter.Close();
                }
                using (StreamReader responseReader = new StreamReader(webrequest.GetResponse().GetResponseStream()))
                {
                    string opcUUIDNodeResponse = responseReader.ReadToEnd();
                    opcServerInfo = apiSerialize.Deserialize<List<ServerInfo>>(opcUUIDNodeResponse);
                    responseReader.Close();
                }
                webrequest.Abort();

                if (opcServerInfo != null && opcServerInfo.Count() > 0)
                {
                    if (opcServerInfo[0].TagInfoList.Count > 0)
                    {
                        if (string.Compare(tagName.Trim(), opcServerInfo[0].TagInfoList[0].TagName.Trim()) == 0)
                        {
                            tagUUID = opcServerInfo[0].TagInfoList[0].TagUUID;
                        }
                    }
                    else
                    {
                        tagUUID = 0;
                    }
                }
            }
            catch (Exception ex)
            {
                tagUUID = 0;
                throw ex;
            }
            return tagUUID;
        }
        #endregion

        #region Download & upload
        #region Download Excel Template

        public string DownloadMeasuringPointListTemplate(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "MeasuringPointList_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadMeasuringPointExcelTemplate asyncGradeGrindingTypeTemplate = new DownloadMeasuringPointExcelTemplate(GetMeasuringPointListTemplate);
                asyncGradeGrindingTypeTemplate.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void BindMeasuringPointExcelHeaderInfo(Database db, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue, int siteID, int userID, bool isFromEquipment)
        {
            IDataReader dataReaderInfo = null;
            bool restrictAccess = true;
            try
            {
                List<string> equipmentList = new List<string>();
                List<string> categoryList = new List<string>();
                List<string> counterList = new List<string>();
                List<string> measuringPointAttrList = new List<string>();
                List<string> unitList = new List<string>();
                List<string> selectionGroupList = new List<string>();
                List<string> dataSourceList = new List<string>();
                List<string> gatewayServiceList = new List<string>();
                List<string> locationList = new List<string>();

                int accessLevelID = Common.GetUserAccessLevelID(db, userID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                if (!isFromEquipment)
                {
                    #region Function Location
                    dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocations(db, siteID, 0, 0, string.Empty, 0, string.Empty, userID, restrictAccess);
                    while (dataReaderInfo.Read())
                    {
                        locationList.Add(Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME"));
                    }
                    dataReaderInfo.Close();
                    #endregion
                }

                #region Binding IOTDataSources
                dataSourceList = GetDataSourceDetails(siteID).Select(o => o.DataSourceName).ToList(); ;
                #endregion

                #region Binding IOTGatewayServices
                dataReaderInfo = MaintenanceDAL.GetGatewayService(db, siteID);
                while (dataReaderInfo.Read())
                {
                    gatewayServiceList.Add(Common.GetSafeString(dataReaderInfo, "FGATEWAYNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Binding Equipment            
                dataReaderInfo = MaintenanceDAL.GetEquipmentInfo(db, siteID, 0, 0, string.Empty, -1, 0, Convert.ToChar(InfoType.Equipment), string.Empty, userID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    equipmentList.Add(Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Binding Category                  
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.MP_CATEGORY.ToString(), 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    categoryList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Binding Measuring Point Attribute                  
                dataReaderInfo = MaintenanceDAL.GetSensorTypeInfo(db, siteID);
                while (dataReaderInfo.Read())
                {
                    measuringPointAttrList.Add(Common.GetSafeString(dataReaderInfo, "FSENSORTYPENAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Binding UOM                  
                dataReaderInfo = MaintenanceDAL.GetSensorUnitInfo(db, siteID, 0);
                while (dataReaderInfo.Read())
                {
                    unitList.Add(Common.GetSafeString(dataReaderInfo, "FUOMNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                #region Binding Selection Group                  
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.GROUPCODE.ToString(), 0, 0, string.Empty);
                while (dataReaderInfo.Read())
                {
                    selectionGroupList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();
                #endregion

                worksheet.Cells.Style.Numberformat.Format = "@";

                if (!isFromEquipment)
                {
                    worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.chooseType;
                    Common.BindExcelCellListData(package, worksheet, "ChooseTypeList", columnIndex, new List<string> { "Equipment", "Functional Location" }, false);
                    worksheet.Column(columnIndex).Width = 20;
                    columnIndex++;

                    worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.functionalLocation;
                    Common.BindExcelCellListData(package, worksheet, "FunctionalLocationList", columnIndex, locationList, false);
                    worksheet.Column(columnIndex).Width = 20;
                    columnIndex++;
                }

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.equipmentName;
                Common.BindExcelCellListData(package, worksheet, "EquipmentNameList", columnIndex, equipmentList, false);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.measuringPointCode;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 10, Language_Resources.MeasuringPoint_Resource.measuringPointCode, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 22;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.measuringPoint;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 50, Language_Resources.MeasuringPoint_Resource.measuringPoint, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 25;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.description;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 200, Language_Resources.MeasuringPoint_Resource.description, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 30;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.position;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.MeasuringPoint_Resource.position, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.category;
                Common.BindExcelCellListData(package, worksheet, "CategoryList", columnIndex, categoryList, false);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.measuringPointAttr;
                Common.BindExcelCellListData(package, worksheet, "MeasuringPointAttrList", columnIndex, measuringPointAttrList, false);
                worksheet.Column(columnIndex).Width = 25;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.uom;
                Common.BindExcelCellListData(package, worksheet, "UnitList", columnIndex, unitList, false);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.isCounter;
                Common.BindExcelCellListData(package, worksheet, "CounterList", columnIndex, new List<string> { "Yes", "No" }, false);
                worksheet.Column(columnIndex).Width = 15;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.measuringPointReadingType;
                Common.BindExcelCellListData(package, worksheet, "MeasuringPointDataTypeList", columnIndex, new List<string> { "Text", "Numeric", "Decimal", "Selection" }, false);
                worksheet.Column(columnIndex).Width = 30;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.decimalPlaces;
                worksheet.Column(columnIndex).Width = 18;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", 0, 8, Language_Resources.MeasuringPoint_Resource.decimalPlaces, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.lowerLimit;
                worksheet.Column(columnIndex).Width = 25;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", -999999, 7, Language_Resources.MeasuringPoint_Resource.lowerLimit, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.upperLimit;
                worksheet.Column(columnIndex).Width = 25;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", -999999, 7, Language_Resources.MeasuringPoint_Resource.upperLimit, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.lowerLimitWarning;
                worksheet.Column(columnIndex).Width = 25;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", -999999, 7, Language_Resources.MeasuringPoint_Resource.lowerLimitWarning, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.upperLimitWarning;
                worksheet.Column(columnIndex).Width = 25;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", -999999, 7, Language_Resources.MeasuringPoint_Resource.upperLimitWarning, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.maxTextLength;
                worksheet.Column(columnIndex).Width = 18;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", 0, 7, Language_Resources.MeasuringPoint_Resource.maxTextLength, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.selectionGroup;
                Common.BindExcelCellListData(package, worksheet, "SelectionGroupList", columnIndex, selectionGroupList, false);
                worksheet.Column(columnIndex).Width = 25;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.imageName;
                worksheet.Column(columnIndex).Width = 30;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 200, Language_Resources.MeasuringPoint_Resource.imageName, ExcelDataValidation.TextLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.dataSource;
                Common.BindExcelCellListData(package, worksheet, "DataSourceList", columnIndex, dataSourceList, false);
                worksheet.Column(columnIndex).Width = 30;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.gatewayService;
                Common.BindExcelCellListData(package, worksheet, "GatewayServiceList", columnIndex, gatewayServiceList, false);
                worksheet.Column(columnIndex).Width = 30;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.serverName;
                worksheet.Column(columnIndex).Width = 30;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 10, Language_Resources.MeasuringPoint_Resource.serverName, ExcelDataValidation.TextLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.tagName;
                worksheet.Column(columnIndex).Width = 50;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 500, Language_Resources.MeasuringPoint_Resource.tagName, ExcelDataValidation.TextLength);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.MeasuringPoint_Resource.status;
                worksheet.Column(columnIndex).Width = 15;
                Common.BindExcelCellListData(package, worksheet, "MeasuringPointStatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void GetMeasuringPointListTemplate(Database db, BasicParam basicParam, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string folderLocation = path + fileName;
                System.IO.Directory.CreateDirectory(folderLocation);
                string readMeTxtFile = folderLocation + "\\Read Me.txt";
                System.IO.Directory.CreateDirectory(folderLocation + "\\MeasuringPointImages");
                string equipmentExcelFile = folderLocation + "\\MeasuringPointInfoTemplate.xls";

                using (FileStream fStream = new FileStream(readMeTxtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write(Language_Resources.MeasuringPoint_Resource.uploadReadme);
                        sWriter.Close();
                    }
                    fStream.Close();
                }

                FileInfo templateExcelFile = new FileInfo(equipmentExcelFile);
                if (templateExcelFile.Exists)//for overwrite on existing file if exist.
                {
                    templateExcelFile.Delete();
                    templateExcelFile = new FileInfo(equipmentExcelFile);
                }


                using (ExcelPackage package = new ExcelPackage(templateExcelFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("MeasuringPointList");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindMeasuringPointExcelHeaderInfo(db, worksheet, colFromHex, package, rowIndex, columnIndex, minValue, basicParam.SiteID, basicParam.UserID, false);

                    package.Save();
                    package.Dispose();
                }
                string zipPath = folderLocation + ".zip";
                ZipFile.CreateFromDirectory(folderLocation, zipPath, System.IO.Compression.CompressionLevel.Fastest, true);

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "SMSAdminService", "Error while downloading measuring point excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #endregion

        #region Download Excel Info

        public string DownloadMeasuringPointListExcel(MeasuringPointFilterInfo filter)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "MeasuringPointList_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadMeasuringPointInfo asyncGradeGrindingTypeInfo = new DownloadMeasuringPointInfo(GetMeasuringPointInfoForDownload);
                asyncGradeGrindingTypeInfo.BeginInvoke(db, filter, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetMeasuringPointInfoForDownload(Database db, MeasuringPointFilterInfo filter, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("MeasuringPointList");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindMeasuringPointExcelHeaderInfo(db, worksheet, colFromHex, package, rowIndex, columnIndex, minValue, filter.SiteID, filter.UserID, false);

                    //Get Content for excel sheet
                    GetExcelContentForMeasuringPoint(db, worksheet, filter, filter.SiteID,null, true);

                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "\\" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "SMSManufactureService", "Error while downloading measuring point info excel ", "Vegam_PreWeighService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + filter.SiteID + ", UserID: " + filter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void GetExcelContentForMeasuringPoint(Database db, ExcelWorksheet workSheet, MeasuringPointFilterInfo filterInfo,int siteID, List<int> equipmentIDList, bool isFromMeasuringPoint)
        {
            DataTable measuringPointTable = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;
                string sqlViewName = string.Empty;
                List<DynamicGrid.SQLColumnFilterInfo> sqlColumnFilterInfoList = null;
                string equipmentIDs = string.Empty;

                if (isFromMeasuringPoint)
                {
                    sqlViewName = DynamicGrid.Common.GetObjectViewName(db, filterInfo.DynamicGridObjectID);

                    if (sqlViewName.Length > 0)
                    {
                        if (filterInfo.DynamicGridSearchInfo != null && filterInfo.DynamicGridSearchInfo.DynamicGridSearchFieldValueInfoList.Count > 0)
                        {
                            Common.GetDynamicSearchFieldValueInfo(db, filterInfo.DynamicGridSearchInfo.DynamicGridSearchFieldValueInfoList, ref sqlColumnFilterInfoList);
                        }
                    }
                }
                else
                {
                    sqlViewName = "VW_MAINT_MEASURING_POINT";
                    equipmentIDs = string.Join(", ", equipmentIDList);
                }

                measuringPointTable = MaintenanceDAL.GetMeasuringPointInfoFromView(db, siteID, sqlViewName, sqlColumnFilterInfoList, equipmentIDs);
                #region OPC Tag Details                        
                    var tagUUIDS = measuringPointTable.AsEnumerable().Select(r => r.Field<decimal>("FUUID").ToString()).ToList();
                    List<IoTUUIDInfo> iotTagDetails = GetTagServerDetails(siteID, tagUUIDS.Select(int.Parse).Where(i => i != 0).Distinct().ToList());
                #endregion

                foreach (DataRow dr in measuringPointTable.Rows)
                {
                    int opcUUID = 0;
                    columnIndex = 1;

                    if (isFromMeasuringPoint)
                    {
                        workSheet.Cells[rowIndex, columnIndex].Value = dr["FPARENTTYPE"].ToString().Trim();
                        columnIndex++;

                        if (dr["FPARENTTYPE"].ToString().Trim() == Enum.GetName(typeof(MeasuringPointDataType), MeasuringPointDataType.Equipment))
                            dr["FLOCATIONNAME"] = string.Empty;
                        else
                            dr["FEQUIPMENTNAME"] = string.Empty;
                        workSheet.Cells[rowIndex, columnIndex].Value = dr["FLOCATIONNAME"].ToString().Trim();
                        columnIndex++;
                    }
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FEQUIPMENTNAME"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FMEASURINGPOINTCODE"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FMEASURINGPOINTNAME"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FDESCRIPTION"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FPOSITION"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FCATEGORY"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FSENSORTYPENAME"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FUNIT"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FISCOUNTER"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FREADINGTYPE"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FDECIMALPLACES"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FLOWERLIMIT"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FUPPERLIMIT"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FLOWERLIMITWARNING"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FUPPERLIMITWARNING"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FMAXTEXTLENGTH"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FGROUP"].ToString().Trim();
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = dr["FIMAGENAME"].ToString().Trim();
                    columnIndex++;

                        int.TryParse(dr["FUUID"].ToString().Trim(), out opcUUID);

                        if (opcUUID > 0 && iotTagDetails.Count() > 0)
                        {
                            string dataSourceName = string.Empty;
                            string gateWayName = string.Empty;
                            string serverName = string.Empty;
                            var uuidInfo = (from tagdata in iotTagDetails.Where(tagdata => tagdata.ServerInfoList != null && tagdata.ServerInfoList.Count > 0) from serverinfo in tagdata.ServerInfoList from taginfo in serverinfo.TagInfoList where (taginfo.TagUUID == opcUUID) select new { tagdata.DataSourceName, tagdata.GatewayName, serverinfo.ServerName }).FirstOrDefault();
                            if (uuidInfo != null)
                            {
                                dataSourceName = uuidInfo.DataSourceName;
                                gateWayName = uuidInfo.GatewayName;
                                serverName = uuidInfo.ServerName;
                            }
                            workSheet.Cells[rowIndex, columnIndex].Value = dataSourceName;
                            columnIndex++;
                            workSheet.Cells[rowIndex, columnIndex].Value = gateWayName;
                            columnIndex++;
                            workSheet.Cells[rowIndex, columnIndex].Value = serverName;
                            columnIndex++;
                        }
                        else
                        {
                            workSheet.Cells[rowIndex, columnIndex].Value = string.Empty;
                            columnIndex++;
                            workSheet.Cells[rowIndex, columnIndex].Value = string.Empty;
                            columnIndex++;
                            workSheet.Cells[rowIndex, columnIndex].Value = string.Empty;
                            columnIndex++;
                        }

                        workSheet.Cells[rowIndex, columnIndex].Value = dr["FOPCTAGID"].ToString().Trim();
                        columnIndex++;
                        rowIndex++;
                    }
                }
            
			catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Failed to download measuring point information excel sheet", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID: " + filterInfo.UserID + " ;SiteID:" + filterInfo.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #endregion

        #region Upload Excel Info

        public string UploadMeasuringPointListExcel(BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadMeasuringPointInfo asyncMeasuringPointInfo = new UploadMeasuringPointInfo(InsertMeasuringPointInfoFromExcel);
                AsyncCallback cb = new AsyncCallback(send);
                asyncMeasuringPointInfo.BeginInvoke(db, basicParam, fileName, unzipedFolderName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void InsertMeasuringPointInfoFromExcel(Database db, BasicParam basicParam, string fileName, string unzipedFolderName)
        {
            IDataReader dataReaderInfo = null;
            int inserted = 0;
            int updated = 0;
            int failure = 0;
            int deleted = 0;

            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;
            bool restrictAccess = true;

            string path = ConfigurationManager.AppSettings["LogFileLocation"];
            try
            {
                string description = string.Empty;
                string descInEnglish = string.Empty;

                int createdOn = 0;
                int createdTime = 0;

                string completePath = path + fileName;
                string extractDestPath = string.Empty;
                string excelPath = string.Empty;

                if (!string.IsNullOrEmpty(unzipedFolderName))
                {
                    extractDestPath = completePath + "\\" + unzipedFolderName;
                    ZipFile.ExtractToDirectory(completePath + ".zip", completePath);
                    string[] files = Directory.GetFiles(extractDestPath, "*.xls");
                    foreach (string excelFile in files)
                        excelPath = excelFile;
                }
                else
                    excelPath = completePath + ".xls";

                if (File.Exists(excelPath))
                {
                    string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + excelPath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                    OleDbConnection olDbObjConn = new OleDbConnection(connectionString);

                    string logType = LogTypes.Config_Measuring_Point.ToString();

                    OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [MeasuringPointList$]", olDbObjConn);

                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DataTable excelDataTable = dtExcelDataSet.Tables[0];
                if (excelDataTable.Rows.Count > 0)
                {
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);
                    int lineNumber = 2;

                    int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                    if (accessLevelID != 5)
                    {
                        restrictAccess = false;
                    }

                        DbTransaction transaction = null;
                        using (DbConnection dbConnection = db.CreateConnection())
                        {
                            dbConnection.Open();
                            transaction = dbConnection.BeginTransaction();
                            try
                            {
                                InsertMeasuringPointDetailsOfExcel(db, transaction, excelDataTable, basicParam, fileName, unzipedFolderName,string.Empty, true, ref inserted, ref updated, ref deleted, ref failure, ref lineNumber, ref insertMessage, ref updateMessage, ref deleteMessage, ref failureMessage);
                                transaction.Commit();
                            }
                            catch (Exception ex)
                            {
                                transaction.Rollback();
                                throw ex;
                            }
                            finally
                            {
                                dbConnection.Close();
                            }
                        }
                    }
                    string logFileName = fileName + "_tempSuccess.txt";
                    string targetFile = path + logFileName;
                    using (FileStream fs = new FileStream(targetFile, FileMode.Create, FileAccess.Write))
                    {
                        using (StreamWriter sw = new StreamWriter(fs))
                        {
                            sw.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointLogInfo + "_" + DateTime.Now.ToString());
                            sw.WriteLine("-------------------------------------------------------------------------------------------");
                            sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyInserted + " : " + inserted.ToString());
                            sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyUpdated + " : " + updated.ToString());
                            sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyDeleted + " : " + deleted.ToString());
                            sw.WriteLine(Language_Resources.MeasuringPoint_Resource.failure + " : " + failure.ToString());
                            if (insertMessage.ToString() != string.Empty)
                            {
                                sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.addedItems + "------------------------------------------------------------------------");
                                sw.WriteLine(insertMessage);
                            }
                            if (updateMessage.ToString() != string.Empty)
                            {
                                sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.updatedItems + "-------------------------------------------------------------------------");
                                sw.WriteLine(updateMessage);
                            }
                            if (deleteMessage.ToString() != string.Empty)
                            {
                                sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.deletedItems + "-------------------------------------------------------------------------");
                                sw.WriteLine(deleteMessage);
                            }
                            if (failureMessage.ToString() != string.Empty)
                            {
                                sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.failureResons + "---------------------------------------------------------------");
                                sw.WriteLine(failureMessage);
                            }
                            sw.Close();
                        }
                        fs.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                using (FileStream fs = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointLogInfo + "_" + DateTime.Now.ToString());
                        sw.WriteLine("-------------------------------------------------------------------------------------------");
                        sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyInserted + " : " + inserted.ToString());
                        sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyUpdated + " : " + updated.ToString());
                        sw.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyDeleted + " : " + deleted.ToString());
                        sw.WriteLine(Language_Resources.MeasuringPoint_Resource.failure + " : " + failure.ToString());
                        if (insertMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.addedItems + "------------------------------------------------------------------------");
                            sw.WriteLine(insertMessage);
                        }
                        if (updateMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.updatedItems + "-------------------------------------------------------------------------");
                            sw.WriteLine(updateMessage);
                        }
                        if (deleteMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.deletedItems + "-------------------------------------------------------------------------");
                            sw.WriteLine(deleteMessage);
                        }
                        if (failureMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------" + Language_Resources.MeasuringPoint_Resource.failureResons + "---------------------------------------------------------------");
                            sw.WriteLine(failureMessage);
                        }
                        sw.Write("Error : ");
                        sw.Write(exceptionErrorMessage);
                        sw.Close();
                    }
                    fs.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while Uploading Measuring Point info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void InsertMeasuringPointInfoFromExcelSheet(Database db, BasicParam basicParam, string fileName, string unzipedFolderName,string equipmentAttachmentTempSource, DbConnection connection, OleDbConnection olDbObjConn, String connectionString, FileStream logFileStream, StreamWriter logStreamWriter)
        {
            IDataReader dataReaderInfo = null;
            int inserted = 0;
            int updated = 0;
            int failure = 0;
            int deleted = 0;
            int lineNumber = 2;

            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;
            string description = string.Empty;
            string descInEnglish = string.Empty;
            int currentDate = 0;
            int currentTime = 0;
            string measuringPointImagesPathSource = string.Empty;

            DbTransaction transaction = null;
            try
            {
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                transaction = connection.BeginTransaction();

                System.Data.DataSet dsExcelUpload;
                System.Data.OleDb.OleDbDataAdapter oledbObject;

                olDbObjConn = new OleDbConnection(connectionString);
                oledbObject = new System.Data.OleDb.OleDbDataAdapter("select * from [Measuring Point$]", connectionString);

                dsExcelUpload = new System.Data.DataSet();
                oledbObject.Fill(dsExcelUpload);

                olDbObjConn.Close();

                DataTable excelDataTable = dsExcelUpload.Tables[0];

                if (excelDataTable.Rows.Count > 0)
                {
                    InsertMeasuringPointDetailsOfExcel(db, transaction, excelDataTable, basicParam, fileName, unzipedFolderName, equipmentAttachmentTempSource, false, ref inserted, ref updated, ref deleted, ref failure, ref lineNumber, ref insertMessage, ref updateMessage, ref deleteMessage, ref failureMessage);
                }

                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointLogInfo + "_" + DateTime.Now.ToString());
                logStreamWriter.WriteLine("******************************************************************************************");
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointBasicInfoUploadLog);
                logStreamWriter.WriteLine("------------------------------------------------------------------------------------------");
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyInserted + " :" + inserted.ToString());
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyUpdated + " :" + updated.ToString());
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.successfullyDeleted + " :" + deleted.ToString());
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.failure + ": " + failure.ToString());
                if (insertMessage != string.Empty)
                {
                    logStreamWriter.WriteLine("----------" + Language_Resources.MeasuringPoint_Resource.addedItems + "---------------------------------------------------------------------");
                    logStreamWriter.WriteLine(insertMessage);
                }
                if (updateMessage != string.Empty)
                {
                    logStreamWriter.WriteLine("----------" + Language_Resources.MeasuringPoint_Resource.updatedItems + "-------------------------------------------------------------------------");
                    logStreamWriter.WriteLine(updateMessage);
                }
                if (deleteMessage != string.Empty)
                {
                    logStreamWriter.WriteLine("----------" + Language_Resources.MeasuringPoint_Resource.deletedItems + "-------------------------------------------------------------------------");
                    logStreamWriter.WriteLine(deleteMessage);
                }

                if (failureMessage.ToString() != string.Empty)
                {
                    logStreamWriter.WriteLine("----------" + Language_Resources.MeasuringPoint_Resource.failureResons + "----------------------------------------------------------------------");
                    logStreamWriter.WriteLine(failureMessage);
                }
                transaction.Commit();
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                Common.LogException(ex, "MaintenanceService", "Error while Uploading Measuring Point info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID);

                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointLogInfo + "_" + DateTime.Now.ToString());
                logStreamWriter.WriteLine("******************************************************************************************");
                logStreamWriter.WriteLine(Language_Resources.MeasuringPoint_Resource.measuringPointBasicInfoUploadLog);
                logStreamWriter.WriteLine("------------------------------------------------------------------------------------------");
                logStreamWriter.WriteLine("--------------------" + Language_Resources.MeasuringPoint_Resource.failureResons + "------------------------------------");
                logStreamWriter.WriteLine(exceptionErrorMessage + " " + Language_Resources.MeasuringPoint_Resource.inLineNumber + ": " + lineNumber.ToString() + Environment.NewLine);

            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private void InsertMeasuringPointDetailsOfExcel(Database db, DbTransaction transaction, DataTable excelDataTable, BasicParam basicParam, string fileName, string unzipedFolderName,string equipmentAttachmentTempSource, bool isFromMeasuringPoint, ref int inserted, ref int updated, ref int deleted, ref int failure, ref int lineNumber, ref string insertMessage, ref string updateMessage, ref string deleteMessage, ref string failureMessage)
        {
            IDataReader dataReaderInfo = null;
            string description = string.Empty;
            string descInEnglish = string.Empty;
            bool restrictAccess = false;
            int currentDate = 0;
            int currentTime = 0;
            string measuringPointImagesPathSource = string.Empty;
            string measuringPointImagesPathDest = string.Empty;

            string path = ConfigurationManager.AppSettings["LogFileLocation"];
            try
            {
                if (excelDataTable.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(unzipedFolderName))
                    {
                        measuringPointImagesPathSource = path + fileName + "\\" + unzipedFolderName + "\\" + "MeasuringPointImages";
                        if (isFromMeasuringPoint)
                            measuringPointImagesPathDest = path + "Image" + fileName;
                        else
                            measuringPointImagesPathDest = equipmentAttachmentTempSource + "\\MeasuringPointImages";
                    }
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
                    if (accessLevelID != 5)
                    {
                        restrictAccess = false;
                    }

                    foreach (DataRow row in excelDataTable.Rows)
                    {
                        #region ReadExcel
                        MeasuringPointDataType parentType = MeasuringPointDataType.Equipment;
                        int locationID = 0;
                        int equipmentID = 0;
                        int measuringPointID = 0;
                        int categoryID = 0;
                        int groupID = 0;
                        int sernsonTypeUOMID = 0;
                        int uuID = 0;
                        int dataSourceID = 0;
                        int gatewayServiceID = 0;
                        string status = string.Empty;
                        char measuringPointStatus = 'A';

                        string chooseType = string.Empty;
                        string locationName = string.Empty;
                        string equipment = string.Empty;
                        string measuringPointCode = string.Empty;
                        string measuringPointName = string.Empty;
                        string measuringPointDescription = string.Empty;
                        string category = string.Empty;
                        string position = string.Empty;
                        string measuringPointAttr = string.Empty;
                        string unit = string.Empty;
                        string selectionGroup = string.Empty;
                        string imageName = string.Empty;
                        string dataSource = string.Empty;
                        string gatewayService = string.Empty;
                        string serverName = string.Empty;
                        string tagName = string.Empty;
                        string measuringPointImageName = string.Empty;                        

                        int decimalPlaces = 0;
                        decimal lowerValue = 0;
                        decimal upperValue = 0;
                        decimal lowerLimitWarning = 0;
                        decimal upperLimitWarning = 0;
                        int maxTextLength = 0;

                        char excelStatus = 'A';
                        ReadingType readingType = ReadingType.Text;
                        bool isCounter = false;

                        if (isFromMeasuringPoint)
                        {
                            chooseType = row[Language_Resources.MeasuringPoint_Resource.chooseType].ToString().Trim();
                            if (chooseType.Length > 0)
                                parentType = (MeasuringPointDataType)Enum.Parse(typeof(MeasuringPointDataType), row[Language_Resources.MeasuringPoint_Resource.chooseType].ToString().Trim().Replace(" ", "_"), true);

                            if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.functionalLocation))
                                locationName = row[Language_Resources.MeasuringPoint_Resource.functionalLocation].ToString().Trim();
                        }

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.equipmentName))
                            equipment = row[Language_Resources.MeasuringPoint_Resource.equipmentName].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.measuringPointCode))
                            measuringPointCode = row[Language_Resources.MeasuringPoint_Resource.measuringPointCode].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.measuringPoint))
                            measuringPointName = row[Language_Resources.MeasuringPoint_Resource.measuringPoint].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.description))
                            measuringPointDescription = row[Language_Resources.MeasuringPoint_Resource.description].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.category))
                            category = row[Language_Resources.MeasuringPoint_Resource.category].ToString().Trim().ToUpper();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.position))
                            position = row[Language_Resources.MeasuringPoint_Resource.position].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.measuringPointAttr))
                            measuringPointAttr = row[Language_Resources.MeasuringPoint_Resource.measuringPointAttr].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.uom))
                            unit = row[Language_Resources.MeasuringPoint_Resource.uom].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.selectionGroup))
                            selectionGroup = row[Language_Resources.MeasuringPoint_Resource.selectionGroup].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.dataSource))
                            dataSource = row[Language_Resources.MeasuringPoint_Resource.dataSource].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.gatewayService))
                            gatewayService = row[Language_Resources.MeasuringPoint_Resource.gatewayService].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.serverName))
                            serverName = row[Language_Resources.MeasuringPoint_Resource.serverName].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.tagName))
                            tagName = row[Language_Resources.MeasuringPoint_Resource.tagName].ToString().Trim();

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.decimalPlaces))
                            Int32.TryParse(row[Language_Resources.MeasuringPoint_Resource.decimalPlaces].ToString().Trim(), out decimalPlaces);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.lowerLimit))
                            decimal.TryParse(row[Language_Resources.MeasuringPoint_Resource.lowerLimit].ToString().Trim(), out lowerValue);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.upperLimit))
                            decimal.TryParse(row[Language_Resources.MeasuringPoint_Resource.upperLimit].ToString().Trim(), out upperValue);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.lowerLimitWarning))
                            decimal.TryParse(row[Language_Resources.MeasuringPoint_Resource.lowerLimitWarning].ToString().Trim(), out lowerLimitWarning);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.upperLimitWarning))
                            decimal.TryParse(row[Language_Resources.MeasuringPoint_Resource.upperLimitWarning].ToString().Trim(), out upperLimitWarning);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.maxTextLength))
                            Int32.TryParse(row[Language_Resources.MeasuringPoint_Resource.maxTextLength].ToString().Trim(), out maxTextLength);

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.measuringPointReadingType))
                        {
                            if (row[Language_Resources.MeasuringPoint_Resource.measuringPointReadingType].ToString().Trim().Length > 0)
                                readingType = (ReadingType)Enum.Parse(typeof(ReadingType), row[Language_Resources.MeasuringPoint_Resource.measuringPointReadingType].ToString().Trim(), true);
                        }

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.isCounter))
                            isCounter = row[Language_Resources.MeasuringPoint_Resource.isCounter].ToString().Trim() == "Yes" ? true : false;

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.status))
                            excelStatus = row[Language_Resources.MeasuringPoint_Resource.status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';

                        if (excelDataTable.Columns.Contains(Language_Resources.MeasuringPoint_Resource.imageName))
                            imageName = row[Language_Resources.MeasuringPoint_Resource.imageName].ToString().Trim();

                        if (imageName.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                        {
                            DirectoryInfo imageFolderPath = new DirectoryInfo(measuringPointImagesPathSource);
                            FileInfo[] files = imageFolderPath.GetFiles(imageName + ".*");
                            if (files.Length > 0)
                            {
                                //File exists
                                foreach (FileInfo file in files)
                                {
                                    if (file.Extension == ".png" || file.Extension == ".jpeg" || file.Extension == ".jpg")
                                    {
                                        measuringPointImageName = "IMG_" + DateTime.Now.ToString("ddMMyyyyhhmmssffff") + file.Extension;
                                        imageName = imageName + file.Extension;
                                    }
                                }
                            }
                            else
                            {
                                //File does not exist
                                failureMessage += "Measuring point image : " + imageName + " is not available in folder for line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                                continue;
                            }
                        }

                        #endregion

                        if ((isFromMeasuringPoint && chooseType.Length > 0) && (isFromMeasuringPoint && locationName.Length > 0) || equipment.Length > 0 || measuringPointCode.Length > 0 || measuringPointName.Length > 0 || category.Length > 0)
                        {
                            #region Validation fields
                            if (isFromMeasuringPoint && chooseType.Length == 0)
                            {
                                failureMessage += "Choose type is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (isFromMeasuringPoint && parentType == MeasuringPointDataType.Functional_Location && locationName.Length == 0)
                            {
                                failureMessage += "Functional location is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (parentType == MeasuringPointDataType.Equipment && equipment.Length == 0)
                            {
                                failureMessage += "Equipment name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (isFromMeasuringPoint && parentType == MeasuringPointDataType.Functional_Location && locationName.Length > 50)
                            {
                                failureMessage += "Functional location name length should not be greater than 50 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (parentType == MeasuringPointDataType.Equipment && equipment.Length > 50)
                            {
                                failureMessage += "Equipment name length should not be greater than 50 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (measuringPointCode.Length == 0)
                            {
                                failureMessage += "Measuring point code is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (measuringPointName.Length == 0)
                            {
                                failureMessage += "Measuring point name is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (category.Length == 0)
                            {
                                failureMessage += "Category is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (measuringPointCode.Length > 10)
                            {
                                failureMessage += "Measuring point code length should not be greater than 10 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (measuringPointName.Length > 50)
                            {
                                failureMessage += "Measuring point name length should not be greater than 50 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (measuringPointDescription.Length > 200)
                            {
                                failureMessage += "Measuring point description length should not be greater than 200 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (position.Length > 100)
                            {
                                failureMessage += "Position length should not be greater than 100 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (imageName.Length > 200)
                            {
                                failureMessage += "Image name length should not be greater than 200 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && decimalPlaces.ToString().Length > 10)
                            {
                                failureMessage += "Decimal places length should not be greater than 7 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && decimalPlaces < 0)
                            {
                                failureMessage += "Invalid decimal places in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Text && maxTextLength.ToString().Length > 8)
                            {
                                failureMessage += "Maximum text length should not be greater than 8 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Text && maxTextLength < 0)
                            {
                                failureMessage += "Invalid max text length in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            //else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && lowerValue < 0)
                            //{
                            //    failureMessage += "Invalid lower value point in line number: " + lineNumber.ToString() + Environment.NewLine;
                            //    failure++;
                            //}
                            //else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && upperValue < 0)
                            //{
                            //    failureMessage += "Invalid upper value point in line number: " + lineNumber.ToString() + Environment.NewLine;
                            //    failure++;
                            //}
                            //else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && lowerLimitWarning < 0)
                            //{
                            //    failureMessage += "Invalid lower limit warning point in line number: " + lineNumber.ToString() + Environment.NewLine;
                            //    failure++;
                            //}
                            //else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && upperLimitWarning < 0)
                            //{
                            //    failureMessage += "Invalid upper limit warning point in line number: " + lineNumber.ToString() + Environment.NewLine;
                            //    failure++;
                            //}
                            else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && lowerValue > upperValue)
                            {
                                failureMessage += "Upper limit should be greater than lower limit in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if ((readingType == ReadingType.Numeric || readingType == ReadingType.Decimal) && lowerLimitWarning > upperLimitWarning)
                            {
                                failureMessage += "Upper limit warning should be greater than lower limit warning in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Numeric && Convert.ToInt32(lowerValue).ToString().Length > 7)
                            {
                                failureMessage += "Lower limit length should not be greater than 7 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Numeric && Convert.ToInt32(upperValue).ToString().Length > 7)
                            {
                                failureMessage += "Upper limit length should not be greater than 7 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Numeric && Convert.ToInt32(lowerLimitWarning).ToString().Length > 7)
                            {
                                failureMessage += "Lower limit warning length should not be greater than 7 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Numeric && Convert.ToInt32(upperLimitWarning).ToString().Length > 7)
                            {
                                failureMessage += "Upper limit warning length should not be greater than 7 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && lowerValue.ToString().Length > 10)
                            {
                                failureMessage += "Lower limit length should not be greater than 10 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && upperValue.ToString().Length > 10)
                            {
                                failureMessage += "Upper limit length should not be greater than 10 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && lowerLimitWarning.ToString().Length > 10)
                            {
                                failureMessage += "Lower limit warning length should not be greater than 10 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if (readingType == ReadingType.Decimal && upperLimitWarning.ToString().Length > 10)
                            {
                                failureMessage += "Upper limit warning length should not be greater than 10 in line number: " + lineNumber.ToString() + Environment.NewLine;
                                failure++;
                            }
                            else if ((dataSource.Length > 0 || gatewayService.Length > 0 || serverName.Length > 0 || tagName.Length > 0) && !(dataSource.Length > 0 && gatewayService.Length > 0 && serverName.Length > 0 && tagName.Length > 0))
                            {
                                if (dataSource.Length == 0)
                                {
                                    failureMessage += "Datasource is empty in line number: " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                if (gatewayService.Length == 0)
                                {
                                    failureMessage += "Gateway service is empty in line number: " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                if (serverName.Length == 0)
                                {
                                    failureMessage += "Server name is empty in line number: " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                if (tagName.Length == 0)
                                {
                                    failureMessage += "Tag name is empty in line number: " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                            }
                            #endregion
                            else
                            {
                                bool isValid = false;
                                if (isFromMeasuringPoint && parentType == MeasuringPointDataType.Functional_Location)
                                {
                                    //Check Functional location Name exist or not
                                    Char locationStatus = 'N';
                                    dataReaderInfo = MaintenanceDAL.GetAllFunctionalLocationInfo(db, transaction, basicParam.SiteID, 0, 0, 0, locationName, string.Empty, string.Empty, false, false, string.Empty, 0, restrictAccess);
                                    if (dataReaderInfo.Read())
                                    {
                                        locationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                                        locationStatus = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FSTATUS"));
                                    }
                                    dataReaderInfo.Close();

                                    if (locationStatus == 'I')
                                    {
                                        failureMessage += "Functional Location name :" + locationName + " does not exist in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                }
                                else
                                {
                                    //Check Equipment Name exist or not
                                    dataReaderInfo = MaintenanceDAL.CheckEquipmentInfoExist(db, transaction, basicParam.SiteID, 0, string.Empty, equipment, false, true);
                                    if (dataReaderInfo.Read())
                                    {
                                        equipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                                        dataReaderInfo.Close();
                                    }
                                    else
                                    {
                                        dataReaderInfo.Close();
                                        failureMessage += "Equipment doesn't exist : " + equipment + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                }

                                if (equipmentID > 0 || locationID > 0)
                                {
                                    int parentID = parentType == MeasuringPointDataType.Equipment ? equipmentID : locationID;
                                    //Check measuring point code exist or not
                                    if (MaintenanceDAL.CheckMeasuringPointCodeExist(db, transaction, basicParam.SiteID, measuringPointCode, 0, false))
                                    {
                                        dataReaderInfo = MaintenanceDAL.GetMeasuringPointID(db, transaction, basicParam.SiteID, 0, measuringPointCode, string.Empty, parentID, (char)parentType);
                                        if (dataReaderInfo.Read())
                                        {
                                            measuringPointID = Common.GetSafeInt32(dataReaderInfo, "FMEASURINGPOINTID");
                                            measuringPointStatus = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FSTATUS"));
                                            isValid = true;
                                            dataReaderInfo.Close();

                                            if (measuringPointStatus == 'I')
                                            {
                                                if (MaintenanceDAL.CheckMeasuringPointCodeExist(db, transaction, basicParam.SiteID, measuringPointCode, 0, true) == false)
                                                {
                                                    isValid = true;
                                                }
                                                else
                                                {
                                                    failureMessage += "Measuring point code : " + measuringPointCode + " already exist for other equipment or functional location in line number: " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            dataReaderInfo.Close();
                                            if (MaintenanceDAL.CheckMeasuringPointCodeExist(db, transaction, basicParam.SiteID, measuringPointCode, 0, true) == false)
                                            {
                                                isValid = true;
                                            }
                                            else
                                            {
                                                failureMessage += "Measuring point code : " + measuringPointCode + " already exist for other equipment or functional location in line number: " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                                lineNumber++;
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        isValid = true;
                                    }

                                    if (isValid)
                                    {
                                        #region Measuring attribute-UOM Validation
                                        if (measuringPointAttr.Length > 0 && unit.Length == 0)
                                        {
                                            failureMessage += "Measuring point UOM is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else if (measuringPointAttr.Length == 0 && unit.Length > 0)
                                        {
                                            failureMessage += "Measuring point attribute is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        #endregion
                                        else
                                        {
                                            #region Measuring point reading type validation
                                            switch (readingType)
                                            {
                                                case ReadingType.Text:
                                                    lowerValue = upperValue = lowerLimitWarning = upperLimitWarning = decimalPlaces = 0;
                                                    break;
                                                case ReadingType.Selection:
                                                    lowerValue = upperValue = lowerLimitWarning = upperLimitWarning = maxTextLength = decimalPlaces = 0;
                                                    break;
                                                case ReadingType.Numeric:
                                                    maxTextLength = decimalPlaces = 0;
                                                    selectionGroup = string.Empty;
                                                    lowerValue = Convert.ToInt32(lowerValue);
                                                    upperValue = Convert.ToInt32(upperValue);
                                                    upperLimitWarning = Convert.ToInt32(upperLimitWarning);
                                                    lowerLimitWarning = Convert.ToInt32(lowerLimitWarning);
                                                    break;
                                                case ReadingType.Decimal:
                                                    maxTextLength = 0;
                                                    selectionGroup = string.Empty;
                                                    lowerValue = Math.Round(lowerValue, decimalPlaces);
                                                    upperValue = Math.Round(upperValue, decimalPlaces);
                                                    upperLimitWarning = Math.Round(upperLimitWarning, decimalPlaces);
                                                    lowerLimitWarning = Math.Round(lowerLimitWarning, decimalPlaces);
                                                    break;
                                                default:
                                                    break;
                                            }
                                            #endregion
                                            //Get CategoryID                                                    
                                            categoryID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, category, MasterDataType.MP_CATEGORY.ToString(), out status);

                                            //Get GroupID
                                            if (selectionGroup.Length > 0)
                                                groupID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, selectionGroup, MasterDataType.GROUPCODE.ToString(), out status);

                                            //Get UOMID
                                            if (measuringPointAttr.Length > 0 && unit.Length > 0)
                                            {
                                                dataReaderInfo = MaintenanceDAL.GetSensorTypeUOMID(db, measuringPointAttr, unit);
                                                if (dataReaderInfo.Read())
                                                {
                                                    sernsonTypeUOMID = Common.GetSafeInt32(dataReaderInfo, "FSENSORTYPEUOMID");
                                                }
                                                dataReaderInfo.Close();

                                                if (sernsonTypeUOMID == 0)
                                                {
                                                    failureMessage += "Selected measuring point UOM : " + unit + " is invalid for measuring point attribute : " + measuringPointAttr + " in line number: " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    lineNumber++;
                                                    continue;
                                                }
                                            }

                                            //Get OPCTAGID
                                            bool isValidTag = true;
                                            if (dataSource.Length > 0 && gatewayService.Length > 0 && serverName.Length > 0 && tagName.Length > 0)
                                            {
                                                dataSourceID = GetDataSourceId(db, basicParam.SiteID, dataSource);
                                                if (dataSourceID == 0)
                                                {
                                                    failureMessage += "Selected data souce not exist in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    isValidTag = false;
                                                }
                                                gatewayServiceID = GetGatewayServiceID(db, basicParam.SiteID, gatewayService, dataSourceID);
                                                if (gatewayServiceID == 0)
                                                {
                                                    failureMessage += "Selected gateway does not exist in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    isValidTag = false;
                                                }

                                                if (GetTagUUID(dataSourceID, gatewayServiceID, serverName, basicParam.SiteID, tagName, "", ref uuID) == 0)
                                                {
                                                    failureMessage += string.Format(" Selected tag {0} does not exist in server name {1} in line number : " + lineNumber.ToString() + Environment.NewLine, tagName, serverName);
                                                    failure++;
                                                    isValidTag = false;
                                                }
                                            }

                                            if (isValidTag)
                                            {
                                                bool isRecordUpdated = false;
                                                if (parentID > 0 && measuringPointID > 0)
                                                {
                                                    if (measuringPointStatus == 'I' && excelStatus == 'I')
                                                    {
                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            failureMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " cannot be deleted as it is not available of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        else
                                                            failureMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " cannot be deleted as it is not available of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                        lineNumber++;
                                                        continue;
                                                    }

                                                    //Updating measuring point status
                                                    MaintenanceDAL.UpdateMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPointID, measuringPointCode, measuringPointName, measuringPointDescription, (char)parentType,
                                                    parentID, position, categoryID, sernsonTypeUOMID, measuringPointImageName, (char)readingType, maxTextLength,
                                                    lowerValue, upperValue, lowerLimitWarning, upperLimitWarning, decimalPlaces, groupID, isCounter, tagName, uuID, basicParam.UserID, currentDate, currentTime);

                                                    if (measuringPointStatus == 'I' && excelStatus == 'A')
                                                    {
                                                        #region Log Information
                                                        //Log Information
                                                        description = Language_Resources.MeasuringPoint_Resource.measuringPointInfoAddedExcel.Replace("[XXX]", equipment.ToString().Trim());
                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            descInEnglish = "Successfully inserted measuring point information for equipment : " + equipment.ToString().Trim();
                                                        else
                                                            descInEnglish = "Successfully inserted measuring point information for functional location : " + locationName.ToString().Trim();
                                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                                        #endregion

                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            insertMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " is inserted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        else
                                                            insertMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " is inserted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else if (excelStatus == 'A' && measuringPointStatus == 'A')
                                                    {
                                                        #region Log Information
                                                        //Log Information
                                                        description = Language_Resources.MeasuringPoint_Resource.measuringPointInfoUpdatedExcel.Replace("[XXX]", equipment.ToString().Trim());
                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            descInEnglish = "Successfully updated measuring point information for equipment : " + equipment.ToString().Trim();
                                                        else
                                                            descInEnglish = "Successfully updated measuring point information for functional location : " + locationName.ToString().Trim();
                                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                                        #endregion

                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            updateMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " is updated successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        else
                                                            updateMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " is updated successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        updated++;
                                                    }
                                                    else
                                                    {
                                                        isRecordUpdated = true;
                                                    }
                                                }
                                                else
                                                {
                                                    if (excelStatus == 'A')
                                                    {
                                                        //Insert all measuring point against equipment ID.
                                                        measuringPointID = MaintenanceDAL.InsertMeasuringPointInfo(db, transaction, basicParam.SiteID, measuringPointCode, measuringPointName, measuringPointDescription,
                                                        position, categoryID, sernsonTypeUOMID, parentID, (char)parentType, measuringPointImageName,
                                                        (char)readingType, maxTextLength, lowerValue, upperValue,
                                                        lowerLimitWarning, upperLimitWarning, decimalPlaces, groupID, isCounter, 'N', tagName, uuID, basicParam.UserID, currentDate, currentTime);

                                                        #region Log Information
                                                        //Log Information
                                                        description = Language_Resources.MeasuringPoint_Resource.measuringPointInfoAddedExcel.Replace("[XXX]", equipment.ToString().Trim());
                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            descInEnglish = "Successfully inserted measuring point information for equipment : " + equipment.ToString().Trim();
                                                        else
                                                            descInEnglish = "Successfully inserted measuring point information for functional location : " + locationName.ToString().Trim();
                                                        CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                                        #endregion

                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            insertMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " is inserted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        else
                                                            insertMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " is inserted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else
                                                    {
                                                        if (parentType == MeasuringPointDataType.Equipment)
                                                            failureMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " cannot be deleted as it is not available of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        else
                                                            failureMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " cannot be deleted as it is not available of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                        lineNumber++;
                                                        continue;
                                                    }
                                                }

                                                //Update Measuring point status
                                                MaintenanceDAL.UpdateMeasuringPointStatus(db, transaction, basicParam.SiteID, parentID, (char)parentType, measuringPointID, excelStatus, basicParam.UserID, currentDate, currentTime);

                                                if (isRecordUpdated && excelStatus == 'I')
                                                {
                                                    #region Log Information
                                                    //Log Information
                                                    description = Language_Resources.MeasuringPoint_Resource.measuringPointInfoDeletedExcel.Replace("[XXX]", equipment.ToString().Trim());
                                                    if (parentType == MeasuringPointDataType.Equipment)
                                                        descInEnglish = "Successfully deleted measuring point information for equipment : " + equipment.ToString().Trim();
                                                    else
                                                        descInEnglish = "Successfully deleted measuring point information for functional location : " + locationName.ToString().Trim();
                                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Measuring_Point.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                                    #endregion

                                                    if (parentType == MeasuringPointDataType.Equipment)
                                                        deleteMessage += "Measuring Point : " + measuringPointCode + " for equipment : " + equipment + " is deleted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    else
                                                        deleteMessage += "Measuring Point : " + measuringPointCode + " for functional location : " + locationName + " is deleted successfully of line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    deleted++;
                                                }

                                                #region copying image file
                                                if (measuringPointImageName.Length > 0 && !string.IsNullOrEmpty(unzipedFolderName))
                                                {                                                  
                                                    if (!Directory.Exists(measuringPointImagesPathDest))
                                                    {
                                                        System.IO.Directory.CreateDirectory(measuringPointImagesPathDest);
                                                    }
                                                    System.IO.File.Copy(measuringPointImagesPathSource + "\\" + imageName, measuringPointImagesPathDest + "\\" + measuringPointImageName, true);
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                }
                            }
                            lineNumber++;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion
        #endregion

        #endregion

        #region Documents,Images And Videos

        public List<DocumentInfo> GetAllDocumentsAndImagesInfo(DocumentBasicInfo filter)
        {
            IDataReader dataReaderDocumentsInfo = null;
            try
            {

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetSiteDateTimeFormat(db, filter.SiteID, ref siteDateFormat, ref siteTimeFormat);

                string documentsPath = ConfigurationManager.AppSettings["MaintenanceDocumentsPath"].ToString().Trim('/') + "/" + filter.InfoType.ToString() + "/" + filter.SiteID;
                string documentsModelPath = ConfigurationManager.AppSettings["MaintenanceDocumentsPath"].ToString().Trim('/') + "/" + InfoType.Equipment_Model.ToString() + "/" + filter.SiteID;
                List<DocumentInfo> documentListInfo = new List<DocumentInfo>();
                DocumentInfo documentInfo = null;

                dataReaderDocumentsInfo = MaintenanceDAL.GetAllDocumentsAndImagesInfo(db, filter.SiteID, filter.EquipmentID, (char)filter.InfoType, true);
                while (dataReaderDocumentsInfo.Read())
                {
                    documentInfo = new DocumentInfo();
                    documentInfo.DocumentID = Common.GetSafeInt32(dataReaderDocumentsInfo, "FDOCUMENTID");
                    documentInfo.DocumentName = Common.GetSafeString(dataReaderDocumentsInfo, "FDOCUMENTNAME");
                    documentInfo.DocumentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(dataReaderDocumentsInfo, "FDOCUMENTTYPE"));
                    documentInfo.IsModelDocument = Common.GetSafeString(dataReaderDocumentsInfo, "FREF_TYPE") == "MODEL" ? true : false;
                    int referenceModelID = Common.GetSafeInt32(dataReaderDocumentsInfo, "FMODELREFERENCEID");

                    if (documentInfo.IsModelDocument && referenceModelID > 0)
                    {
                        if (documentInfo.DocumentName.Length > 0)
                        {
                            documentInfo.DownloadPath = documentsModelPath + "/" + referenceModelID + "/" + documentInfo.DocumentName;
                            documentInfo.ThumbnailPath = documentsModelPath + "/" + referenceModelID + "/Thumbnail/" + documentInfo.DocumentName;
                        }
                    }
                    else
                    {
                        if (documentInfo.DocumentName.Length > 0)
                        {
                            documentInfo.DownloadPath = documentsPath + "/" + filter.EquipmentID + "/" + documentInfo.DocumentName;
                            documentInfo.ThumbnailPath = documentsPath + "/" + filter.EquipmentID + "/Thumbnail/" + documentInfo.DocumentName;
                        }
                    }
                    documentListInfo.Add(documentInfo);
                }
                dataReaderDocumentsInfo.Close();

                return documentListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting documents info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filter.SiteID + ";UserID: " + filter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderDocumentsInfo != null && !dataReaderDocumentsInfo.IsClosed)
                    dataReaderDocumentsInfo.Close();
            }
        }

        public int InsertDocumentsAndImagesInfo(DocumentFilterInfo documentFilterInfo)
        {
            IDataReader dataReaderDocumentInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int result = 0;
                int currentDate = 0;
                int currentTime = 0;

                string description = string.Empty;
                string descInEnglish = string.Empty;

                Common.GetCurrentSiteDateTime(db, documentFilterInfo.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;


                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        if (documentFilterInfo.ReferenceID != 0)
                        {
                            string referenceType = InfoType.Equipment.ToString().ToUpper();

                            if ((documentFilterInfo.InfoType == InfoType.Equipment))
                            {
                                referenceType = "EQUIPMENT";
                            }
                            else if (documentFilterInfo.InfoType == InfoType.Equipment_Model)
                            {
                                referenceType = "MODEL";
                            }
                            else if (documentFilterInfo.InfoType == InfoType.MaintenanceAttachment)
                            {
                                referenceType = "ATTACHMENT";
                            }
                            else if (documentFilterInfo.InfoType == InfoType.NotificationAttachment)
                            {
                                referenceType = "NOTIFICATION";
                            }

                            if (documentFilterInfo.InfoType == InfoType.MaintenanceAttachment || documentFilterInfo.InfoType == InfoType.NotificationAttachment)
                            {
                                if (MaintenanceDAL.CheckDocumentExist(db, transaction, documentFilterInfo.SiteID, 0, documentFilterInfo.DocumentName, referenceType, documentFilterInfo.ReferenceID))
                                    return -2; //same document name already exists
                            }

                            result = MaintenanceDAL.InsertDocumentsAndImagesInfo(db, transaction, documentFilterInfo.SiteID, documentFilterInfo.ReferenceID, referenceType, documentFilterInfo.DocumentName,
                                Convert.ToChar(documentFilterInfo.DocumentType), documentFilterInfo.UserID, currentDate, currentTime);

                            #region Log Information
                            //Log Information
                            //string equipmentName = string.Empty;
                            //dataReaderDocumentInfo = MaintenanceDAL.GetEquipmentInfo(db, documentFilterInfo.SiteID, 0, 0, string.Empty, 0, documentFilterInfo.ReferenceID, Convert.ToChar(documentFilterInfo.InfoType), string.Empty, documentFilterInfo.UserID, false);
                            //if (dataReaderDocumentInfo.Read())
                            //{
                            //    equipmentName = Common.GetSafeString(dataReaderDocumentInfo, "FEQUIPMENTNAME");
                            //}
                            //dataReaderDocumentInfo.Close();

                            //if (documentFilterInfo.InfoType == InfoType.Equipment)
                            //{
                            //    //logType = LogTypes.Config_Document_Info.ToString();
                            //    description = Language_Resources.Maintenance_LogInformations_Resource.documentEquipmentAdded.Replace("[XXX]", documentFilterInfo.DocumentName.ToString().ToUpper()).Replace("[YYY]", equipmentName.ToString());
                            //    descInEnglish = "Successfully inserted document : " + documentFilterInfo.DocumentName + " for equipment name : " + equipmentName.Trim();
                            //}
                            //else if (documentFilterInfo.InfoType == InfoType.Equipment_Model)
                            //{
                            //    //logType = LogTypes.Config_Document_Info.ToString();
                            //    description = Language_Resources.Maintenance_LogInformations_Resource.documentEquipmentModelAdded.Replace("[XXX]", documentFilterInfo.DocumentName.ToString()).Replace("[YYY]", equipmentName.ToString());
                            //    descInEnglish = "Successfully inserted document : " + documentFilterInfo.DocumentName + " for equipment model name : " + equipmentName.Trim();
                            //}
                            //CommonDAL.InsertLogInformation(db, transaction, documentFilterInfo.SiteID, LogTypes.Config_Document_Info.ToString(), description, descInEnglish, documentFilterInfo.UserID, currentDate, currentTime);
                            #endregion

                            transaction.Commit();
                        }
                        else
                        {
                            transaction.Rollback();
                            result = -1;//Failed to insert info
                        }

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }

            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting documnets info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + documentFilterInfo.SiteID + ";UserID: " + documentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderDocumentInfo != null && !dataReaderDocumentInfo.IsClosed)
                    dataReaderDocumentInfo.Close();
            }
        }

        public int DeleteDocumentsAndImagesInfo(BasicParam basicParam, int documentID)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                int result = 0;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;

                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        if (MaintenanceDAL.CheckDocumentExist(db, transaction, basicParam.SiteID, documentID, string.Empty, string.Empty, 0))
                        {
                            //make status in-active of documemt 
                            MaintenanceDAL.InActivateDocumentsInfo(db, transaction, basicParam.SiteID, documentID, basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            //string documnetName = MaintenanceDAL.GetDocumentName(db, basicParam.SiteID, documentID);

                            //string description = Language_Resources.Maintenance_LogInformations_Resource.documentInfoDeleted.Replace("[XXX]", documnetName.ToString());
                            //string descInEnglish = "Successfully deleted document : " + documnetName.ToString();
                            //CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_Document_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion

                            transaction.Commit();
                            result = 1;//Document info deleted successfully
                        }
                        else
                        {
                            transaction.Rollback();
                            result = -1;//Document info doesn't exist
                        }

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting documents info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }

        }

        #endregion

        #region Category,Class,Manufacturer,Equipment Type 
        public MasterDataList GetMaintMasterData(BasicParam basicParam, MasterDataFilterInfo masterDataFilterInfo)
        {
            if (masterDataFilterInfo.MasterDataType != null)
            {
                MasterDataList masterDataList = new MasterDataList();
                IDataReader dataReaderMaintMaster = null;

                try
                {
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    MasterDataInfo masterDataInfo = null;
                    string selectionGroupItem = string.Empty;

                    dataReaderMaintMaster = MaintenanceDAL.GetMaintMasterData(db, basicParam.SiteID, masterDataFilterInfo.SearchString, masterDataFilterInfo.MasterDataType.ToString(), masterDataFilterInfo.PageSize, masterDataFilterInfo.PageIndex, masterDataFilterInfo.SortType);
                    while (dataReaderMaintMaster.Read())
                    {
                        masterDataInfo = new MasterDataInfo();
                        masterDataInfo.MasterDataID = Common.GetSafeInt32(dataReaderMaintMaster, "FMASTERID");
                        masterDataInfo.MasterDataName = Common.GetSafeString(dataReaderMaintMaster, "FNAME");
                        masterDataInfo.Description = Common.GetSafeString(dataReaderMaintMaster, "FDESCRIPTION");
                        masterDataInfo.MasterDataType = masterDataFilterInfo.MasterDataType;
                        masterDataInfo.SelectionGroupItemName = GetSelectionGroupItems(db, basicParam.SiteID, masterDataInfo.MasterDataID, masterDataFilterInfo.MasterDataType);
                        if (masterDataList.TotalMasterDataCount == 0)
                        {
                            masterDataList.TotalMasterDataCount = Common.GetSafeInt32(dataReaderMaintMaster, "FCOUNT");
                        }
                        masterDataList.MasterDataInfoList.Add(masterDataInfo);
                    }
                    dataReaderMaintMaster.Close();

                    return masterDataList;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while getting maint master data ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
                finally
                {
                    if (dataReaderMaintMaster != null && !dataReaderMaintMaster.IsClosed)
                        dataReaderMaintMaster.Close();
                }
            }
            else
            {
                return null;
            }
        }

        public MasterDataDropDownList GetAllMaintMasterDropDownDataInfo(BasicParam basicParam, MasterDataDropDownListFilterInfo masterDataDropDownListFilterInfo)
        {
            if (masterDataDropDownListFilterInfo.MasterDataTypeList.Count > 0)
            {
                try
                {
                    MasterDataDropDownList masterDataDropDownList = new MasterDataDropDownList();
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                    foreach (MasterDataType masterDataType in masterDataDropDownListFilterInfo.MasterDataTypeList)
                    {
                        switch (masterDataType)
                        {
                            case MasterDataType.MANUFACTURER:
                                masterDataDropDownList.ManufacturerInfoList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.MANUFACTURER);
                                break;
                            case MasterDataType.TYPE:
                                masterDataDropDownList.CategoryInfoList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.TYPE);
                                break;
                            case MasterDataType.CLASS:
                                masterDataDropDownList.ClassInfoList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.CLASS);
                                break;
                            case MasterDataType.MP_CATEGORY:
                                masterDataDropDownList.MPcategoryInfoList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.MP_CATEGORY);
                                break;
                            case MasterDataType.GROUPCODE:
                                masterDataDropDownList.MPGroupList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.GROUPCODE);
                                break;
                            case MasterDataType.TASKGRP_TYPE:
                                masterDataDropDownList.TaskGroupList = GetMaintMasterDataInfo(db, basicParam.SiteID, masterDataDropDownListFilterInfo.SortType, MasterDataType.TASKGRP_TYPE);
                                break;
                        }
                    }

                    return masterDataDropDownList;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while getting maint master data for dropdown ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return null;
            }

        }

        private List<TypeValueInfo> GetMaintMasterDataInfo(Database db, int siteID, string sortType, MasterDataType masterDataType)
        {
            List<TypeValueInfo> masterDataList = new List<TypeValueInfo>();
            IDataReader dataReaderMaintMaster = null;
            try
            {
                TypeValueInfo masterDataInfo = null;
                dataReaderMaintMaster = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, masterDataType.ToString(), 0, 0, sortType);
                while (dataReaderMaintMaster.Read())
                {
                    masterDataInfo = new TypeValueInfo();
                    masterDataInfo.TypeValue = Common.GetSafeInt32(dataReaderMaintMaster, "FMASTERID");
                    masterDataInfo.DisplayName = Common.GetSafeString(dataReaderMaintMaster, "FNAME");
                    masterDataList.Add(masterDataInfo);
                }
                dataReaderMaintMaster.Close();

                return masterDataList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderMaintMaster != null && !dataReaderMaintMaster.IsClosed)
                    dataReaderMaintMaster.Close();
            }

        }


        /// <summary>
        /// Insert and update method for Master Data
        /// </summary>
        /// <param name="basicParam"></param>
        /// <param name="masterDataInfo"></param>
        /// <returns> 
        /// -1: master Data type is empty 
        /// -2:  master data name is empty 
        /// -3: master data name already exist 
        /// -4: siteID or userId is empty
        /// >0: master data ID [updated & Inserted]
        ///  </returns>
        public int InsertUpdateMasterData(BasicParam basicParam, MasterDataInfo masterDataInfo)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    /* Validation start*/
                    if (masterDataInfo.MasterDataType == null)
                    {
                        return -1;
                    }
                    if (string.IsNullOrEmpty(masterDataInfo.MasterDataName))
                    {
                        return -2;
                    }

                    if (string.IsNullOrEmpty(masterDataInfo.Description))
                    {
                        masterDataInfo.Description = string.Empty;
                    }


                    /*Validation End*/

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    int itemID = 0;
                    int result = 0;

                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                    DbTransaction transaction = null;
                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        transaction = dbConnection.BeginTransaction();
                        try
                        {
                            int masterDataDBID = 0;
                            string masterDataStatus = string.Empty;
                            masterDataDBID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, masterDataInfo.MasterDataName, masterDataInfo.MasterDataType.ToString(), out masterDataStatus);
                            if (masterDataInfo.MasterDataID > 0)
                            {//update
                                if (masterDataDBID > 0)
                                {
                                    transaction.Rollback();
                                    result = -3;//Master data name is already exist
                                    return result;
                                }
                                else
                                { // update
                                    MaintenanceDAL.UpdateMaintMasterData(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, masterDataInfo.MasterDataName, masterDataInfo.MasterDataType.ToString(), masterDataInfo.Description, basicParam.UserID, currentDate, currentTime);
                                    if (masterDataInfo.MasterDataType == MasterDataType.GROUPCODE)
                                    {
                                        MaintenanceDAL.DeleteSelectionGroupItem(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, basicParam.UserID, currentDate, currentTime);
                                        foreach (string itemNames in masterDataInfo.SelectionGroupItemName)
                                        {
                                            itemID = MaintenanceDAL.GetSelectionGroupMaxItemID(db, transaction, masterDataInfo.MasterDataID);
                                            MaintenanceDAL.InsertSelectionGroupItemInfo(db, transaction, basicParam.SiteID, itemNames, itemID, masterDataInfo.MasterDataID, basicParam.UserID, currentDate, currentTime);
                                        }
                                    }
                                    result = masterDataInfo.MasterDataID;
                                }
                            }
                            else
                            {//insert
                                if (masterDataDBID > 0)//update
                                {
                                    if (masterDataStatus == "I")
                                    {
                                        //update return masterDataDBID id
                                        MaintenanceDAL.UpdateMaintMasterData(db, transaction, basicParam.SiteID, masterDataDBID, masterDataInfo.MasterDataName, masterDataInfo.MasterDataType.ToString(), masterDataInfo.Description, basicParam.UserID, currentDate, currentTime);
                                        if (masterDataInfo.MasterDataType == MasterDataType.GROUPCODE)
                                        {
                                            MaintenanceDAL.DeleteSelectionGroupItem(db, transaction, basicParam.SiteID, masterDataDBID, basicParam.UserID, currentDate, currentTime);
                                            foreach (string itemNames in masterDataInfo.SelectionGroupItemName)
                                            {
                                                itemID = MaintenanceDAL.GetSelectionGroupMaxItemID(db, transaction, masterDataDBID);
                                                MaintenanceDAL.InsertSelectionGroupItemInfo(db, transaction, basicParam.SiteID, itemNames, itemID, masterDataDBID, basicParam.UserID, currentDate, currentTime);

                                            }
                                        }
                                        result = masterDataDBID;
                                    }
                                    else
                                    {
                                        result = -3;//Master data name is already exist
                                    }
                                }
                                else
                                { //Insert
                                    masterDataDBID = MaintenanceDAL.InsertMaintMasterData(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataName, masterDataInfo.MasterDataType.ToString(), masterDataInfo.Description, basicParam.UserID, currentDate, currentTime);

                                    if (masterDataInfo.SelectionGroupItemName != null && masterDataInfo.SelectionGroupItemName.Count > 0)
                                    {
                                        foreach (string itemNames in masterDataInfo.SelectionGroupItemName)
                                        {
                                            itemID = MaintenanceDAL.GetSelectionGroupMaxItemID(db, transaction, masterDataDBID);
                                            // masterDataDBID= MaintenanceDAL.InsertMaintMasterData(db, null, basicParam.SiteID, masterDataInfo.MasterDataName, Convert.ToString((char)masterDataInfo.MasterDataType), masterDataInfo.Description, basicParam.UserID, currentDate, currentTime);
                                            MaintenanceDAL.InsertSelectionGroupItemInfo(db, transaction, basicParam.SiteID, itemNames, itemID, masterDataDBID, basicParam.UserID, currentDate, currentTime);

                                        }
                                    }
                                    result = masterDataDBID;
                                }
                            }
                            transaction.Commit();
                            return result;
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while insert/updating maint master data ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return -4;
            }
        }

        public int DeleteMasterData(BasicParam basicParam, MasterDataInfo masterDataInfo)
        {
            int result = 0;
            if (basicParam.SiteID > 0 && basicParam.UserID > 0 && masterDataInfo.MasterDataID > 0)
            {
                try
                {
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                    DbTransaction transaction = null;

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        transaction = dbConnection.BeginTransaction();
                        try
                        {

                            if (masterDataInfo.MasterDataType != MasterDataType.GROUPCODE && masterDataInfo.MasterDataType != MasterDataType.WORKGROUP
                               && masterDataInfo.MasterDataType != MasterDataType.MP_CATEGORY && MaintenanceDAL.CheckMasterDataExistInEquipmentTable(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID))
                            {
                                result = 1;//can't delete  is already use in equipment table
                                transaction.Rollback();
                            }
                            else if ((masterDataInfo.MasterDataType == MasterDataType.GROUPCODE || masterDataInfo.MasterDataType == MasterDataType.MP_CATEGORY)
                                && MaintenanceDAL.CheckMasterDataExistsInMeasuringPointTable(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID))
                            {
                                result = 1;//can't delete  is already use in measuring point table
                                transaction.Rollback();
                            }
                            else if (masterDataInfo.MasterDataType == MasterDataType.TASKGRP_TYPE &&
                                MaintenanceDAL.CheckMasterDataExistInTaskGroupTable(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID))
                            {
                                result = 1;//can't delete  is already use in task group table
                                transaction.Rollback();
                            }
                            else if (masterDataInfo.MasterDataType == MasterDataType.MAINT_TYPE &&
                                MaintenanceDAL.CheckMasterDataExistInScheduleTable(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID))
                            {
                                result = 1;//can't delete  is already use in schedule table
                                transaction.Rollback();
                            }
                            else if (masterDataInfo.MasterDataType == MasterDataType.WORKGROUP &&
                                MaintenanceDAL.CheckWorkGroupLinkToSchedule(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID))
                            {
                                result = 1;//can't delete  work group linked to schedule
                                transaction.Rollback();
                            }
                            else
                            {
                                MaintenanceDAL.DeleteMaintMasterData(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, basicParam.UserID, currentDate, currentTime);
                                if (masterDataInfo.MasterDataType == MasterDataType.GROUPCODE)
                                    MaintenanceDAL.DeleteSelectionGroupItem(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, basicParam.UserID, currentDate, currentTime);
                                if (masterDataInfo.MasterDataType == MasterDataType.WORKGROUP)
                                    MaintenanceDAL.UpdateWorkGroupUserStatus(db, transaction, basicParam.SiteID, masterDataInfo.MasterDataID, 0, 'I', basicParam.UserID, currentDate, currentTime);
                                transaction.Commit();
                                result = 2;
                            }
                            return result;
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while deleting master data ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return result;
            }
        }

        private List<string> GetSelectionGroupItems(Database db, int siteID, int masterDataID, MasterDataType? masterDataType)
        {
            IDataReader dataReaderSelectionGroupItems = null;
            List<string> masterDataInfo = new List<string>();
            try
            {
                if (masterDataType == MasterDataType.GROUPCODE)
                {
                    dataReaderSelectionGroupItems = MaintenanceDAL.GetSelectionGroupItems(db, siteID, masterDataID, masterDataType.ToString());
                    while (dataReaderSelectionGroupItems.Read())
                    {
                        string itemNames = Common.GetSafeString(dataReaderSelectionGroupItems, "FDISPLAYNAME");
                        masterDataInfo.Add(itemNames);
                    }
                    dataReaderSelectionGroupItems.Close();
                }
                return masterDataInfo;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderSelectionGroupItems != null && !dataReaderSelectionGroupItems.IsClosed)
                    dataReaderSelectionGroupItems.Close();
            }
        }
        #endregion

        #region Task Group Info

        #region TaskGroup
        public TaskGroupBasicInfo GetTaskGroupInfo(BasicParam basicParam, TaskGroupFilterInfo taskGroupFilterInfo)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                IDataReader dataReaderTaskGroupInfo = null;
                try
                {
                    TaskGroupBasicInfo taskGroupBasicInfo = new TaskGroupBasicInfo();
                    TaskBasicInfo taskBasicInfo = null;
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");


                    taskGroupBasicInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskGroupFilterInfo.IdentifierID, taskGroupFilterInfo.VersionNumber, false);

                    if (taskGroupBasicInfo.TaskGroupID > 0)
                    {
                        dataReaderTaskGroupInfo = MaintenanceDAL.GetTaskListInfo(db, null, basicParam.SiteID, taskGroupBasicInfo.TaskGroupID);
                        while (dataReaderTaskGroupInfo.Read())
                        {
                            taskBasicInfo = new TaskBasicInfo();
                            taskBasicInfo.TaskID = Common.GetSafeInt32(dataReaderTaskGroupInfo, "FTASKID");
                            taskBasicInfo.TaskName = Common.GetSafeString(dataReaderTaskGroupInfo, "FTASKNAME");
                            taskBasicInfo.SequenceNum = Common.GetSafeInt32(dataReaderTaskGroupInfo, "FSEQUENCENUM");
                            taskGroupBasicInfo.TaskBasicInfoList.Add(taskBasicInfo);
                        }
                        dataReaderTaskGroupInfo.Close();
                    }
                    if (taskGroupFilterInfo.IdentifierID == taskGroupBasicInfo.IdentifierID)
                    {
                        return taskGroupBasicInfo;
                    }
                    else
                    {
                        return null;
                    }

                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while fetching task group info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", IdentifierID : " + taskGroupFilterInfo.IdentifierID);
                    throw new FaultException(exceptionErrorMessage);
                }
                finally
                {
                    if (dataReaderTaskGroupInfo != null && !dataReaderTaskGroupInfo.IsClosed)
                        dataReaderTaskGroupInfo.Close();
                }
            }
            else
            {
                return null;
            }
        }

        public TaskGroupIdentifier SaveTaskGroupInfo(BasicParam basicParam, TaskGroupBasicInfo taskGroupInfo)
        {
            TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    /* Validation start*/
                    if (string.IsNullOrEmpty(taskGroupInfo.TaskGroupName))
                    {
                        taskGroupIdentifier.IdentifierID = -1;
                        return taskGroupIdentifier;
                    }

                    if (taskGroupInfo.TaskGroupTypeId <= 0)
                    {
                        taskGroupIdentifier.IdentifierID = -2;
                        return taskGroupIdentifier;
                    }

                    /*Validation End*/

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    if (!MaintenanceDAL.CheckTaskGroupNameExists(db, null, basicParam.SiteID, taskGroupInfo.TaskGroupName, taskGroupInfo.IdentifierID))
                    {
                        if (taskGroupInfo.IdentifierID > 0)
                        {
                            taskGroupIdentifier.IdentifierID = taskGroupInfo.IdentifierID;
                            TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskGroupInfo.IdentifierID, taskGroupInfo.VersionNumber, false);

                            using (DbConnection dbConnection = db.CreateConnection())
                            {
                                dbConnection.Open();
                                DbTransaction transaction = dbConnection.BeginTransaction();
                                try
                                {
                                    if (taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.Draft || taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.MODIFIED)
                                    {
                                        MaintenanceDAL.UpdateTaskGroupInfo(db, transaction, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, taskGroupInfo.TaskGroupName, taskGroupInfo.TaskGroupTypeId, basicParam.UserID, currentDate, currentTime);
                                        taskGroupIdentifier.VersionNumber = taskGroupInfo.VersionNumber;
                                    }
                                    else
                                    {
                                        int versionNumber = 0;
                                        List<TaskMappingInfo> taskMappingList = null;
                                        List<int> toReturnTaskMappingList = new List<int>();
                                        CreateCopyOfTaskGroup(db, transaction, basicParam.SiteID, basicParam.UserID, taskGroupInfo.IdentifierID, taskGroupModifiedInfo.TaskGroupID, 0, taskGroupInfo.TaskGroupName, taskGroupInfo.TaskGroupTypeId, toReturnTaskMappingList, out versionNumber, out taskMappingList);
                                        taskGroupIdentifier.VersionNumber = versionNumber;
                                    }
                                    transaction.Commit();
                                }
                                catch
                                {
                                    transaction.Rollback();
                                    throw;
                                }
                                finally
                                {
                                    dbConnection.Close();
                                }
                            }
                        }
                        else
                        {
                            taskGroupIdentifier.IdentifierID = MaintenanceDAL.GetNextIdentifierID(db);
                            taskGroupIdentifier.VersionNumber = 1;
                            MaintenanceDAL.InsertTaskGroupInfo(db, null, basicParam.SiteID, taskGroupInfo.TaskGroupName, taskGroupInfo.TaskGroupTypeId, taskGroupIdentifier.IdentifierID, taskGroupIdentifier.VersionNumber, (char)TaskGroupStatus.Draft, TaskGroupRefType.TASK.ToString(), 0, basicParam.UserID, currentDate, currentTime);
                        }
                    }
                    else
                    {
                        taskGroupIdentifier.IdentifierID = -3;// task group name already exists
                    }
                    return taskGroupIdentifier;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while saving task group info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return taskGroupIdentifier;
            }
        }

        public int DeleteTaskGroupInfo(BasicParam basicParam, TaskGroupFilterInfo taskGroupfilterInfo)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;

                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    TaskGroupBasicInfo taskGroupInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskGroupfilterInfo.IdentifierID, taskGroupfilterInfo.VersionNumber, false);

                    if (taskGroupInfo.TaskGroupStatus == TaskGroupStatus.Approved)
                    {
                        int totalPendingWorkOrder = MaintenanceDAL.GetPendingWorkOrderCount(db, basicParam.SiteID, taskGroupfilterInfo.IdentifierID);
                        if (totalPendingWorkOrder > 0)
                        {
                            return -1;//Task group is already attached to scheduler
                        }
                    }

                    if (taskGroupInfo.TaskGroupID > 0)
                    {
                        using (DbConnection dbConnection = db.CreateConnection())
                        {
                            dbConnection.Open();
                            DbTransaction transaction = dbConnection.BeginTransaction();
                            try
                            {
                                DeleteTaskInfoWithDependencies(db, transaction, taskGroupInfo.TaskGroupID, 0, currentDate, currentTime, basicParam.SiteID, basicParam.UserID);
                                MaintenanceDAL.SetTaskGroupStatus(db, transaction, basicParam.SiteID, taskGroupInfo.TaskGroupID, 'I', basicParam.UserID, currentDate, currentTime, false);
                                transaction.Commit();
                                return 1;
                            }
                            catch
                            {
                                transaction.Rollback();
                                throw;
                            }
                            finally
                            {
                                dbConnection.Close();
                            }
                        }
                    }
                    else
                    {
                        return -2;//task groupid is empty
                    }
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while deleting task group info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return 0;
            }
        }

        public int ApproveGroupTask(BasicParam basicParam, TaskGroupFilterInfo taskGroupfilterInfo)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                if (taskGroupfilterInfo.IdentifierID < 0)
                {
                    return -1;
                }
                IDataReader dataReaderTaskGroupInfo = null;
                try
                {
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    bool isTaskListExist = false;

                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    TaskGroupBasicInfo taskGroupDraftInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskGroupfilterInfo.IdentifierID, taskGroupfilterInfo.VersionNumber, false);

                    dataReaderTaskGroupInfo = MaintenanceDAL.GetTaskListInfo(db, null, basicParam.SiteID, taskGroupDraftInfo.TaskGroupID);
                    if (dataReaderTaskGroupInfo.Read())
                    {
                        isTaskListExist = true;
                    }
                    dataReaderTaskGroupInfo.Close();

                    if (!isTaskListExist)
                    {
                        return -2;//Task List doesnt exist
                    }

                    TaskGroupBasicInfo taskGroupApprovedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskGroupfilterInfo.IdentifierID, 0, true);

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        DbTransaction transaction = dbConnection.BeginTransaction();
                        try
                        {
                            if (taskGroupApprovedInfo.TaskGroupID > 0)
                            {
                                //Deleting all task info of old approved version record
                                DeleteTaskInfoWithDependencies(db, transaction, taskGroupApprovedInfo.TaskGroupID, 0, currentDate, currentTime, basicParam.SiteID, basicParam.UserID);
                                MaintenanceDAL.SetTaskGroupStatus(db, transaction, basicParam.SiteID, taskGroupApprovedInfo.TaskGroupID, 'I', basicParam.UserID, currentDate, currentTime, false);
                            }

                            MaintenanceDAL.SetTaskGroupStatus(db, transaction, basicParam.SiteID, taskGroupDraftInfo.TaskGroupID, 'A', basicParam.UserID, currentDate, currentTime, true);

                            transaction.Commit();
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }

                    return 1;//Approved successfully
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while approving task info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", IdentifierID : " + taskGroupfilterInfo.IdentifierID);
                    throw new FaultException(exceptionErrorMessage);
                }
                finally
                {
                    if (dataReaderTaskGroupInfo != null && !dataReaderTaskGroupInfo.IsClosed)
                        dataReaderTaskGroupInfo.Close();
                }
            }
            else
            {
                return 0;
            }
        }

        #endregion

        #region Tasks
        public List<TaskInfo> GetTaskInfo(BasicParam basicParam, TaskGroupFilterInfo taskFilterInfo)
        {
            IDataReader dataReaderTaskInfo = null;
            try
            {
                List<TaskInfo> taskInfoList = new List<TaskInfo>();
                TaskInfo taskInfo = null;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, taskFilterInfo.IdentifierID, taskFilterInfo.VersionNumber, false);

                if (taskGroupModifiedInfo.TaskGroupID > 0)
                {
                    dataReaderTaskInfo = MaintenanceDAL.GetTaskInfo(db, null, taskGroupModifiedInfo.TaskGroupID, taskFilterInfo.TaskID);
                    while (dataReaderTaskInfo.Read())
                    {
                        taskInfo = new TaskInfo();
                        taskInfo.TaskID = Common.GetSafeInt32(dataReaderTaskInfo, "FTASKID");
                        if (taskInfo.TaskID > 0)
                        {
                            taskInfo.TaskName = Common.GetSafeString(dataReaderTaskInfo, "FTASKNAME");
                            taskInfo.Description = Common.GetSafeString(dataReaderTaskInfo, "FDESCRIPTION");
                            taskInfo.SafetyDescription = Common.GetSafeString(dataReaderTaskInfo, "FSAFETYDESCRIPTION");
                            taskInfo.UnitOfTime = (UnitOfTime)Common.GetSafeString(dataReaderTaskInfo, "FUNIT")[0];
                            TimeSpan timeSpan = TimeSpan.FromSeconds(Common.GetSafeInt64(dataReaderTaskInfo, "FESTIMATEDTIME"));
                            switch (taskInfo.UnitOfTime)
                            {
                                case UnitOfTime.Hours:
                                    taskInfo.EstimatedTime = Convert.ToInt64(timeSpan.TotalHours);
                                    break;
                                case UnitOfTime.Minutes:
                                    taskInfo.EstimatedTime = Convert.ToInt64(timeSpan.TotalMinutes);
                                    break;
                                default:
                                    taskInfo.EstimatedTime = Convert.ToInt64(timeSpan.TotalSeconds);
                                    break;
                            }
                            taskInfo.SequenceNum = Common.GetSafeInt32(dataReaderTaskInfo, "FSEQUENCENUM");
                            taskInfo.RemarkEnabled = Common.GetSafeString(dataReaderTaskInfo, "FREMARKENABLED") == "Y" ? true : false;
                            taskInfo.RemarkMandatory = Common.GetSafeString(dataReaderTaskInfo, "FREMARKMANDATORY") == "Y" ? true : false;
                            taskInfo.PictureEnabled = Common.GetSafeString(dataReaderTaskInfo, "FPICTUREENABLED") == "Y" ? true : false;
                            taskInfo.PictureMandatory = Common.GetSafeString(dataReaderTaskInfo, "FPICTUREMANDATORY") == "Y" ? true : false;

                            taskInfo.PPEInfoList = GetTaskPPEInfo(db, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, taskInfo.TaskID);
                            taskInfo.ToolsInfoList = GetTaskToolsInfo(db, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, taskInfo.TaskID);
                            taskInfo.DocumentInfoList = GetTaskDocumentsOrImagesOrVideoInfo(db, basicParam.SiteID, taskInfo.TaskID, taskFilterInfo.IdentifierID);
                            taskInfo.ParameterInfoList = GetTaskParameterInfo(db, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, taskInfo.TaskID);
                            taskInfo.SparePartInfoList = GetTaskSparePartInfo(db, basicParam.SiteID, taskInfo.TaskID);

                            taskInfoList.Add(taskInfo);
                        }
                    }
                    dataReaderTaskInfo.Close();
                }

                return taskInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", TaskID : " + taskFilterInfo.TaskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderTaskInfo != null && !dataReaderTaskInfo.IsClosed)
                    dataReaderTaskInfo.Close();
            }
        }

        private TaskGroupBasicInfo GetTaskGroupInfo(Database db, DbTransaction transanction, int siteID, int identifierID, int versionNumber, bool isApproved)
        {
            IDataReader dataReaderTaskGroupInfo = null;
            try
            {
                TaskGroupBasicInfo taskGroupBasicInfo = new TaskGroupBasicInfo();
                dataReaderTaskGroupInfo = MaintenanceDAL.GetTaskGroupInfo(db, transanction, siteID, identifierID, versionNumber, isApproved);
                if (dataReaderTaskGroupInfo.Read())
                {
                    taskGroupBasicInfo.IdentifierID = identifierID;
                    taskGroupBasicInfo.TaskGroupID = Common.GetSafeInt32(dataReaderTaskGroupInfo, "FTASKGROUPID");
                    taskGroupBasicInfo.TaskGroupName = Common.GetSafeString(dataReaderTaskGroupInfo, "FTASKGROUPNAME");
                    taskGroupBasicInfo.TaskGroupTypeId = Common.GetSafeInt32(dataReaderTaskGroupInfo, "FTASKGROUPTYPEID");
                    taskGroupBasicInfo.TaskGroupStatus = (TaskGroupStatus)Convert.ToChar(Common.GetSafeString(dataReaderTaskGroupInfo, "FSTATUS")[0]);
                }
                dataReaderTaskGroupInfo.Close();
                return taskGroupBasicInfo;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderTaskGroupInfo != null && !dataReaderTaskGroupInfo.IsClosed)
                    dataReaderTaskGroupInfo.Close();
            }
        }

        private List<TaskPPEInfo> GetTaskPPEInfo(Database db, int siteID, int taskGroupID, int taskID)
        {
            IDataReader dataReaderPPEInfo = null;
            try
            {
                string basePPEImagePath = ConfigurationManager.AppSettings["PPEImagePath"].Trim().TrimEnd('/');

                List<TaskPPEInfo> taskPPEInfoList = new List<TaskPPEInfo>();
                TaskPPEInfo taskPPEInfo = null;
                dataReaderPPEInfo = MaintenanceDAL.GetTaskPPEInfo(db, siteID, taskID, taskGroupID);
                while (dataReaderPPEInfo.Read())
                {
                    taskPPEInfo = new TaskPPEInfo();
                    taskPPEInfo.TaskPPEID = Common.GetSafeInt32(dataReaderPPEInfo, "FTASKPPEID");
                    taskPPEInfo.PPEID = Common.GetSafeInt32(dataReaderPPEInfo, "FPPEID");
                    taskPPEInfo.PPEDescription = Common.GetSafeString(dataReaderPPEInfo, "FPPEDESC");
                    string imageName = Common.GetSafeString(dataReaderPPEInfo, "FPPEIMAGENAME");
                    taskPPEInfo.PPEImagePath = basePPEImagePath.TrimEnd('/') + "/" + siteID + "/PPE/" + taskPPEInfo.PPEID + "/Thumbnail/" + imageName;
                    taskPPEInfoList.Add(taskPPEInfo);
                }
                dataReaderPPEInfo.Close();

                return taskPPEInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task ppe info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, ", SiteID : " + siteID + ", TaskGroupID : " + taskGroupID + ", TaskID : " + taskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderPPEInfo != null && !dataReaderPPEInfo.IsClosed)
                    dataReaderPPEInfo.Close();
            }
        }

        private List<TaskToolsInfo> GetTaskToolsInfo(Database db, int siteID, int taskGroupID, int taskID)
        {
            IDataReader dataReaderToolsInfo = null;
            try
            {
                string baseToolsImagePath = ConfigurationManager.AppSettings["ToolsImagePath"].Trim().TrimEnd('/');

                List<TaskToolsInfo> taskToolsInfoList = new List<TaskToolsInfo>();
                TaskToolsInfo taskPPEInfo = null;
                dataReaderToolsInfo = MaintenanceDAL.GetTaskToolsInfo(db, siteID, taskID, taskGroupID);
                while (dataReaderToolsInfo.Read())
                {
                    taskPPEInfo = new TaskToolsInfo();
                    taskPPEInfo.TaskToolsID = Common.GetSafeInt32(dataReaderToolsInfo, "FTASKTOOLSID");
                    taskPPEInfo.ToolsID = Common.GetSafeInt32(dataReaderToolsInfo, "FTOOLSID");
                    taskPPEInfo.ToolsDescription = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSDESC");
                    string imageName = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSIMAGENAME");
                    taskPPEInfo.ToolsImagePath = baseToolsImagePath.TrimEnd('/') + "/" + siteID + "/Thumbnail/" + imageName;
                    taskToolsInfoList.Add(taskPPEInfo);
                }
                dataReaderToolsInfo.Close();

                return taskToolsInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task ppe info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, ", SiteID : " + siteID + ", TaskGroupID : " + taskGroupID + ", TaskID : " + taskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderToolsInfo != null && !dataReaderToolsInfo.IsClosed)
                    dataReaderToolsInfo.Close();
            }
        }

        private List<DocumentInfo> GetTaskDocumentsOrImagesOrVideoInfo(Database db, int siteID, int taskID, int taskIdentifier)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                string documentsPath = ConfigurationManager.AppSettings["MaintenanceTaskGroupDocLocation"].ToString().Trim('/') + "/" + siteID + "/" + taskIdentifier;
                List<DocumentInfo> documentListInfo = new List<DocumentInfo>();
                DocumentInfo documentInfo = null;

                dataReaderInfo = MaintenanceDAL.GetTaskDocumentsOrImagesOrVideoInfo(db, siteID, taskID);
                while (dataReaderInfo.Read())
                {
                    documentInfo = new DocumentInfo();
                    documentInfo.DocumentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                    documentInfo.DocumentName = Common.GetSafeString(dataReaderInfo, "FDOCUMENTNAME");
                    documentInfo.DocumentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(dataReaderInfo, "FDOCUMENTTYPE"));

                    if (documentInfo.DocumentName.Length > 0)
                    {
                        documentInfo.DownloadPath = documentsPath + "/" + documentInfo.DocumentName;
                        if (documentInfo.DocumentType == DocumentType.IMAGE)
                            documentInfo.ThumbnailPath = documentsPath + "/Thumbnail/" + documentInfo.DocumentName;
                    }
                    else
                    {
                        documentInfo.DocumentName = string.Empty;
                        documentInfo.DownloadPath = string.Empty;
                        documentInfo.ThumbnailPath = string.Empty;
                    }

                    documentListInfo.Add(documentInfo);
                }
                dataReaderInfo.Close();

                return documentListInfo;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private List<ParameterInfo> GetTaskParameterInfo(Database db, int siteID, int taskGroupID, int taskID)
        {
            IDataReader dataReaderParameterInfo = null;
            try
            {
                List<ParameterInfo> parameterInfoList = new List<ParameterInfo>();
                ParameterInfo parameterInfo = null;
                dataReaderParameterInfo = MaintenanceDAL.GetTaskParameters(db, siteID, taskGroupID, taskID);
                while (dataReaderParameterInfo.Read())
                {
                    parameterInfo = new ParameterInfo();
                    parameterInfo.ParameterID = Common.GetSafeInt32(dataReaderParameterInfo, "FPARAMETERID");
                    parameterInfo.ParameterName = Common.GetSafeString(dataReaderParameterInfo, "FPARAMNAME");
                    parameterInfo.ParameterType = (ParameterType)Common.GetSafeString(dataReaderParameterInfo, "FTYPE")[0];
                    parameterInfo.IsMandatory = Common.GetSafeString(dataReaderParameterInfo, "FISMANDATORY") == "Y" ? true : false;
                    parameterInfo.SelectionGroupID = Common.GetSafeInt32(dataReaderParameterInfo, "FSELECTIONGROUPID");
                    parameterInfoList.Add(parameterInfo);
                }
                dataReaderParameterInfo.Close();

                return parameterInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task parameter info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, ", SiteID : " + siteID + ", TaskGroupID : " + taskGroupID + ", TaskID : " + taskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderParameterInfo != null && !dataReaderParameterInfo.IsClosed)
                    dataReaderParameterInfo.Close();
            }
        }

        private List<MaintSparePartInfo> GetTaskSparePartInfo(Database Db, int siteID, int taskID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintSparePartInfo> taskSparePartInfoList = new List<MaintSparePartInfo>();
                MaintSparePartInfo sparePartInfo = null;

                dataReaderInfo = MaintenanceDAL.GetTaskSpareParts(db, siteID, taskID);
                while (dataReaderInfo.Read())
                {
                    sparePartInfo = new MaintSparePartInfo();
                    sparePartInfo.MaterialNumber = Common.GetSafeString(dataReaderInfo, "FIDHID");
                    sparePartInfo.MaterialDesc = Common.GetSafeString(dataReaderInfo, "FIDHDESC");
                    sparePartInfo.Quantity = Common.GetSafeDecimal(dataReaderInfo, "FQUANTITY");
                    sparePartInfo.UOM = Common.GetSafeString(dataReaderInfo, "FBASEUOM");
                    taskSparePartInfoList.Add(sparePartInfo);
                }
                dataReaderInfo.Close();

                return taskSparePartInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task spare parts info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, ", SiteID : " + siteID + ", TaskID : " + taskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public TaskGroupIdentifier SaveTaskInfo(BasicParam basicParam, TaskGroupFilterInfo filterInfo, TaskInfo taskInfo)
        {
            TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    /* Validation start*/

                    if (string.IsNullOrEmpty(filterInfo.TaskGroupName))
                    {
                        taskGroupIdentifier.IdentifierID = -1;
                        return taskGroupIdentifier;
                    }
                    if (filterInfo.TaskGroupTypeId <= 0)
                    {
                        taskGroupIdentifier.IdentifierID = -2;
                        return taskGroupIdentifier;
                    }

                    if (string.IsNullOrEmpty(taskInfo.TaskName))
                    {
                        taskGroupIdentifier.IdentifierID = -4;
                        return taskGroupIdentifier;
                    }


                    /*Validation End*/


                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, filterInfo.IdentifierID, filterInfo.VersionNumber, false);
                    int taskGroupID = taskGroupModifiedInfo.TaskGroupID;

                    if (MaintenanceDAL.CheckTaskGroupNameExists(db, null, basicParam.SiteID, filterInfo.TaskGroupName, filterInfo.IdentifierID))
                    {
                        taskGroupIdentifier.IdentifierID = -3;//Group name already exist
                        return taskGroupIdentifier;
                    }

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        DbTransaction transaction = dbConnection.BeginTransaction();
                        try
                        {
                            if (taskGroupModifiedInfo.TaskGroupStatus != TaskGroupStatus.Approved)
                            {
                                MaintenanceDAL.UpdateTaskGroupInfo(db, transaction, basicParam.SiteID, taskGroupID, filterInfo.TaskGroupName, filterInfo.TaskGroupTypeId, basicParam.UserID, currentDate, currentTime);
                            }

                            if (!MaintenanceDAL.CheckTaskNameExists(db, transaction, taskGroupID, taskInfo.TaskID, taskInfo.TaskName))
                            {
                                taskGroupIdentifier.VersionNumber = filterInfo.VersionNumber;

                                if (taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.Approved)
                                { // Making all ids zero, because need to insert freash/new record
                                    int versionNumber = 0;
                                    List<TaskMappingInfo> taskMappingList = null;
                                    List<int> toReturnTaskMappingList = new List<int>();

                                    taskGroupID = CreateCopyOfTaskGroup(db, transaction, basicParam.SiteID, basicParam.UserID, filterInfo.IdentifierID, taskGroupID, taskInfo.TaskID, filterInfo.TaskGroupName, filterInfo.TaskGroupTypeId, toReturnTaskMappingList, out versionNumber, out taskMappingList);
                                    taskGroupIdentifier.VersionNumber = versionNumber;
                                    taskInfo.TaskID = 0;
                                    foreach (TaskPPEInfo ppeInfo in taskInfo.PPEInfoList)
                                    {
                                        ppeInfo.TaskPPEID = 0;
                                    }
                                    foreach (TaskToolsInfo toolsInfo in taskInfo.ToolsInfoList)
                                    {
                                        toolsInfo.TaskToolsID = 0;
                                    }
                                    foreach (DocumentInfo documentInfo in taskInfo.DocumentInfoList)
                                    {
                                        documentInfo.DocumentID = 0;
                                    }
                                    foreach (ParameterInfo parameterInfo in taskInfo.ParameterInfoList)
                                    {
                                        parameterInfo.ParameterID = 0;
                                    }
                                }
                                taskGroupIdentifier.IdentifierID = filterInfo.IdentifierID;
                                InsertUpdateTaskInfoWithDependencies(db, transaction, basicParam, taskGroupID, taskInfo, TaskGroupRefType.TASK, currentDate, currentTime, ref taskGroupIdentifier);

                                if (taskGroupIdentifier.IdentifierID < 0)
                                {
                                    return taskGroupIdentifier;
                                }
                            }
                            else
                            {
                                transaction.Rollback();
                                taskGroupIdentifier.IdentifierID = -6;
                                return taskGroupIdentifier;// task name already exists
                            }
                            transaction.Commit();
                            return taskGroupIdentifier;
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }

                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while saving task info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", IdentifierID : " + filterInfo.IdentifierID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return taskGroupIdentifier;
            }
        }

        private void InsertUpdateTaskInfoWithDependencies(Database db, DbTransaction transaction, BasicParam basicParam, int taskGroupID, TaskInfo taskInfo, TaskGroupRefType taskGroupRefType, int currentDate, int currentTime, ref TaskGroupIdentifier taskGroupIdentifier)
        {
            try
            {
                double estimatedTimeInSeconds = 0;
                switch (taskInfo.UnitOfTime)
                {
                    case UnitOfTime.Hours:
                        TimeSpan hourTimeSpan = TimeSpan.FromHours(taskInfo.EstimatedTime);
                        estimatedTimeInSeconds = hourTimeSpan.TotalSeconds;
                        break;
                    case UnitOfTime.Minutes:
                        TimeSpan minTimeSpan = TimeSpan.FromMinutes(taskInfo.EstimatedTime);
                        estimatedTimeInSeconds = minTimeSpan.TotalSeconds;
                        break;
                    case UnitOfTime.Seconds:
                        estimatedTimeInSeconds = taskInfo.EstimatedTime;
                        break;
                }

                #region Task
                if (taskInfo.TaskID == 0)
                {

                    taskInfo.TaskID = MaintenanceDAL.InsertTaskInfo(db, transaction, basicParam.SiteID, taskGroupID, taskInfo.TaskName, taskInfo.Description, taskInfo.SafetyDescription, estimatedTimeInSeconds,
                        Convert.ToChar(taskInfo.UnitOfTime), taskInfo.RemarkEnabled, taskInfo.RemarkMandatory, taskInfo.PictureEnabled, taskInfo.PictureMandatory, taskInfo.SequenceNum, basicParam.UserID, currentDate, currentTime);
                }
                else
                {
                    MaintenanceDAL.UpdateTaskInfo(db, transaction, taskInfo.TaskID, taskGroupID, taskInfo.TaskName, taskInfo.Description, taskInfo.SafetyDescription, estimatedTimeInSeconds,
                        Convert.ToChar(taskInfo.UnitOfTime), taskInfo.RemarkEnabled, taskInfo.RemarkMandatory, taskInfo.PictureEnabled, taskInfo.PictureMandatory, taskInfo.SequenceNum, basicParam.UserID, currentDate, currentTime);
                }
                taskGroupIdentifier.SelectedTaskID = taskInfo.TaskID;
                #endregion

                #region Task PPE
                List<int> existingPPENumberList = GetExistingTaskPPENumberList(db, basicParam.SiteID, taskInfo.TaskID, taskGroupID);
                if (taskInfo.PPEInfoList != null && taskInfo.PPEInfoList.Count > 0)
                {
                    foreach (TaskPPEInfo ppeInfo in taskInfo.PPEInfoList)
                    {
                        if (ppeInfo.TaskPPEID == 0)
                        {
                            MaintenanceDAL.InsertTaskPPEInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupID, ppeInfo.PPEID, basicParam.UserID, currentDate, currentTime);
                        }
                        else
                        {
                            existingPPENumberList.Remove(ppeInfo.TaskPPEID);
                        }
                    }
                }
                if (existingPPENumberList.Count > 0)
                {
                    MaintenanceDAL.DeleteTaskPPEInfo(db, transaction, taskGroupID, taskInfo.TaskID, string.Join(",", existingPPENumberList), basicParam.UserID, currentDate, currentTime);
                }
                #endregion

                #region Task Tools
                List<int> existingToolsNumberList = GetExistingTaskToolsNumberList(db, basicParam.SiteID, taskInfo.TaskID, taskGroupID);
                if (taskInfo.ToolsInfoList != null && taskInfo.ToolsInfoList.Count > 0)
                {

                    foreach (TaskToolsInfo toolsInfo in taskInfo.ToolsInfoList)
                    {
                        if (toolsInfo.TaskToolsID == 0)
                        {
                            MaintenanceDAL.InsertTaskToolsInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupID, toolsInfo.ToolsID, basicParam.UserID, currentDate, currentTime);
                        }
                        else
                        {
                            existingToolsNumberList.Remove(toolsInfo.TaskToolsID);
                        }
                    }
                }
                if (existingToolsNumberList.Count > 0)
                {
                    MaintenanceDAL.DeleteTaskToolsInfo(db, transaction, taskGroupID, taskInfo.TaskID, string.Join(",", existingToolsNumberList), basicParam.UserID, currentDate, currentTime);
                }

                #endregion

                #region Task Document
                List<int> existingDocsNumberList = GetExistingTaskDocumentsList(db, basicParam.SiteID, taskInfo.TaskID);
                if (taskInfo.DocumentInfoList != null && taskInfo.DocumentInfoList.Count > 0)
                {

                    foreach (DocumentInfo documentInfo in taskInfo.DocumentInfoList)
                    {
                        if (documentInfo.DocumentID == 0)
                        {
                            MaintenanceDAL.InsertDocumentsAndImagesInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupRefType.ToString(), documentInfo.DocumentName, Convert.ToChar(documentInfo.DocumentType), basicParam.UserID, currentDate, currentTime);
                        }
                        else
                        {
                            existingDocsNumberList.Remove(documentInfo.DocumentID);
                        }
                    }
                }
                if (existingDocsNumberList.Count > 0)
                {
                    foreach (int documentID in existingDocsNumberList)
                    {
                        MaintenanceDAL.InActivateDocumentsInfo(db, transaction, basicParam.SiteID, documentID, basicParam.UserID, currentDate, currentTime);
                    }
                }
                #endregion

                #region Task Parameter
                List<int> existingParameterList = GetExistingTaskParamIdList(db, basicParam.SiteID, taskInfo.TaskID, taskGroupID);
                if (taskInfo.ParameterInfoList != null && taskInfo.ParameterInfoList.Count > 0)
                {
                    foreach (ParameterInfo parameterInfo in taskInfo.ParameterInfoList)
                    {
                        int selectionGroupID = parameterInfo.SelectionGroupID < 0 ? 0 : parameterInfo.SelectionGroupID;
                        if (!MaintenanceDAL.CheckTasksParameterExists(db, transaction, basicParam.SiteID, parameterInfo.ParameterID, taskInfo.TaskID, taskGroupID, parameterInfo.ParameterName))
                        {
                            if (parameterInfo.ParameterID == 0)
                            {
                                MaintenanceDAL.InsertTasksParameterInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupID, parameterInfo.ParameterName, parameterInfo.IsMandatory, Convert.ToChar(parameterInfo.ParameterType),
                                    selectionGroupID, basicParam.UserID, currentDate, currentTime);
                            }
                            else
                            {
                                MaintenanceDAL.UpdateTasksParameterInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupID, parameterInfo.ParameterID, parameterInfo.ParameterName,
                                    parameterInfo.IsMandatory, Convert.ToChar(parameterInfo.ParameterType), selectionGroupID, basicParam.UserID, currentDate, currentTime);
                                existingParameterList.Remove(parameterInfo.ParameterID);
                            }
                        }
                        else
                        {
                            transaction.Rollback();
                            taskGroupIdentifier.IdentifierID = -7;// task parameter name already exists
                            return;
                        }
                    }
                }
                if (existingParameterList.Count > 0)
                {
                    MaintenanceDAL.DeleteTasksParameterList(db, transaction, basicParam.SiteID, taskGroupID, taskInfo.TaskID, string.Join(",", existingParameterList), basicParam.UserID, currentDate, currentTime);
                }
                #endregion

                #region Task Spare part
                List<MaintSparePartInfo> existingSparePartList = GetTaskSparePartInfo(db, basicParam.SiteID, taskInfo.TaskID);
                if (taskInfo.SparePartInfoList != null && taskInfo.SparePartInfoList.Count > 0)
                {
                    foreach (MaintSparePartInfo sparePartInfo in taskInfo.SparePartInfoList)
                    {
                        if (MaintenanceDAL.CheckTaskSparePartExists(db, transaction, basicParam.SiteID, taskInfo.TaskID, sparePartInfo.MaterialNumber, false))
                        {
                            MaintenanceDAL.UpdateTaskSparePart(db, transaction, basicParam.SiteID, taskInfo.TaskID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, basicParam.UserID, currentDate, currentTime);
                            existingSparePartList.RemoveAll(item => item.MaterialNumber == sparePartInfo.MaterialNumber);
                        }
                        else
                            MaintenanceDAL.InsertTaskSparePartInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, basicParam.UserID, currentDate, currentTime);
                    }
                }
                if (existingSparePartList.Count > 0)
                {
                    foreach (MaintSparePartInfo sparePartInfo in existingSparePartList)
                        MaintenanceDAL.DeleteTaskSparePartInfo(db, transaction, basicParam.SiteID, taskInfo.TaskID, basicParam.UserID, currentDate, currentTime, sparePartInfo.MaterialNumber);
                }
                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private int CreateCopyOfTaskGroup(Database db, DbTransaction transaction, int siteID, int userID, int identifierID, int taskGroupID, int currentTaskID, string taskGroupName, int groupTypeID, List<int> toReturnTaskMappingIDList, out int versionNumber, out List<TaskMappingInfo> taskMappingList)
        {
            IDataReader dataReaderTaskGroupInfo = null;
            try
            {
                int newTaskGroupID = 0;
                int currentDate = 0;
                int currentTime = 0;
                bool isMappingTaskRequired = false;
                taskMappingList = new List<TaskMappingInfo>();

                Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);
                List<int> taskList = new List<int>();

                versionNumber = MaintenanceDAL.GetNewVersionNumber(db, transaction, identifierID) + 1;
                newTaskGroupID = MaintenanceDAL.InsertTaskGroupInfo(db, transaction, siteID, taskGroupName, groupTypeID, identifierID, versionNumber, (char)TaskGroupStatus.MODIFIED, TaskGroupRefType.TASK.ToString(), 0, userID, currentDate, currentTime);

                dataReaderTaskGroupInfo = MaintenanceDAL.GetTaskListInfo(db, transaction, siteID, taskGroupID);
                while (dataReaderTaskGroupInfo.Read())
                {
                    int taskId = Common.GetSafeInt32(dataReaderTaskGroupInfo, "FTASKID");
                    if (taskId != currentTaskID)
                    {
                        taskList.Add(taskId);
                    }
                }
                dataReaderTaskGroupInfo.Close();

                if (toReturnTaskMappingIDList.Count > 0)
                {
                    isMappingTaskRequired = true;
                }
                if (taskList.Count > 0)
                {
                    foreach (int taskID in taskList)
                    {
                        int newTaskID = MaintenanceDAL.GetNewTaskID(db);
                        if (isMappingTaskRequired)
                        {
                            TaskMappingInfo taskMappingInfo = new TaskMappingInfo();
                            foreach (int requiredTaskIdMapping in toReturnTaskMappingIDList)
                            {
                                if (taskID == requiredTaskIdMapping)
                                {
                                    taskMappingInfo.TaskID = taskID;
                                    taskMappingInfo.MappedTaskID = newTaskID;
                                    taskMappingList.Add(taskMappingInfo);
                                }
                            }
                        }
                        MaintenanceDAL.CreateCopyOfTaskInfo(db, transaction, taskGroupID, newTaskGroupID, taskID, newTaskID, userID, currentDate, currentTime);
                        MaintenanceDAL.CreateCopyOfTaskPPEInfo(db, transaction, taskGroupID, newTaskGroupID, taskID, newTaskID, userID, currentDate, currentTime);
                        MaintenanceDAL.CreateCopyOfTaskToolsInfo(db, transaction, taskGroupID, newTaskGroupID, taskID, newTaskID, userID, currentDate, currentTime);
                        MaintenanceDAL.CreateCopyOfTaskDocumentInfo(db, transaction, siteID, taskID, newTaskID, userID, currentDate, currentTime);
                        MaintenanceDAL.CreateCopyOfParameterInfo(db, transaction, siteID, taskGroupID, newTaskGroupID, taskID, newTaskID, userID, currentDate, currentTime);
                        MaintenanceDAL.CreateCopyOfTaskSparePartInfo(db, transaction, siteID, taskID, newTaskID, userID, currentDate, currentTime);
                    }
                }

                return newTaskGroupID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderTaskGroupInfo != null && !dataReaderTaskGroupInfo.IsClosed)
                    dataReaderTaskGroupInfo.Close();
            }

        }


        private List<int> GetExistingTaskPPENumberList(Database db, int siteID, int taskID, int taskGroupID)
        {
            IDataReader dataReaderTaskPPEInfo = null;
            try
            {
                List<int> ppeNumberList = new List<int>();
                dataReaderTaskPPEInfo = MaintenanceDAL.GetTaskPPEInfo(db, siteID, taskID, taskGroupID);
                while (dataReaderTaskPPEInfo.Read())
                {
                    int ppeNumber = Common.GetSafeInt32(dataReaderTaskPPEInfo, "FTASKPPEID");
                    if (!ppeNumberList.Contains(ppeNumber))
                        ppeNumberList.Add(ppeNumber);
                }
                dataReaderTaskPPEInfo.Close();

                return ppeNumberList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderTaskPPEInfo != null && !dataReaderTaskPPEInfo.IsClosed)
                    dataReaderTaskPPEInfo.Close();
            }
        }

        private List<int> GetExistingTaskToolsNumberList(Database db, int siteID, int taskID, int taskGroupID)
        {
            IDataReader dataReaderTaskToolsInfo = null;
            try
            {
                List<int> toolsNumberList = new List<int>();
                dataReaderTaskToolsInfo = MaintenanceDAL.GetTaskToolsInfo(db, siteID, taskID, taskGroupID);
                while (dataReaderTaskToolsInfo.Read())
                {
                    int toolsNumber = Common.GetSafeInt32(dataReaderTaskToolsInfo, "FTASKTOOLSID");
                    if (!toolsNumberList.Contains(toolsNumber))
                        toolsNumberList.Add(toolsNumber);
                }
                dataReaderTaskToolsInfo.Close();

                return toolsNumberList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderTaskToolsInfo != null && !dataReaderTaskToolsInfo.IsClosed)
                    dataReaderTaskToolsInfo.Close();
            }
        }

        private List<int> GetExistingTaskDocumentsList(Database db, int siteID, int taskID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                List<int> documnetNumberList = new List<int>();
                dataReaderInfo = MaintenanceDAL.GetTaskDocumentsOrImagesOrVideoInfo(db, siteID, taskID);
                while (dataReaderInfo.Read())
                {
                    int documentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                    if (!documnetNumberList.Contains(documentID))
                        documnetNumberList.Add(documentID);
                }
                dataReaderInfo.Close();

                return documnetNumberList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private List<int> GetExistingTaskParamIdList(Database db, int siteID, int taskID, int taskGroupID)
        {
            IDataReader dataReaderParameterIDInfo = null;
            try
            {
                List<int> paraemetrIDList = new List<int>();
                dataReaderParameterIDInfo = MaintenanceDAL.GetTaskParameters(db, siteID, taskGroupID, taskID);
                while (dataReaderParameterIDInfo.Read())
                {
                    int parameterID = Common.GetSafeInt32(dataReaderParameterIDInfo, "FPARAMETERID");
                    if (!paraemetrIDList.Contains(parameterID))
                        paraemetrIDList.Add(parameterID);
                }
                dataReaderParameterIDInfo.Close();

                return paraemetrIDList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderParameterIDInfo != null && !dataReaderParameterIDInfo.IsClosed)
                    dataReaderParameterIDInfo.Close();
            }
        }

        public TaskGroupIdentifier DeleteTaskInfo(BasicParam basicParam, TaskGroupFilterInfo filterInfo)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, filterInfo.IdentifierID, filterInfo.VersionNumber, false);

                    if (taskGroupModifiedInfo.TaskGroupID > 0)
                    {
                        taskGroupIdentifier.IdentifierID = filterInfo.IdentifierID;
                        using (DbConnection dbConnection = db.CreateConnection())
                        {
                            dbConnection.Open();
                            DbTransaction transaction = dbConnection.BeginTransaction();
                            try
                            {
                                if (taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.Approved)
                                {
                                    int versionNumber = 0;
                                    List<TaskMappingInfo> taskMappingList = null;
                                    List<int> toReturnTaskMappingList = new List<int>();
                                    toReturnTaskMappingList.Add(filterInfo.TaskID);

                                    int newTaskGroupID = CreateCopyOfTaskGroup(db, transaction, basicParam.SiteID, basicParam.UserID, filterInfo.IdentifierID, taskGroupModifiedInfo.TaskGroupID, 0, taskGroupModifiedInfo.TaskGroupName, taskGroupModifiedInfo.TaskGroupTypeId, toReturnTaskMappingList, out versionNumber, out taskMappingList);
                                    int taskMappedReturnID = taskMappingList[0].MappedTaskID;
                                    DeleteTaskInfoWithDependencies(db, transaction, newTaskGroupID, taskMappedReturnID, currentDate, currentTime, basicParam.SiteID, basicParam.UserID);
                                    taskGroupIdentifier.VersionNumber = versionNumber;
                                }
                                else
                                {
                                    DeleteTaskInfoWithDependencies(db, transaction, taskGroupModifiedInfo.TaskGroupID, filterInfo.TaskID, currentDate, currentTime, basicParam.SiteID, basicParam.UserID);
                                    MaintenanceDAL.SetTaskGroupStatus(db, transaction, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, Convert.ToChar(taskGroupModifiedInfo.TaskGroupStatus), basicParam.UserID, currentDate, currentTime, false);
                                    taskGroupIdentifier.VersionNumber = filterInfo.VersionNumber;
                                }
                                transaction.Commit();
                                return taskGroupIdentifier;
                            }
                            catch
                            {
                                transaction.Rollback();
                                throw;
                            }
                            finally
                            {
                                dbConnection.Close();
                            }
                        }
                    }
                    else
                    {
                        return taskGroupIdentifier;
                    }
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while deleting task info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", IdentifierID : " + filterInfo.IdentifierID + ", TaskID : " + filterInfo.TaskID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return null;
            }
        }

        private void DeleteTaskInfoWithDependencies(Database db, DbTransaction transaction, int taskGroupID, int taskID, int currentDate, int currentTime, int siteID, int userID)
        {
            IDataReader dataReaderTaskInfo = null;

            try
            {

                MaintenanceDAL.DeleteTaskPPEInfo(db, transaction, taskGroupID, taskID, string.Empty, userID, currentDate, currentTime);
                MaintenanceDAL.DeleteTaskToolsInfo(db, transaction, taskGroupID, taskID, string.Empty, userID, currentDate, currentTime);
                if (taskID > 0)
                {
                    MaintenanceDAL.DeleteTaskDocumentsInfo(db, transaction, siteID, taskID, userID, currentDate, currentTime);
                }
                else
                {
                    dataReaderTaskInfo = MaintenanceDAL.GetTaskListInfo(db, transaction, siteID, taskGroupID);
                    while (dataReaderTaskInfo.Read())
                    {
                        int currentTaskID = Common.GetSafeInt32(dataReaderTaskInfo, "FTASKID");
                        MaintenanceDAL.DeleteTaskDocumentsInfo(db, transaction, siteID, currentTaskID, userID, currentDate, currentTime);
                    }
                    dataReaderTaskInfo.Close();

                }

                MaintenanceDAL.DeleteTasksParameterList(db, transaction, siteID, taskGroupID, taskID, string.Empty, userID, currentDate, currentTime);
                MaintenanceDAL.DeleteTaskSparePartInfo(db, transaction, siteID, taskID, userID, currentDate, currentTime, string.Empty);
                MaintenanceDAL.DeleteTaskInfo(db, transaction, taskGroupID, taskID, userID, currentDate, currentTime);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (dataReaderTaskInfo != null && !dataReaderTaskInfo.IsClosed)
                    dataReaderTaskInfo.Close();
            }
        }

        public TaskGroupIdentifier SaveTaskSequenceInfo(BasicParam basicParam, TaskGroupFilterInfo filterInfo, List<TaskBasicInfo> taskBasicInfoList)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                    TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, null, basicParam.SiteID, filterInfo.IdentifierID, filterInfo.VersionNumber, false);
                    int taskGroupID = taskGroupModifiedInfo.TaskGroupID;

                    if (taskBasicInfoList.Count > 0)
                    {
                        taskGroupIdentifier.IdentifierID = filterInfo.IdentifierID;

                        using (DbConnection dbConnection = db.CreateConnection())
                        {
                            dbConnection.Open();
                            DbTransaction transaction = dbConnection.BeginTransaction();
                            try
                            {
                                if (taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.Approved)
                                {
                                    int versionNumber = 0;
                                    List<TaskMappingInfo> taskMappingList = null;
                                    List<int> toReturnTaskMappingList = new List<int>();
                                    foreach (TaskBasicInfo taskBasicInfo in taskBasicInfoList)
                                    {
                                        toReturnTaskMappingList.Add(taskBasicInfo.TaskID);
                                    }

                                    int newTaskGroupID = CreateCopyOfTaskGroup(db, transaction, basicParam.SiteID, basicParam.UserID, filterInfo.IdentifierID, taskGroupID, 0, taskGroupModifiedInfo.TaskGroupName, taskGroupModifiedInfo.TaskGroupTypeId, toReturnTaskMappingList, out versionNumber, out taskMappingList);
                                    int mappedTaskID = 0;
                                    foreach (TaskBasicInfo taskBasicInfo in taskBasicInfoList)
                                    {
                                        mappedTaskID = taskMappingList.Where(i => i.TaskID == taskBasicInfo.TaskID).Select(i => i.MappedTaskID).FirstOrDefault();
                                        MaintenanceDAL.UpdateTaskSequence(db, transaction, mappedTaskID, newTaskGroupID, taskBasicInfo.SequenceNum, basicParam.UserID, currentDate, currentTime);
                                    }
                                    taskGroupIdentifier.VersionNumber = versionNumber;
                                }
                                else
                                {
                                    foreach (TaskBasicInfo taskBasicInfo in taskBasicInfoList)
                                    {
                                        MaintenanceDAL.UpdateTaskSequence(db, transaction, taskBasicInfo.TaskID, taskGroupID, taskBasicInfo.SequenceNum, basicParam.UserID, currentDate, currentTime);
                                    }
                                    taskGroupIdentifier.VersionNumber = filterInfo.VersionNumber;
                                }
                                transaction.Commit();

                            }
                            catch
                            {
                                transaction.Rollback();
                                throw;
                            }
                            finally
                            {
                                dbConnection.Close();
                            }
                        }
                    }
                    return taskGroupIdentifier;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while saving task sequence info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID + ", IdentifierID : " + filterInfo.IdentifierID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return null;
            }
        }
        #endregion

        public List<InstructionSelectorInfo> GetPPIDetails(BasicParam basicParam)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                IDataReader dataReaderInstSeleInfo = null;
                try
                {
                    List<InstructionSelectorInfo> instructionSeleList = new List<InstructionSelectorInfo>();
                    InstructionSelectorInfo instructionSelectorInfo = null;
                    string baseImagePath = ConfigurationManager.AppSettings["PPEImagePath"].Trim();

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    dataReaderInstSeleInfo = MaintenanceDAL.GetPPEInfo(db, basicParam.SiteID);
                    while (dataReaderInstSeleInfo.Read())
                    {
                        instructionSelectorInfo = new InstructionSelectorInfo();
                        instructionSelectorInfo.InstructionID = Common.GetSafeInt32(dataReaderInstSeleInfo, "FPPEID");
                        instructionSelectorInfo.InstructionName = Common.GetSafeString(dataReaderInstSeleInfo, "FPPEDESC");
                        string imageName = Common.GetSafeString(dataReaderInstSeleInfo, "FPPEIMAGENAME");
                        instructionSelectorInfo.ImagePath = baseImagePath.TrimEnd('/') + "/" + basicParam.SiteID + "/PPE/" + instructionSelectorInfo.InstructionID + "/Thumbnail/" + imageName;
                        instructionSeleList.Add(instructionSelectorInfo);
                    }
                    dataReaderInstSeleInfo.Close();
                    return instructionSeleList;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while fetching ppe info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
                finally
                {
                    if (dataReaderInstSeleInfo != null && !dataReaderInstSeleInfo.IsClosed)
                        dataReaderInstSeleInfo.Close();
                }
            }
            else
            {
                return null;
            }

        }

        public List<InstructionSelectorInfo> GetToolsDetails(BasicParam basicParam)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                IDataReader dataReaderToolsInfo = null;
                try
                {
                    List<InstructionSelectorInfo> instructionSeleList = new List<InstructionSelectorInfo>();
                    InstructionSelectorInfo instructionSelectorInfo = null;
                    string baseImagePath = ConfigurationManager.AppSettings["ToolsImagePath"].Trim();

                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                    dataReaderToolsInfo = MaintenanceDAL.GetToolsInfo(db, basicParam.SiteID);
                    while (dataReaderToolsInfo.Read())
                    {
                        instructionSelectorInfo = new InstructionSelectorInfo();
                        instructionSelectorInfo.InstructionID = Common.GetSafeInt32(dataReaderToolsInfo, "FTOOLSID");
                        instructionSelectorInfo.InstructionName = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSDESC");
                        string imageName = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSIMAGENAME");
                        instructionSelectorInfo.ImagePath = baseImagePath.TrimEnd('/') + "/" + basicParam.SiteID + "/Thumbnail/" + imageName;
                        instructionSeleList.Add(instructionSelectorInfo);
                    }
                    dataReaderToolsInfo.Close();
                    return instructionSeleList;
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintainenceService", "Error while fetching tools info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID + ", SiteID : " + basicParam.SiteID);
                    throw new FaultException(exceptionErrorMessage);
                }
                finally
                {
                    if (dataReaderToolsInfo != null && !dataReaderToolsInfo.IsClosed)
                        dataReaderToolsInfo.Close();
                }
            }
            else
            {
                return null;
            }

        }
        #region Download Template & upload

        public string DownloadSOPTemplate(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "SOPInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadExcelTemplate asyncSopTemplate = new DownloadExcelTemplate(GetTaskGroupExcelTemplate);
                asyncSopTemplate.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }
        private void GetTaskGroupExcelTemplate(Database db, BasicParam basicParam, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];

                string folderLocation = path + fileName;
                System.IO.Directory.CreateDirectory(folderLocation);
                string readMeTxtFile = folderLocation + "\\Read Me.txt";
                using (FileStream fStream = new FileStream(readMeTxtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write(Language_Resources.TaskGroup_Resource.uploadReadme);
                        sWriter.Close();
                    }
                    fStream.Close();
                }

                System.IO.Directory.CreateDirectory(folderLocation + "\\TaskReferenceID_1");
                System.IO.Directory.CreateDirectory(folderLocation + "\\TaskReferenceID_2");
                string sopExcelFile = folderLocation + "\\Upload_Template_Task_SOP.xls";
                FileInfo templateFile = new FileInfo(sopExcelFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(sopExcelFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    ExcelWorksheet worksheetSop = package.Workbook.Worksheets.Add("SOP");
                    BindSOPExcelHeaderInfo(db, basicParam.SiteID, worksheetSop, colFromHex, package, rowIndex, columnIndex, minValue);

                    ExcelWorksheet worksheetSopSpareParts = package.Workbook.Worksheets.Add("SOP SpareParts");
                    BindSOP_SparePartsExcelHeaderInfo(db, basicParam.SiteID, worksheetSopSpareParts, colFromHex, package, rowIndex, columnIndex, minValue);

                    ExcelWorksheet worksheetSopParam = package.Workbook.Worksheets.Add("SOP Parameters");
                    BindSOP_ParameterExcelHeaderInfo(db, basicParam.SiteID, worksheetSopParam, colFromHex, package, rowIndex, columnIndex, minValue);

                    ExcelWorksheet worksheetLookup = package.Workbook.Worksheets.Add("Lookup");
                    BindLookupExcelHeaderInfo(db, basicParam.SiteID, worksheetLookup, colFromHex, package, rowIndex, columnIndex, minValue);

                    package.Save();
                    package.Dispose();
                }


                string zipPath = folderLocation + ".zip";
                ZipFile.CreateFromDirectory(folderLocation, zipPath, System.IO.Compression.CompressionLevel.Fastest, true);


                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading sop excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }
        private void BindSOPExcelHeaderInfo(Database db, int siteID, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                //Get all distinct category types
                List<string> sopTypeList = new List<string>();
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.TASKGRP_TYPE.ToString(), 0, 0, "MasterDataName_asc");
                while (dataReaderInfo.Read())
                {
                    sopTypeList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();

                List<string> unitOfTimeList = Enum.GetNames(typeof(UnitOfTime)).ToList();

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.sopName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.sopName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.sopType;
                Common.BindExcelCellListData(package, worksheet, "sopType", columnIndex, sopTypeList, true);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.taskName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.taskName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.stepSequence;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 3, Language_Resources.TaskGroup_Resource.stepSequence, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                worksheet.Column(columnIndex).Style.Numberformat.Format = "@";
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.uploadDocumentReference;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 50, Language_Resources.TaskGroup_Resource.uploadDocumentReference, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.estimatedTime;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 7, Language_Resources.TaskGroup_Resource.estimatedTime, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                worksheet.Column(columnIndex).Style.Numberformat.Format = "@";
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.unit;
                Common.BindExcelCellListData(package, worksheet, "unit", columnIndex, unitOfTimeList, false);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.taskDescription;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 1000, Language_Resources.TaskGroup_Resource.taskDescription, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 50;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.safetyInstructions;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 1000, Language_Resources.TaskGroup_Resource.safetyInstructions, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 50;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.ppeImageName + Language_Resources.TaskGroup_Resource.separatedByComma;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 1000, Language_Resources.TaskGroup_Resource.ppeImageName + Language_Resources.TaskGroup_Resource.separatedByComma, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 50;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.toolsImageName + Language_Resources.TaskGroup_Resource.separatedByComma;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 1000, Language_Resources.TaskGroup_Resource.toolsImageName + Language_Resources.TaskGroup_Resource.separatedByComma, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 50;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.enableRemark;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "YesNoRemarks", columnIndex, new List<string> { "No", "Yes" }, false);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.isRemarkMandatory;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "YesNoRemarksMandatory", columnIndex, new List<string> { "No", "Yes" }, false);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.enableTakePicture;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "YesNoTakePic", columnIndex, new List<string> { "No", "Yes" }, false);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.isPictureMandatory;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "YesNoPicMandatory", columnIndex, new List<string> { "No", "Yes" }, false);


                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }
        private void BindSOP_SparePartsExcelHeaderInfo(Database db, int siteID, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                #region Binding Material Code and UOM list
                List<string> materialCodeList = new List<string>();
                dataReaderInfo = MaintenanceDAL.GetSparePartMaterialDetails(db, siteID, string.Empty);
                while (dataReaderInfo.Read())
                {
                    materialCodeList.Add(Common.GetSafeString(dataReaderInfo, "FIDHID"));
                }
                dataReaderInfo.Close();
                #endregion

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.sopName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.sopName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.taskName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.taskName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.materialCode;
                Common.BindExcelCellListData(package, worksheet, "materialCode", columnIndex, materialCodeList, false);
                worksheet.Column(columnIndex).Width = 30;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.quantity;
                worksheet.Column(columnIndex).Width = 15;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", 0, 10, Language_Resources.MeasuringPoint_Resource.maxTextLength, ExcelDataValidation.DecimalValidationWithMaxLength);
                columnIndex++;

                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }
        private void BindSOP_ParameterExcelHeaderInfo(Database db, int siteID, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                //Get all distinct category types
                List<string> seletionCodeList = new List<string>();
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.GROUPCODE.ToString(), 0, 0, "MasterDataName_asc");
                while (dataReaderInfo.Read())
                {
                    seletionCodeList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();

                List<string> parameterTypeList = Enum.GetNames(typeof(ParameterType)).ToList();

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.sopName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.sopName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.taskName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.taskName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.parameterName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 150, Language_Resources.TaskGroup_Resource.parameterName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.isParameterMandatory;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "YesNo", columnIndex, new List<string> { "No", "Yes" }, false);
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.parameterType;
                Common.BindExcelCellListData(package, worksheet, "parameterType", columnIndex, parameterTypeList, false);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.selectionCode;
                Common.BindExcelCellListData(package, worksheet, "selectionCode", columnIndex, seletionCodeList, false);
                worksheet.Column(columnIndex).Width = 20;

                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }
        private void BindLookupExcelHeaderInfo(Database db, int siteID, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.ppeImageName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.ppeImageName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                worksheet.Cells[rowIndex, columnIndex].Style.Font.Bold = true;
                worksheet.Cells[rowIndex, columnIndex].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[rowIndex, columnIndex].Style.Fill.BackgroundColor.SetColor(colFromHex);

                dataReaderInfo = MaintenanceDAL.GetPPEInfo(db, siteID);
                while (dataReaderInfo.Read())
                {
                    rowIndex++;
                    worksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FPPEDESC");

                }
                dataReaderInfo.Close();

                columnIndex++;
                rowIndex = 1;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.TaskGroup_Resource.toolsImageName;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 100, Language_Resources.TaskGroup_Resource.toolsImageName, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                worksheet.Cells[rowIndex, columnIndex].Style.Font.Bold = true;
                worksheet.Cells[rowIndex, columnIndex].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[rowIndex, columnIndex].Style.Fill.BackgroundColor.SetColor(colFromHex);

                dataReaderInfo = MaintenanceDAL.GetToolsInfo(db, siteID);
                while (dataReaderInfo.Read())
                {
                    rowIndex++;
                    worksheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderInfo, "FTOOLSDESC");
                }
                dataReaderInfo.Close();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #region Upload Excel Info

        public string UploadTaskGroupZip(BasicParam basicParam, string fileName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadZipFilesInfo asyncTaskGroupZip = new UploadZipFilesInfo(UploadTaskGroupZipFile);
                AsyncCallback cb = new AsyncCallback(send);
                asyncTaskGroupZip.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void UploadTaskGroupZipFile(Database db, BasicParam basicParam, string fileName)
        {
            int inserted = 0;
            int updated = 0;
            int failure = 0;
            int deleted = 0;

            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;

            string paramFailureMessage = string.Empty;
            string spareFailureMessage = string.Empty;
            int paramFailure = 0;
            int spareFailure = 0;

            IDataReader dataReaderTaskInfo = null;
            string logPath = ConfigurationManager.AppSettings["LogFileLocation"];

            try
            {
                int currentDate = 0;
                int currentTime = 0;

                string taskDocumentPath = string.Empty;
                string subDirectoryName = string.Empty;

                string sourceDocumentPath = logPath + fileName;
                string uploadSOPDocumentDestPath = sourceDocumentPath + "\\UploadSOPDocuments";

                ZipFile.ExtractToDirectory(sourceDocumentPath + ".zip", sourceDocumentPath);

                //taking inside folder name of extracted zip folder.
                foreach (string subDirectories in Directory.GetDirectories(sourceDocumentPath))
                {
                    subDirectoryName = subDirectories.Remove(0, sourceDocumentPath.Length);
                }

                string extractDestPath = sourceDocumentPath + subDirectoryName;
                string excelPath = extractDestPath + "\\Upload_Template_Task_SOP.xls";


                if (File.Exists(excelPath))
                {
                    string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + excelPath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                    OleDbConnection olDbObjConn = new OleDbConnection(connectionString);

                    OleDbDataAdapter oledbObject = null;
                    oledbObject = new OleDbDataAdapter("Select * from [SOP$]", olDbObjConn);
                    DataTable sopTable = new DataTable();
                    DataColumn lineNumColumn = new DataColumn();
                    lineNumColumn.DataType = System.Type.GetType("System.Int32");
                    lineNumColumn.ColumnName = "Line Number";
                    lineNumColumn.Unique = true;
                    lineNumColumn.AutoIncrement = true;
                    lineNumColumn.AutoIncrementSeed = 1;
                    sopTable.Columns.Add(lineNumColumn);
                    oledbObject.Fill(sopTable);

                    oledbObject = new OleDbDataAdapter("Select * from [SOP SpareParts$]", olDbObjConn);
                    DataTable sopSparePartsTabel = new DataTable();
                    DataColumn sparePartLineNumColumn = new DataColumn();
                    sparePartLineNumColumn.DataType = System.Type.GetType("System.Int32");
                    sparePartLineNumColumn.ColumnName = "Line Number";
                    sparePartLineNumColumn.Unique = true;
                    sparePartLineNumColumn.AutoIncrement = true;
                    sparePartLineNumColumn.AutoIncrementSeed = 1;
                    sopSparePartsTabel.Columns.Add(sparePartLineNumColumn);
                    oledbObject.Fill(sopSparePartsTabel);

                    oledbObject = new OleDbDataAdapter("Select * from [SOP Parameters$]", olDbObjConn);
                    DataTable sopParamTabel = new DataTable();
                    DataColumn paramLineNumColumn = new DataColumn();
                    paramLineNumColumn.DataType = System.Type.GetType("System.Int32");
                    paramLineNumColumn.ColumnName = "Line Number";
                    paramLineNumColumn.Unique = true;
                    paramLineNumColumn.AutoIncrement = true;
                    paramLineNumColumn.AutoIncrementSeed = 1;
                    sopParamTabel.Columns.Add(paramLineNumColumn);
                    oledbObject.Fill(sopParamTabel);
                    olDbObjConn.Close();

                    if (sopTable.Rows.Count > 0)
                    {
                        Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                        #region Validating Empty/Blank Sop Name                      
                        DataRow[] myResultSet = sopTable.Select("[SOP Name] is null");

                        foreach (DataRow sopBlankRow in myResultSet)
                        {
                            failureMessage += "SOP Name is empty in line number : " + sopBlankRow["Line Number"].ToString() + Environment.NewLine;
                            failure++;
                        }
                        #endregion

                        var sopNameList = (from s in sopTable.AsEnumerable() select s["SOP Name"]).Distinct().ToList();

                        using (DbConnection dbConnection = db.CreateConnection())
                        {
                            dbConnection.Open();
                            try
                            {
                                foreach (var sopName in sopNameList)
                                {
                                    if (!string.IsNullOrEmpty(Convert.ToString(sopName)))
                                    {
                                        DataTable tblSeletedSOP = sopTable.AsEnumerable()
                                                              .Where(row => row.Field<String>(Language_Resources.TaskGroup_Resource.sopName) == Convert.ToString(sopName))
                                                              .OrderBy(row => row.Field<String>(Language_Resources.TaskGroup_Resource.stepSequence))
                                                              .CopyToDataTable();

                                        if (Convert.ToString(sopName).Length > 200)
                                        {
                                            failureMessage += "SOP Name is more than 200 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " , Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                            failure++;
                                        }
                                        else
                                        {

                                            string sopType = tblSeletedSOP.Rows[0][Language_Resources.TaskGroup_Resource.sopType].ToString();
                                            if (string.IsNullOrEmpty(sopType))
                                            {
                                                failureMessage += "SOP Type is empty in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " , Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                failure++;
                                            }
                                            else if (sopType.Length > 50)
                                            {
                                                failureMessage += "SOP Type is more than 50 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                failure++;
                                            }
                                            else
                                            {
                                                int sopTypeID = 0;
                                                #region SOP Type
                                                string masterDataStatus = string.Empty;
                                                sopTypeID = MaintenanceDAL.GetMaintMasterID(db, null, basicParam.SiteID, 0, sopType, MasterDataType.TASKGRP_TYPE.ToString(), out masterDataStatus);
                                                if (sopTypeID > 0)
                                                {
                                                    if (masterDataStatus == "I")
                                                    {//Make masterData Active
                                                        MaintenanceDAL.UpdateMaintMasterData(db, null, basicParam.SiteID, sopTypeID, sopType, MasterDataType.TASKGRP_TYPE.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);
                                                    }
                                                }
                                                else
                                                { //insert
                                                    sopTypeID = MaintenanceDAL.InsertMaintMasterData(db, null, basicParam.SiteID, sopType, MasterDataType.TASKGRP_TYPE.ToString(), string.Empty, basicParam.UserID, currentDate, currentTime);
                                                }
                                                #endregion

                                                int seletedIdentifier = 0;
                                                int taskGroupID = 0;
                                                int versionNumber = MaintenanceDAL.GetTaskGroupVersion(db, null, basicParam.SiteID, Convert.ToString(sopName), out seletedIdentifier);
                                                #region TaskGroup
                                                DbTransaction taskGrouptransaction = null;

                                                try
                                                {
                                                    taskGrouptransaction = dbConnection.BeginTransaction();
                                                    if (seletedIdentifier > 0)
                                                    {
                                                        TaskGroupBasicInfo taskGroupModifiedInfo = GetTaskGroupInfo(db, taskGrouptransaction, basicParam.SiteID, seletedIdentifier, versionNumber, false);

                                                        if (taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.Draft || taskGroupModifiedInfo.TaskGroupStatus == TaskGroupStatus.MODIFIED)
                                                        {
                                                            MaintenanceDAL.UpdateTaskGroupInfo(db, taskGrouptransaction, basicParam.SiteID, taskGroupModifiedInfo.TaskGroupID, Convert.ToString(sopName), sopTypeID, basicParam.UserID, currentDate, currentTime);
                                                            taskGroupID = taskGroupModifiedInfo.TaskGroupID;
                                                        }
                                                        else
                                                        {
                                                            int newVersionNumber = 0;
                                                            List<TaskMappingInfo> taskMappingList = null;
                                                            List<int> toReturnTaskMappingList = new List<int>();
                                                            taskGroupID = CreateCopyOfTaskGroup(db, taskGrouptransaction, basicParam.SiteID, basicParam.UserID, seletedIdentifier, taskGroupModifiedInfo.TaskGroupID, 0, Convert.ToString(sopName), sopTypeID, toReturnTaskMappingList, out newVersionNumber, out taskMappingList);
                                                            versionNumber = newVersionNumber;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        seletedIdentifier = MaintenanceDAL.GetNextIdentifierID(db);
                                                        taskGroupID = MaintenanceDAL.InsertTaskGroupInfo(db, taskGrouptransaction, basicParam.SiteID, Convert.ToString(sopName), sopTypeID, seletedIdentifier, 1, (char)TaskGroupStatus.Draft, TaskGroupRefType.TASK.ToString(), 0, basicParam.UserID, currentDate, currentTime);
                                                    }
                                                    taskGrouptransaction.Commit();
                                                }
                                                catch (Exception ex)
                                                {
                                                    taskGrouptransaction.Rollback();
                                                    throw ex;
                                                }
                                                #endregion
                                                int sequenceNumber = 0;
                                                List<int> existingTaskID = new List<int>();

                                                dataReaderTaskInfo = MaintenanceDAL.GetTaskInfo(db, null, taskGroupID, 0);
                                                while (dataReaderTaskInfo.Read())
                                                {
                                                    existingTaskID.Add(Common.GetSafeInt32(dataReaderTaskInfo, "FTASKID"));
                                                }
                                                dataReaderTaskInfo.Close();

                                                DbTransaction transaction = null;
                                                try
                                                {
                                                    bool isValidTask = true;
                                                    foreach (DataRow sopRow in tblSeletedSOP.Rows)
                                                    {

                                                        TaskInfo taskInfo = new TaskInfo();
                                                        sequenceNumber++;
                                                        taskInfo.SequenceNum = sequenceNumber;
                                                        taskInfo.TaskName = sopRow[Language_Resources.TaskGroup_Resource.taskName].ToString().Trim();
                                                        if (string.IsNullOrEmpty(taskInfo.TaskName))
                                                        {
                                                            failureMessage += "Operation Name is empty in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + Environment.NewLine;
                                                            failure++;
                                                            isValidTask = false;
                                                        }
                                                        else if (taskInfo.TaskName.Length > 200)
                                                        {
                                                            failureMessage += "SOP Operation name is more than 200 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                            failure++;
                                                            isValidTask = false;
                                                        }

                                                        if (isValidTask && !string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.estimatedTime].ToString()))
                                                        {
                                                            int estimatedTime = 0;
                                                            Int32.TryParse(sopRow[Language_Resources.TaskGroup_Resource.estimatedTime].ToString(), out estimatedTime);
                                                            taskInfo.EstimatedTime = estimatedTime;
                                                            if (taskInfo.EstimatedTime > 0)
                                                            {
                                                                if (taskInfo.EstimatedTime.ToString().Length > 7)
                                                                {
                                                                    failureMessage += "SOP Opeartion estimated time is more than 7 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                                    failure++;
                                                                    isValidTask = false;
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Convert.ToString(sopRow[Language_Resources.TaskGroup_Resource.unit].ToString())))
                                                                    {
                                                                        failureMessage += "SOP Opeartion estimated time unit is empty in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                                        failure++;
                                                                        isValidTask = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        taskInfo.UnitOfTime = SetUnitOfTime(sopRow[Language_Resources.TaskGroup_Resource.unit].ToString());
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (isValidTask && !string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.taskDescription].ToString()))
                                                        {
                                                            taskInfo.Description = sopRow[Language_Resources.TaskGroup_Resource.taskDescription].ToString();
                                                            if (taskInfo.Description.Length > 1000)
                                                            {
                                                                failureMessage += "SOP Opeartion description is more than 1000 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                                failure++;
                                                                isValidTask = false;
                                                            }
                                                        }

                                                        if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.safetyInstructions].ToString()))
                                                        {
                                                            taskInfo.SafetyDescription = sopRow[Language_Resources.TaskGroup_Resource.safetyInstructions].ToString();
                                                            if (taskInfo.SafetyDescription.Length > 1000)
                                                            {
                                                                failureMessage += "SOP Safety description is more than 1000 character in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,Failed to insert SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                                failure++;
                                                                isValidTask = false;
                                                            }
                                                        }

                                                        if (isValidTask)
                                                        {
                                                            transaction = dbConnection.BeginTransaction();
                                                            taskInfo.TaskID = MaintenanceDAL.GetTaskID(db, transaction, taskGroupID, taskInfo.TaskName);
                                                            string uploadedDocumentFolderName = sopRow[Language_Resources.TaskGroup_Resource.uploadDocumentReference].ToString().Trim();
                                                            if (!string.IsNullOrEmpty(uploadedDocumentFolderName))
                                                            {
                                                                try
                                                                {
                                                                    taskInfo.DocumentInfoList = uploadDocumentsFromDirectory(extractDestPath + "\\" + uploadedDocumentFolderName, uploadSOPDocumentDestPath, seletedIdentifier, basicParam.SiteID);
                                                                }
                                                                catch (DirectoryNotFoundException ex)
                                                                {
                                                                    failureMessage += "Unable to add sop operation documents [Folder name not exist] in line number : " + tblSeletedSOP.Rows[0]["Line Number"].ToString() + " ,SOP Name :" + Convert.ToString(sopName) + Environment.NewLine;
                                                                    failure++;
                                                                }
                                                            }



                                                            if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.ppeImageName + Language_Resources.TaskGroup_Resource.separatedByComma].ToString()))
                                                            {
                                                                string ppeImages = sopRow[Language_Resources.TaskGroup_Resource.ppeImageName + Language_Resources.TaskGroup_Resource.separatedByComma].ToString();
                                                                List<string> ppeImageList = ppeImages.Split(',').ToList();
                                                                foreach (string ppeName in ppeImageList)
                                                                {
                                                                    int ppeID = MaintenanceDAL.GetPPEID(db, transaction, basicParam.SiteID, ppeName);
                                                                    if (ppeID > 0)
                                                                    {
                                                                        TaskPPEInfo taskPPEInfo = new TaskPPEInfo();
                                                                        taskPPEInfo.PPEID = ppeID;
                                                                        taskInfo.PPEInfoList.Add(taskPPEInfo);
                                                                    }
                                                                }
                                                            }

                                                            if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.toolsImageName + Language_Resources.TaskGroup_Resource.separatedByComma].ToString()))
                                                            {
                                                                string toolsImage = sopRow[Language_Resources.TaskGroup_Resource.toolsImageName + Language_Resources.TaskGroup_Resource.separatedByComma].ToString();
                                                                List<string> toolsImageList = toolsImage.Split(',').ToList();

                                                                foreach (string toolsName in toolsImageList)
                                                                {
                                                                    int toolsID = MaintenanceDAL.GetToolsID(db, transaction, basicParam.SiteID, toolsName);
                                                                    if (toolsID > 0)
                                                                    {
                                                                        TaskToolsInfo taskToolsInfo = new TaskToolsInfo();
                                                                        taskToolsInfo.ToolsID = toolsID;
                                                                        taskInfo.ToolsInfoList.Add(taskToolsInfo);
                                                                    }
                                                                }
                                                            }

                                                            if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.enableRemark].ToString()))
                                                            {
                                                                taskInfo.RemarkEnabled = sopRow[Language_Resources.TaskGroup_Resource.enableRemark].ToString().Trim().ToUpper() == "YES" ? true : false;
                                                                if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.isRemarkMandatory].ToString()))
                                                                {
                                                                    taskInfo.RemarkMandatory = sopRow[Language_Resources.TaskGroup_Resource.isRemarkMandatory].ToString().Trim().ToUpper() == "YES" ? true : false;
                                                                }
                                                            }


                                                            if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.enableTakePicture].ToString()))
                                                            {
                                                                taskInfo.PictureEnabled = sopRow[Language_Resources.TaskGroup_Resource.enableTakePicture].ToString().Trim().ToUpper() == "YES" ? true : false;
                                                                if (!string.IsNullOrEmpty(sopRow[Language_Resources.TaskGroup_Resource.isPictureMandatory].ToString()))
                                                                {
                                                                    taskInfo.PictureMandatory = sopRow[Language_Resources.TaskGroup_Resource.isPictureMandatory].ToString().Trim().ToUpper() == "YES" ? true : false;
                                                                }
                                                            }

                                                            #region SOP spare parts requirements

                                                            DataRow[] tblSeletedSOPSparePart = sopSparePartsTabel.Select("[" + Language_Resources.TaskGroup_Resource.sopName + "] = '" + Convert.ToString(sopName) + "' AND [" + Language_Resources.TaskGroup_Resource.taskName + "] = '" + taskInfo.TaskName + "'");

                                                            List<string> materialCodeList = new List<string>();
                                                            foreach (DataRow sopSparePartRow in tblSeletedSOPSparePart)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(sopSparePartRow[Language_Resources.TaskGroup_Resource.materialCode])))
                                                                {
                                                                    spareFailureMessage += "Material is empty in line number : " + sopSparePartRow["Line Number"].ToString() + Environment.NewLine;
                                                                    spareFailure++;
                                                                }
                                                                else if (string.IsNullOrEmpty(Convert.ToString(sopSparePartRow[Language_Resources.TaskGroup_Resource.quantity])))
                                                                {
                                                                    spareFailureMessage += "Quantity is empty in line number : " + sopSparePartRow["Line Number"].ToString() + Environment.NewLine;
                                                                    spareFailure++;
                                                                }
                                                                else if (materialCodeList.Contains(Convert.ToString(sopSparePartRow[Language_Resources.TaskGroup_Resource.materialCode]).ToUpper()))
                                                                {
                                                                    spareFailureMessage += "Duplicate material occured in line number : " + sopSparePartRow["Line Number"].ToString() + " in Operation Name:" + taskInfo.TaskName + " , Sop Name:" + Convert.ToString(sopName) + Environment.NewLine;
                                                                    spareFailure++;
                                                                }
                                                                else
                                                                {
                                                                    decimal quantity = 0;
                                                                    MaintSparePartInfo sparePartInfo = new MaintSparePartInfo();

                                                                    sparePartInfo.MaterialNumber = Convert.ToString(sopSparePartRow[Language_Resources.TaskGroup_Resource.materialCode]);
                                                                    materialCodeList.Add(sparePartInfo.MaterialNumber.ToUpper());
                                                                    decimal.TryParse(sopSparePartRow[Language_Resources.TaskGroup_Resource.quantity].ToString().Trim(), out quantity);

                                                                    dataReaderTaskInfo = MaintenanceDAL.GetSparePartMaterialDetails(db, basicParam.SiteID, sparePartInfo.MaterialNumber);
                                                                    if (dataReaderTaskInfo.Read())
                                                                    {
                                                                        sparePartInfo.UOM = Common.GetSafeString(dataReaderTaskInfo, "FBASEUOM");
                                                                        dataReaderTaskInfo.Close();

                                                                       if (quantity < 0)
                                                                        {
                                                                            spareFailureMessage += "Invalid decimal places in line number: " + sopSparePartRow["Line Number"].ToString() + Environment.NewLine;
                                                                            spareFailure++;
                                                                        }
                                                                        else
                                                                        {
                                                                            sparePartInfo.Quantity = quantity;
                                                                            taskInfo.SparePartInfoList.Add(sparePartInfo);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        dataReaderTaskInfo.Close();
                                                                        spareFailureMessage += "This material is does not exist in line number : " + sopSparePartRow["Line Number"].ToString() + Environment.NewLine;
                                                                        spareFailure++;
                                                                    }
                                                                }
                                                            }
                                                            #endregion

                                                            #region Task Parameter

                                                            DataRow[] tblSeletedSOPParam = sopParamTabel.Select("[" + Language_Resources.TaskGroup_Resource.sopName + "] = '" + Convert.ToString(sopName) + "' AND [" + Language_Resources.TaskGroup_Resource.taskName + "] = '" + taskInfo.TaskName + "'");

                                                            List<string> parameterNameList = new List<string>();
                                                            foreach (DataRow sopParamRow in tblSeletedSOPParam)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(sopParamRow[Language_Resources.TaskGroup_Resource.parameterName])))
                                                                {
                                                                    paramFailureMessage += "Parameter Name is empty in line number : " + sopParamRow["Line Number"].ToString() + Environment.NewLine;
                                                                    paramFailure++;
                                                                }
                                                                else
                                                                {
                                                                    ParameterInfo taskParam = new ParameterInfo();
                                                                    taskParam.ParameterName = Convert.ToString(sopParamRow[Language_Resources.TaskGroup_Resource.parameterName]);
                                                                    if (taskParam.ParameterName.Length > 200)
                                                                    {
                                                                        failureMessage += "Parameter name is more than 200 character in line number : " + sopParamRow["Line Number"].ToString() + " in Operation Name:" + taskInfo.TaskName + " , Sop Name:" + Convert.ToString(sopName) + Environment.NewLine;
                                                                        paramFailure++;
                                                                    }
                                                                    else
                                                                    if (parameterNameList.Contains(taskParam.ParameterName.ToUpper()))
                                                                    {
                                                                        paramFailureMessage += "Duplicate parameter name occured in line number : " + sopParamRow["Line Number"].ToString() + " in Operation Name:" + taskInfo.TaskName + " , Sop Name:" + Convert.ToString(sopName) + Environment.NewLine;
                                                                        paramFailure++;
                                                                    }
                                                                    else
                                                                    {
                                                                        parameterNameList.Add(taskParam.ParameterName.ToUpper());
                                                                        if (taskInfo.TaskID > 0)
                                                                        {
                                                                            taskParam.ParameterID = MaintenanceDAL.GetTasksParameterID(db, transaction, basicParam.SiteID, taskInfo.TaskID, taskGroupID, taskParam.ParameterName);
                                                                        }
                                                                        if (!string.IsNullOrEmpty(Convert.ToString(sopParamRow[Language_Resources.TaskGroup_Resource.isParameterMandatory])))
                                                                        {
                                                                            taskParam.IsMandatory = sopParamRow[Language_Resources.TaskGroup_Resource.isParameterMandatory].ToString().Trim().ToUpper() == "TRUE" ? true : false;
                                                                        }
                                                                        if (!string.IsNullOrEmpty(Convert.ToString(sopParamRow[Language_Resources.TaskGroup_Resource.parameterType])))
                                                                        {
                                                                            taskParam.ParameterType = SetParameterType(sopParamRow[Language_Resources.TaskGroup_Resource.parameterType].ToString());
                                                                            if (taskParam.ParameterType == ParameterType.SelectionCode)
                                                                            {
                                                                                if (!string.IsNullOrEmpty(Convert.ToString(sopParamRow[Language_Resources.TaskGroup_Resource.selectionCode])))
                                                                                {
                                                                                    string selectionGroupCodeName = sopParamRow[Language_Resources.TaskGroup_Resource.selectionCode].ToString().Trim();
                                                                                    string groupCodeStatus = string.Empty;
                                                                                    taskParam.SelectionGroupID = MaintenanceDAL.GetMaintMasterID(db, null, basicParam.SiteID, 0, selectionGroupCodeName, MasterDataType.GROUPCODE.ToString(), out groupCodeStatus);
                                                                                }
                                                                                else
                                                                                {
                                                                                    paramFailureMessage += "Selection code is empty in line number : " + sopParamRow["Line Number"].ToString() + Environment.NewLine;
                                                                                    paramFailure++;
                                                                                }
                                                                            }
                                                                            taskInfo.ParameterInfoList.Add(taskParam);
                                                                        }
                                                                        else
                                                                        {
                                                                            paramFailureMessage += "Parameter type is empty in line number : " + sopParamRow["Line Number"].ToString() + Environment.NewLine;
                                                                            paramFailure++;
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                            #endregion


                                                            TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();
                                                            taskGroupIdentifier.IdentifierID = seletedIdentifier;
                                                            taskGroupIdentifier.VersionNumber = versionNumber;
                                                            bool isExistingRecord = false;
                                                            if (taskInfo.TaskID > 0)
                                                            {
                                                                isExistingRecord = true;
                                                            }
                                                            InsertUpdateTaskInfoWithDependencies(db, transaction, basicParam, taskGroupID, taskInfo, TaskGroupRefType.TASK, currentDate, currentTime, ref taskGroupIdentifier);
                                                            existingTaskID.Remove(taskInfo.TaskID);
                                                            if (taskGroupIdentifier.IdentifierID == -7) // if IDentifier is -7 -> Parameter name already exist
                                                            {
                                                                failureMessage += "Failed to insert Opeartion details, Operation Name :" + taskInfo.TaskName + " in SOP Name :" + sopName.ToString() + " , Reason : Found duplicate parameter name " + Environment.NewLine;
                                                                failure++;
                                                            }
                                                            if (taskGroupIdentifier.IdentifierID > 0)
                                                            {
                                                                transaction.Commit();
                                                                if (isExistingRecord)
                                                                {
                                                                    updateMessage += "Successfully updated operation, Operation Name:" + taskInfo.TaskName + " in SOP Name :" + sopName.ToString() + Environment.NewLine;
                                                                    updated++;
                                                                }
                                                                else
                                                                {
                                                                    insertMessage += "Successfully inserted operation, Operation Name:" + taskInfo.TaskName + " in SOP Name :" + sopName.ToString() + Environment.NewLine;
                                                                    inserted++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    transaction.Rollback();
                                                    throw ex;
                                                }

                                                int removeTaskCount = 0;
                                                DbTransaction taskDeletetransaction = null;
                                                try
                                                {

                                                    foreach (int removeTaskId in existingTaskID)
                                                    {
                                                        taskDeletetransaction = dbConnection.BeginTransaction();
                                                        DeleteTaskInfoWithDependencies(db, taskDeletetransaction, taskGroupID, removeTaskId, currentDate, currentTime, basicParam.SiteID, basicParam.UserID);
                                                        taskDeletetransaction.Commit();
                                                        removeTaskCount++;
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    taskDeletetransaction.Rollback();
                                                    throw ex;
                                                }

                                                if (removeTaskCount > 0)
                                                {
                                                    deleteMessage += "Successfully deleted existing " + removeTaskCount + " operation details in SOP Name :" + sopName.ToString() + Environment.NewLine;
                                                    deleted++;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                throw ex;
                            }
                            finally
                            {
                                dbConnection.Close();
                            }
                        }
                    }
                }
                else
                {
                    throw new Exception("Unable to find sop information, Please download template and upload it again");
                }


                #region Log Information              
                string oldLogFileName = fileName + "_Temp_Success.txt";
                string oldTargetFile = logPath + "//" + oldLogFileName;
                string newLogFileName = fileName + "_Success.txt";
                string newTargetFile = logPath + "//" + newLogFileName;
                FileStream logFileStream = null;
                StreamWriter logStreamWriter = null;

                try
                {
                    using (logFileStream = new FileStream(oldTargetFile, FileMode.Append, FileAccess.Write))
                    {
                        using (logStreamWriter = new StreamWriter(logFileStream))
                        {
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopUploadLogInfo + "_" + DateTime.Now.ToString());
                            logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopLogInfo);
                            logStreamWriter.WriteLine("****************************************************************************************");
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyInserted + " : " + inserted.ToString());
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyUpdated + " : " + updated.ToString());
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyDeleted + " : " + deleted.ToString());
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + failure.ToString());

                            if (!string.IsNullOrEmpty(insertMessage.ToString()))
                            {
                                logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.TaskGroup_Resource.addedItems + "--------------------------------------");
                                logStreamWriter.WriteLine(insertMessage);
                            }

                            if (!string.IsNullOrEmpty(updateMessage.ToString()))
                            {
                                logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.TaskGroup_Resource.updatedItems + "-------------------------------------");
                                logStreamWriter.WriteLine(updateMessage);
                            }

                            if (!string.IsNullOrEmpty(deleteMessage.ToString()))
                            {
                                logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.TaskGroup_Resource.deletedItems + "-------------------------------------");
                                logStreamWriter.WriteLine(deleteMessage);
                            }

                            if (!string.IsNullOrEmpty(failureMessage.ToString()))
                            {
                                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                                logStreamWriter.WriteLine(failureMessage);
                            }

                            if (!string.IsNullOrEmpty(spareFailureMessage))
                            {
                                logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                                logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopSparePartsLogInfo);
                                logStreamWriter.WriteLine("****************************************************************************************");
                                logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + spareFailure.ToString());

                                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                                logStreamWriter.WriteLine(spareFailureMessage);
                            }

                            if (!string.IsNullOrEmpty(paramFailureMessage))
                            {
                                logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                                logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopParamLogInfo);
                                logStreamWriter.WriteLine("****************************************************************************************");
                                logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + paramFailure.ToString());

                                logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                                logStreamWriter.WriteLine(paramFailureMessage);
                            }

                        }
                        logFileStream.Close();
                        System.IO.File.Move(oldTargetFile, newTargetFile);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                    if (logStreamWriter != null)
                        logStreamWriter.Close();

                    if (logFileStream != null)
                        logFileStream.Close();
                }
                #endregion

            }
            catch (Exception ex)
            {
                string oldLogFileName = fileName + "_tempError.txt";
                string oldTargetFile = logPath + "//" + oldLogFileName;
                string newLogFileName = fileName + "_Error.txt";
                string newTargetFile = logPath + "//" + newLogFileName;

                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                using (FileStream logFileStream = new FileStream(oldTargetFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter logStreamWriter = new StreamWriter(logFileStream))
                    {
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopUploadLogInfo + "_" + DateTime.Now.ToString());
                        logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopLogInfo);
                        logStreamWriter.WriteLine("****************************************************************************************");
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyInserted + " : " + inserted.ToString());
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyUpdated + " : " + updated.ToString());
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.successfullyDeleted + " : " + deleted.ToString());
                        logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + failure.ToString());

                        if (!string.IsNullOrEmpty(insertMessage.ToString()))
                        {
                            logStreamWriter.WriteLine("---------------------------------------" + Language_Resources.TaskGroup_Resource.addedItems + "--------------------------------------");
                            logStreamWriter.WriteLine(insertMessage);
                        }

                        if (!string.IsNullOrEmpty(updateMessage.ToString()))
                        {
                            logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.TaskGroup_Resource.updatedItems + "-------------------------------------");
                            logStreamWriter.WriteLine(updateMessage);
                        }

                        if (!string.IsNullOrEmpty(deleteMessage.ToString()))
                        {
                            logStreamWriter.WriteLine("--------------------------------------" + Language_Resources.TaskGroup_Resource.deletedItems + "-------------------------------------");
                            logStreamWriter.WriteLine(deleteMessage);
                        }

                        if (!string.IsNullOrEmpty(failureMessage.ToString()))
                        {
                            logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                            logStreamWriter.WriteLine(failureMessage);
                        }

                        if (!string.IsNullOrEmpty(spareFailureMessage))
                        {
                            logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopSparePartsLogInfo);
                            logStreamWriter.WriteLine("****************************************************************************************");
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + spareFailure.ToString());

                            logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                            logStreamWriter.WriteLine(spareFailureMessage);
                        }

                        if (!string.IsNullOrEmpty(paramFailureMessage))
                        {
                            logStreamWriter.WriteLine("******************************************************************************************" + Environment.NewLine);
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.sopParamLogInfo);
                            logStreamWriter.WriteLine("****************************************************************************************");
                            logStreamWriter.WriteLine(Language_Resources.TaskGroup_Resource.failure + " : " + paramFailure.ToString());

                            logStreamWriter.WriteLine("-------------------------------------" + Language_Resources.TaskGroup_Resource.failureReasons + "------------------------------------");
                            logStreamWriter.WriteLine(paramFailureMessage);
                        }
                        logStreamWriter.Write("Error : ");
                        logStreamWriter.Write(exceptionErrorMessage);
                        logStreamWriter.Close();
                    }
                    logFileStream.Close();
                    System.IO.File.Move(oldTargetFile, newTargetFile);
                }
                Common.LogException(ex, "MaintenanceService", "Error while uploading sop information  ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " UserID: " + basicParam.UserID);
            }
            finally
            {
                if (dataReaderTaskInfo != null && !dataReaderTaskInfo.IsClosed)
                    dataReaderTaskInfo.Close();
            }

        }


        private List<DocumentInfo> uploadDocumentsFromDirectory(string dirPath, string uploadPath, int identifierID, int siteID)
        {
            try
            {
                List<string> fileList = Directory.GetFiles(dirPath).ToList();
                List<DocumentInfo> documentInfoList = new List<DocumentInfo>();
                foreach (string filePath in fileList)
                {
                    DocumentInfo documentInfo = new DocumentInfo();
                    string fileName = new DirectoryInfo(filePath).Name;
                    var ext = fileName.Substring(fileName.LastIndexOf('.') + 1).ToLower();
                    if (ext == "gif" || ext == "png" || ext == "jpeg" || ext == "jpg")
                    {
                        documentInfo.DocumentType = DocumentType.IMAGE;
                        documentInfo.DocumentName = "Img" + DateTime.Now.ToString("ddMMhhmmssffff") + "_" + fileName;
                        if (identifierID > 0)
                        {
                            string uploadCurrentPath = uploadPath + "\\" + identifierID + "\\";
                            string newImagePath = uploadCurrentPath + documentInfo.DocumentName;

                            if (!Directory.Exists(uploadCurrentPath))
                            {
                                Directory.CreateDirectory(uploadCurrentPath);
                            }
                            System.IO.File.Copy(dirPath + "\\" + fileName, newImagePath);
                        }
                    }
                    else if (ext == "ogg" || ext == "ogv" || ext == "avi" || ext == "mpeg" || ext == "mov" || ext == "wmv" || ext == "flv" || ext == "mp4" || ext == "mpg")
                    {
                        documentInfo.DocumentType = DocumentType.VIDEO;
                        documentInfo.DocumentName = "Vid" + DateTime.Now.ToString("ddMMhhmmssffff") + "_" + fileName;
                        if (identifierID > 0)
                        {
                            string uploadCurrentPath = uploadPath + "\\" + identifierID;
                            string newImagePath = uploadCurrentPath + "\\" + documentInfo.DocumentName;
                            if (!Directory.Exists(uploadCurrentPath))
                            {
                                Directory.CreateDirectory(uploadCurrentPath);
                            }
                            System.IO.File.Copy(dirPath + "\\" + fileName, newImagePath);
                        }
                    }
                    else if ((ext == "pdf" || ext == "xls" || ext == "xlsx" || ext == "doc" || ext == "docx" || ext == "txt" || ext == "xps" || ext == "ppt" || ext == "pptx"))
                    {
                        documentInfo.DocumentType = DocumentType.DOCUMENT;
                        documentInfo.DocumentName = "Doc" + DateTime.Now.ToString("ddMMhhmmssffff") + "_" + fileName;
                        if (identifierID > 0)
                        {
                            string uploadCurrentPath = uploadPath + "\\" + identifierID;
                            string newImagePath = uploadCurrentPath + "\\" + documentInfo.DocumentName;
                            if (!Directory.Exists(uploadCurrentPath))
                            {
                                Directory.CreateDirectory(uploadCurrentPath);
                            }
                            System.IO.File.Copy(dirPath + "\\" + fileName, newImagePath);
                        }
                    }
                    if (!string.IsNullOrEmpty(documentInfo.DocumentName))
                    {
                        documentInfoList.Add(documentInfo);
                    }
                }
                return documentInfoList;
            }
            catch (DirectoryNotFoundException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private UnitOfTime SetUnitOfTime(string unitOfTime)
        {
            UnitOfTime selectedUOM = UnitOfTime.Hours;
            switch (unitOfTime.Trim().ToUpper())
            {
                case "MINUTES":
                    selectedUOM = UnitOfTime.Minutes;
                    break;
                case "SECONDS":
                    selectedUOM = UnitOfTime.Seconds;
                    break;
            }
            return selectedUOM;
        }

        private ParameterType SetParameterType(string parameterType)
        {
            ParameterType selectedParameterType = ParameterType.Numeric;
            switch (parameterType.Trim().ToUpper())
            {
                case "DECIMAL":
                    selectedParameterType = ParameterType.Decimal;
                    break;
                case "MULTILINETEXT":
                    selectedParameterType = ParameterType.MultiLineText;
                    break;
                case "SELECTIONCODE":
                    selectedParameterType = ParameterType.SelectionCode;
                    break;
                case "SINGLELINETEXT":
                    selectedParameterType = ParameterType.SingleLineText;
                    break;
            }
            return selectedParameterType;
        }
        #endregion

        #endregion

        #endregion

        #region Maintenance Schedule & Work Order

        public MaintenanceIdentityInfo InsertUpdateMaintenanceInfo(MaintenanceInfo maintenanceInfo)
        {
            IDataReader dataReaderInfo = null;
            MaintenanceIdentityInfo maintenanceIdentityInfo = new MaintenanceIdentityInfo();
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, maintenanceInfo.SiteID, ref currentDate, ref currentTime);

                //For Schedule or Direct work order, both have to be first created and then release. Hence commented below code
                //string scheduleStatus;
                //if (maintenanceInfo.MaintScheduleType == ScheduleType.WorkOrder)
                //{
                //    scheduleStatus = ScheduleStatus.RELEASED.ToString();
                //}
                //else
                //{
                //    scheduleStatus = ScheduleStatus.CREATED.ToString();
                //}

                char isNotificationOrder = 'N';
                if (maintenanceInfo.NotificationID > 0)
                    isNotificationOrder = 'Y';

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        //Check maintenance schedule exist or not
                        //dataReaderInfo = MaintenanceDAL.CheckMaintenanceNameExist(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.MaintScheduleID, maintenanceInfo.MaintenanceName, (char)maintenanceInfo.MaintScheduleType);
                        //if (dataReaderInfo.Read())
                        //{
                        //    dataReaderInfo.Close();
                        //    return -1;//maintenance name already exists
                        //}
                        //dataReaderInfo.Close();

                        int maintenanceScheduleID = 0;
                        if (maintenanceInfo.MaintenancePriorityType == null)
                        {
                            maintenanceInfo.MaintenancePriorityType = string.Empty;
                        }
                        #region Insert or Update Maintenance Info
                        if (maintenanceInfo.MaintScheduleID == 0)
                        {
                            //Insert Functional Location Info
                            maintenanceScheduleID = MaintenanceDAL.InsertMaintenanceInfo(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.MaintenanceName, maintenanceInfo.MaintenanceDesc, (char)maintenanceInfo.MaintScheduleType
                                , maintenanceInfo.MaintenanceTypeID, maintenanceInfo.MaintenancePriorityType, maintenanceInfo.FLocationID, maintenanceInfo.EquipmentID, maintenanceInfo.WorkGroupID, 0, maintenanceInfo.UserID, currentDate, currentTime, ScheduleStatus.CREATED.ToString());

                            maintenanceIdentityInfo.MaintScheduleID = maintenanceScheduleID;
                            //if it's a direct work order then scheduling or creating work order directly
                            if (maintenanceInfo.MaintScheduleType == ScheduleType.WorkOrder)
                            {
                                int schedule_dtl_id = MaintenanceDAL.InsertMaintenaceScheduleDetailInfoWorkOrder(db, transaction, maintenanceInfo.SiteID, maintenanceScheduleID, 1, maintenanceInfo.UserID, currentDate, currentTime);

                                string workOrderID = MaintenanceDAL.GetNextMaintenanceWorkOrder(db);

                                MaintenanceDAL.InsertMaintenanceWorkOrderInfo(db, transaction, maintenanceInfo.SiteID, workOrderID, schedule_dtl_id, maintenanceScheduleID, maintenanceInfo.ScheduleDate
                                    , maintenanceInfo.ScheduleTime, isNotificationOrder, maintenanceInfo.UserID, currentDate, currentTime, WorkOrderStatus.CREATED.ToString());
                                maintenanceIdentityInfo.WorkOrderID = workOrderID;
                                if (maintenanceInfo.NotificationID > 0)
                                {
                                    MaintenanceDAL.UpdateNotificationStatus(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.NotificationID, workOrderID, NotificationStatus.ASSIGNED.ToString(), maintenanceInfo.UserID, currentDate, currentTime);
                                    MaintenanceDAL.UpdateNotificationWorkOrder(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.NotificationID, workOrderID, maintenanceInfo.UserID, currentDate, currentTime);
                                }
                            }
                        }
                        else
                        {
                            if (maintenanceInfo.MaintScheduleType == ScheduleType.WorkOrder)
                            {
                                string workOrderID = string.Empty;
                                WorkOrderStatus workOrderStatus = WorkOrderStatus.SCHEDULED;

                                //Get work order details
                                dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.MaintScheduleID, string.Empty, false);
                                if (dataReaderInfo.Read())
                                {
                                    workOrderID = Common.GetSafeString(dataReaderInfo, "FWORK_ORDERID");
                                    workOrderStatus = (WorkOrderStatus)Enum.Parse(typeof(WorkOrderStatus), Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS"));
                                }
                                dataReaderInfo.Close();

                                if (workOrderID.Trim().Length > 0)
                                {
                                    if (workOrderStatus != WorkOrderStatus.SCHEDULED && workOrderStatus != WorkOrderStatus.CREATED && workOrderStatus != WorkOrderStatus.OVERDUE && workOrderStatus != WorkOrderStatus.CANCELLED)
                                    {
                                        maintenanceIdentityInfo.WorkOrderID = "-2";
                                        return maintenanceIdentityInfo;//work order is started, cannot update this schedule
                                    }

                                    //update work order info
                                    MaintenanceDAL.UpdateScheduleDateForWorkOrder(db, transaction, maintenanceInfo.SiteID, workOrderID, maintenanceInfo.ScheduleDate, maintenanceInfo.ScheduleTime, true, maintenanceInfo.UserID, currentDate, currentTime);
                                    maintenanceIdentityInfo.WorkOrderID = workOrderID;
                                }
                            }

                            //Update Maintenance info
                            MaintenanceDAL.UpdateMaintenanceInfo(db, transaction, maintenanceInfo.SiteID, maintenanceInfo.MaintScheduleID, maintenanceInfo.MaintenanceName, maintenanceInfo.MaintenanceDesc, (char)maintenanceInfo.MaintScheduleType
                                 , maintenanceInfo.MaintenanceTypeID, maintenanceInfo.MaintenancePriorityType, maintenanceInfo.FLocationID, maintenanceInfo.EquipmentID, maintenanceInfo.WorkGroupID, 0, string.Empty, maintenanceInfo.UserID, currentDate, currentTime, 0);

                            maintenanceIdentityInfo.MaintScheduleID = maintenanceInfo.MaintScheduleID;
                        }
                        #endregion

                        transaction.Commit();
                        return maintenanceIdentityInfo;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting or updating maintenance info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + maintenanceInfo.SiteID + ";UserID: " + maintenanceInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public MaintenanceInfo GetMaintenanceInfo(MaintenanceFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                MaintenanceInfo maintenanceInfo = null;
                string imageName = string.Empty;
                bool isWorkOrder = filterInfo.MaintScheduleType == ScheduleType.WorkOrder;

                dataReaderInfo = MaintenanceDAL.GetMaintenanceInfo(db, filterInfo.SiteID, filterInfo.MaintScheduleID, isWorkOrder, filterInfo.WorkOrderID);     //, (char)filterInfo.MaintScheduleType
                while (dataReaderInfo.Read())
                {
                    maintenanceInfo = new MaintenanceInfo();
                    maintenanceInfo.MaintenanceName = Common.GetSafeString(dataReaderInfo, "FMAINTENANCENAME");
                    maintenanceInfo.MaintenanceDesc = Common.GetSafeString(dataReaderInfo, "FMAINDESCRIPTION");
                    maintenanceInfo.MaintenanceTypeID = Common.GetSafeInt32(dataReaderInfo, "FMAINTYPEID");
                    maintenanceInfo.MaintenancePriorityType = Common.GetSafeString(dataReaderInfo, "FPRIORITYTYPE");
                    maintenanceInfo.FLocationID = Common.GetSafeInt32(dataReaderInfo, "FLOCATIONID");
                    maintenanceInfo.EquipmentID = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                    maintenanceInfo.WorkGroupID = Common.GetSafeInt32(dataReaderInfo, "FWORKGROUPID");
                    maintenanceInfo.WorkGroupName = Common.GetSafeString(dataReaderInfo, "FWORKGROUPNAME");
                    maintenanceInfo.IsWorkGroupAvailable = Common.GetSafeString(dataReaderInfo, "FWORKGROUPSTATUS") == "A" ? true : false;
                    maintenanceInfo.FLocationName = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");
                    maintenanceInfo.EquipmentName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");

                    if (maintenanceInfo.EquipmentID > 0)
                    {
                        imageName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTIMG");
                        if (imageName.Length > 0)
                        {
                            maintenanceInfo.FLocationOrEquipmentImg = ConfigurationManager.AppSettings["EquipmentImagePath"].ToString().TrimEnd('/') + "/" + filterInfo.SiteID + "/" + "Thumbnail" + "/" + imageName;
                        }
                        else
                        {
                            imageName = Common.GetSafeString(dataReaderInfo, "FMODELIMAGE");
                            if (imageName.Length > 0)
                            {
                                maintenanceInfo.FLocationOrEquipmentImg = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + filterInfo.SiteID + "/" + "Thumbnail" + "/" + imageName;
                            }
                        }
                    }
                    else
                    {
                        imageName = Common.GetSafeString(dataReaderInfo, "FLOCATIONIMG");
                        if (imageName.Length > 0)
                            maintenanceInfo.FLocationOrEquipmentImg = ConfigurationManager.AppSettings["FunctionalLocImagePath"].ToString().TrimEnd('/') + "/" + filterInfo.SiteID + "/" + "Thumbnail" + "/" + imageName;
                    }

                    if (isWorkOrder)
                    {
                        maintenanceInfo.ScheduleDate = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULEDATE");
                        maintenanceInfo.ScheduleTime = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULETIME");
                        maintenanceInfo.WorkOrderStatus = Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS");
                        maintenanceInfo.NotificationID = Common.GetSafeInt32(dataReaderInfo, "FNOTIFICATIONID");
                    }

                    maintenanceInfo.ScheduleStatus = Common.GetSafeString(dataReaderInfo, "FSCHEDULESTATUS");
                    maintenanceInfo.ScheduleDetailID = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULE_DTL_ID");

                    maintenanceInfo.TaskGroupID = Common.GetSafeInt32(dataReaderInfo, "FTASKGROUPID");
                    maintenanceInfo.TaskGroupName = Common.GetSafeString(dataReaderInfo, "FTASKGROUPNAME");
                    maintenanceInfo.TaskGroupIdentifier = Common.GetSafeInt32(dataReaderInfo, "FIDENTIFIER");
                    maintenanceInfo.TaskGroupVersion = Common.GetSafeInt32(dataReaderInfo, "FVERSION");
                    maintenanceInfo.ManualTaskGroupID = Common.GetSafeInt32(dataReaderInfo, "FMANTASKGROUPID");
                }
                dataReaderInfo.Close();

                //if task group SOP is deleted then populate it from latest approved deleted version
                if (maintenanceInfo.TaskGroupID == 0 && maintenanceInfo.TaskGroupIdentifier > 0)
                {
                    dataReaderInfo = MaintenanceDAL.GetLastApprovedTaskGroupSOP(db, filterInfo.SiteID, maintenanceInfo.TaskGroupIdentifier);
                    if (dataReaderInfo.Read())
                    {
                        maintenanceInfo.TaskGroupID = Common.GetSafeInt32(dataReaderInfo, "FTASKGROUPID");
                        maintenanceInfo.TaskGroupName = Common.GetSafeString(dataReaderInfo, "FTASKGROUPNAME");
                        maintenanceInfo.TaskGroupVersion = Common.GetSafeInt32(dataReaderInfo, "FVERSION");
                        maintenanceInfo.IsTaskGroupSOPRemoved = true;
                    }
                    dataReaderInfo.Close();
                }

                return maintenanceInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while getting maintenance info for edit ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public int DeleteMaintenanceInfo(MaintenanceFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int schedule_dtl_id = 0;
                bool isNotificationOrder = false;
                string workOrderID = string.Empty;

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                if (filterInfo.MaintScheduleType != ScheduleType.WorkOrder)
                {
                    dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, filterInfo.SiteID, filterInfo.MaintScheduleID, string.Empty, true);
                    if (dataReaderInfo.Read())
                    {
                        dataReaderInfo.Close();
                        return -1; //work order is in-progress, cannot delete this schedule
                    }
                    else
                        dataReaderInfo.Close();
                }
                else
                {
                    dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, filterInfo.SiteID, filterInfo.MaintScheduleID, string.Empty, false);
                    string workOrderStatus = string.Empty;
                    if (dataReaderInfo.Read())
                    {
                        isNotificationOrder = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FISNOTIFICATIONORDER")) == 'Y';
                        workOrderID = Common.GetSafeString(dataReaderInfo, "FWORK_ORDERID");
                        workOrderStatus = Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS");
                    }
                    dataReaderInfo.Close();

                    if (workOrderStatus != WorkOrderStatus.SCHEDULED.ToString() && workOrderStatus != WorkOrderStatus.OVERDUE.ToString() && workOrderStatus != WorkOrderStatus.CREATED.ToString() && workOrderStatus != WorkOrderStatus.CANCELLED.ToString())
                    {
                        return -1; //work order is in-progress, cannot delete this schedule
                    }
                }
                //get schedule detail info
                dataReaderInfo = MaintenanceDAL.GetScheduleDetailInfoForSchedule(db, null, filterInfo.SiteID, filterInfo.MaintScheduleID);
                if (dataReaderInfo.Read())
                {
                    schedule_dtl_id = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULE_DTL_ID");
                }
                dataReaderInfo.Close();

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        //set fstatus to 'I'
                        MaintenanceDAL.DeleteMaintenanceInfo(db, transaction, filterInfo.SiteID, filterInfo.MaintScheduleID, filterInfo.UserID, currentDate, currentTime);

                        //delete all pending work orders
                        MaintenanceDAL.DeleteMaintenanceWorkOrderInfo(db, transaction, filterInfo.SiteID, schedule_dtl_id, filterInfo.UserID, currentDate, currentTime);

                        //update status and notification workorder of notification
                        if (isNotificationOrder)
                        {
                            //If wrok order is created based on notifictaion, then reset the status of notifictaion to CREATED
                            MaintenanceDAL.UpdateNotificationStatus(db, transaction, filterInfo.SiteID, 0, workOrderID, NotificationStatus.CREATED.ToString(), filterInfo.UserID, currentDate, currentTime);
                            MaintenanceDAL.UpdateNotificationWorkOrder(db, transaction, filterInfo.SiteID, 0, workOrderID, filterInfo.UserID, currentDate, currentTime);
                        }

                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
                return 1;//success
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while deleting maintenance info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<TypeValueInfo> GetWorkGroupOfEquipemntOrLocation(MaintWorkGroupFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<TypeValueInfo> userWorkGroupInfoList = new List<TypeValueInfo>();
                TypeValueInfo workGroupInfo = null;

                dataReaderInfo = MaintenanceDAL.GetWorkGroupOfEquipemntOrLocation(db, filterInfo.SiteID, filterInfo.ReferenceID, filterInfo.ReferenceType);
                while (dataReaderInfo.Read())
                {
                    workGroupInfo = new TypeValueInfo();
                    workGroupInfo.TypeValue = Common.GetSafeInt32(dataReaderInfo, "FMASTERID");
                    workGroupInfo.DisplayName = Common.GetSafeString(dataReaderInfo, "FNAME");
                    userWorkGroupInfoList.Add(workGroupInfo);
                }
                dataReaderInfo.Close();

                return userWorkGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting user work group for schedule", "Vegam_MaintenanceService", MethodBase.GetCurrentMethod().Name, "SITEID: " + filterInfo.SiteID + " ;USERID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool CancelmaintenanceWorkOrder(MaintenanceFilterInfo filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                MaintenanceDAL.UpdateMaintWorkOrderStatus(db, null, filterInfo.SiteID, filterInfo.WorkOrderID, WorkOrderStatus.CANCELLED.ToString(), filterInfo.UserID, currentDate, currentTime, 0);
                return true;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while canceling maintenance work order", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public bool UpdateMaintWorkOrderScheduleDateTime(MaintenanceFilterInfo filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                MaintenanceDAL.UpdateMaintWorkOrderScheduleDateTime(db, filterInfo.SiteID, filterInfo.WorkOrderID, filterInfo.ScheduleDate, filterInfo.ScheduleTime, filterInfo.UserID, currentDate, currentTime);
                return true;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating maintenance work order schedule time", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #region Work Instruction

        public List<MaintTaskGroupInfo> GetTaskGroupList(MaintTaskGroupFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintTaskGroupInfo> taskGroupInfoList = new List<MaintTaskGroupInfo>();
                MaintTaskGroupInfo taskGroupInfo = null;

                dataReaderInfo = MaintenanceDAL.GetTaskGroupList(db, filterInfo.SiteID, filterInfo.SearchTaskGroupName, filterInfo.TaskGroupTypeID, TaskGroupRefType.TASK.ToString());
                while (dataReaderInfo.Read())
                {
                    taskGroupInfo = new MaintTaskGroupInfo();
                    taskGroupInfo.TaskGroupID = Common.GetSafeInt32(dataReaderInfo, "FTASKGROUPID");
                    taskGroupInfo.TaskGroupName = Common.GetSafeString(dataReaderInfo, "FTASKGROUPNAME");
                    taskGroupInfo.Identifier = Common.GetSafeInt32(dataReaderInfo, "FIDENTIFIER");
                    taskGroupInfo.VersionNumber = Common.GetSafeInt32(dataReaderInfo, "FVERSION");
                    taskGroupInfoList.Add(taskGroupInfo);
                }
                dataReaderInfo.Close();

                return taskGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task group list for manage schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<MaintTaskInfo> GetTaskDetailsForTaskGroup(MaintTaskGroupFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintTaskInfo> taskInfoList = new List<MaintTaskInfo>();
                MaintTaskInfo taskInfo = null;

                dataReaderInfo = MaintenanceDAL.GetTaskDetailsForTaskGroup(db, filterInfo.SiteID, filterInfo.TaskGroupID);
                while (dataReaderInfo.Read())
                {
                    taskInfo = new MaintTaskInfo();
                    taskInfo.TaskID = Common.GetSafeInt32(dataReaderInfo, "FTASKID");
                    taskInfo.TaskName = Common.GetSafeString(dataReaderInfo, "FTASKNAME");
                    taskInfo.Description = Common.GetSafeString(dataReaderInfo, "FDESCRIPTION");
                    taskInfo.EstimatedTime = Math.Round(Common.GetSafeDecimal(dataReaderInfo, "FESTIMATEDTIME") / 60, 2);//convert seconds to mins
                    taskInfoList.Add(taskInfo);
                }
                dataReaderInfo.Close();

                return taskInfoList;

            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching task list for manange schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool UpdateMaintenanceTaskGroupInfo(MaintTaskGroupFilterInfo filterInfo)
        {
            IDataReader dataReader = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        dataReader = MaintenanceDAL.CheckMaintenanceScheduleStatus(db, transaction, filterInfo.SiteID, filterInfo.ScheduleID);
                        if (dataReader.Read())
                        {
                            //if manual task group exists, then mark it as in-active
                            int taskGroupID = Common.GetSafeInt32(dataReader, "FTASKGROUPID");
                            if (taskGroupID > 0)
                            {
                                dataReader.Close();
                                MaintenanceDAL.SetTaskGroupStatus(db, transaction, filterInfo.SiteID, taskGroupID, 'I', filterInfo.UserID, currentDate, currentTime, false);
                            }
                        }
                        else
                            dataReader.Close();

                        MaintenanceDAL.UpdateMaintenanceTaskGroupInfo(db, transaction, filterInfo.SiteID, filterInfo.ScheduleID, filterInfo.Identifier, 0, filterInfo.UserID, currentDate, currentTime);

                        transaction.Commit();
                    }
                    catch (Exception)
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating task group info for schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
            }
        }

        public int GetTaskGroupIdentifier(MaintTaskGroupFilterInfo filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int taskGroupID = MaintenanceDAL.GetNextIdentifierID(db);
                return taskGroupID;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating task group identifier under manual task info for schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public TaskGroupIdentifier UpdateMaintenanceTaskInfo(MaintTaskGroupFilterInfo filterInfo, TaskInfo taskInfo)
        {
            try
            {
                TaskGroupIdentifier taskGroupIdentifier = new TaskGroupIdentifier();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        int taskGroupID = 0;
                        int identifierID = 0;
                        if (filterInfo.Identifier == 0)
                            identifierID = MaintenanceDAL.GetNextIdentifierID(db);
                        else
                            identifierID = filterInfo.Identifier;

                        //mark previous task group SOP status to Inactive
                        if (filterInfo.TaskGroupID > 0)
                        {
                            MaintenanceDAL.SetTaskGroupStatus(db, transaction, filterInfo.SiteID, filterInfo.TaskGroupID, 'I', filterInfo.UserID, currentDate, currentTime, false);
                        }

                        taskGroupID = MaintenanceDAL.InsertTaskGroupInfo(db, transaction, filterInfo.SiteID, "MANUAL_TASK", 0, identifierID, 1, (char)TaskGroupStatus.Approved, TaskGroupRefType.SCHEDULE.ToString(), filterInfo.ScheduleID, filterInfo.UserID, currentDate, currentTime);

                        MaintenanceDAL.UpdateMaintenanceTaskGroupInfo(db, transaction, filterInfo.SiteID, filterInfo.ScheduleID, identifierID, taskGroupID, filterInfo.UserID, currentDate, currentTime);

                        taskGroupIdentifier.IdentifierID = identifierID;
                        InsertUpdateTaskInfoWithDependencies(db, transaction, filterInfo, taskGroupID, taskInfo, TaskGroupRefType.SCHEDULE, currentDate, currentTime, ref taskGroupIdentifier);

                        taskGroupIdentifier.VersionNumber = taskGroupID; //using to send task group id

                        if (taskGroupIdentifier.IdentifierID < 0)
                        {
                            return taskGroupIdentifier;
                        }

                        transaction.Commit();
                    }
                    catch (Exception)
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
                return taskGroupIdentifier;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating manual task info for schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #endregion

        #region Spare Parts

        public List<MaintSparePartInfo> GetSparePartMaterialDetails(BasicParam basicParam)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintSparePartInfo> sparePartList = new List<MaintSparePartInfo>();
                MaintSparePartInfo sparePartInfo = null;

                dataReaderInfo = MaintenanceDAL.GetSparePartMaterialDetails(db, basicParam.SiteID, string.Empty);
                while (dataReaderInfo.Read())
                {
                    sparePartInfo = new MaintSparePartInfo();
                    sparePartInfo.MaterialNumber = Common.GetSafeString(dataReaderInfo, "FIDHID");
                    sparePartInfo.MaterialDesc = Common.GetSafeString(dataReaderInfo, "FIDHDESC");
                    sparePartInfo.UOM = Common.GetSafeString(dataReaderInfo, "FBASEUOM");
                    sparePartList.Add(sparePartInfo);
                }
                dataReaderInfo.Close();

                return sparePartList;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching spare part material list for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<MaintSparePartInfo> GetMaintSparePartDetails(MaintenanceFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                List<MaintSparePartInfo> sparePartList = new List<MaintSparePartInfo>();
                MaintSparePartInfo sparePartInfo = null;

                dataReaderInfo = MaintenanceDAL.GetMaintSparePartDetails(db, filterInfo.SiteID, filterInfo.MaintScheduleID);
                while (dataReaderInfo.Read())
                {
                    sparePartInfo = new MaintSparePartInfo();
                    sparePartInfo.MaterialNumber = Common.GetSafeString(dataReaderInfo, "FIDHID");
                    sparePartInfo.MaterialDesc = Common.GetSafeString(dataReaderInfo, "FIDHDESC");
                    sparePartInfo.Quantity = Common.GetSafeDecimal(dataReaderInfo, "FQTY");
                    sparePartInfo.UOM = Common.GetSafeString(dataReaderInfo, "FBASEUOM");
                    sparePartInfo.IsSOPSparePart = Common.GetSafeString(dataReaderInfo, "FISSOPSPAREPART") == "Y" ? true : false;
                    sparePartList.Add(sparePartInfo);
                }
                dataReaderInfo.Close();

                return sparePartList;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching spare part info for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool SaveMaintSparePartInfo(MaintSparePartDetails maintSparePartDetails)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, maintSparePartDetails.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        MaintenanceDAL.DeleteMaintSparePartInfo(db, transaction, maintSparePartDetails.SiteID, maintSparePartDetails.ScheduleID, maintSparePartDetails.UserID, currentDate, currentTime, string.Empty);

                        foreach (var sparePartInfo in maintSparePartDetails.SparePartList)
                        {
                            if (MaintenanceDAL.CheckMaintSparePartExists(db, transaction, maintSparePartDetails.SiteID, maintSparePartDetails.ScheduleID, sparePartInfo.MaterialNumber))
                            {
                                MaintenanceDAL.UpdateMaintSparePart(db, transaction, maintSparePartDetails.SiteID, maintSparePartDetails.ScheduleID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, maintSparePartDetails.UserID, currentDate, currentTime);
                            }
                            else
                            {
                                MaintenanceDAL.InsertMaintSparePartInfo(db, transaction, maintSparePartDetails.SiteID, maintSparePartDetails.ScheduleID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, maintSparePartDetails.UserID, currentDate, currentTime);
                            }
                        }

                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while saving spare part info for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + maintSparePartDetails.SiteID + ";UserID: " + maintSparePartDetails.UserID);
                throw new FaultException(ex.Message);
            }
        }

        public bool DeleteMaintSparePartInfo(MaintSparePartFilter filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                MaintenanceDAL.DeleteMaintSparePartInfo(db, null, filterInfo.SiteID, filterInfo.ScheduleID, filterInfo.UserID, currentDate, currentTime, filterInfo.SparePartID);

                return true;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while deleting spare part info for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(ex.Message);
            }
        }

        #endregion

        #region Attachments

        public List<DocumentInfo> GetAttachmentDetailsForSchedule(MaintenanceFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                List<DocumentInfo> attachmentList = new List<DocumentInfo>();
                DocumentInfo attachmentInfo = null;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string attachmentPath = ConfigurationManager.AppSettings["MaintScheduleAttachmentPath"].ToString().TrimEnd('/') + "/" + filterInfo.SiteID + "/" + filterInfo.MaintScheduleID;

                dataReaderInfo = MaintenanceDAL.GetAttachmentDetailsForSchedule(db, filterInfo.SiteID, filterInfo.MaintScheduleID);
                while (dataReaderInfo.Read())
                {
                    attachmentInfo = new DocumentInfo();
                    attachmentInfo.DocumentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                    attachmentInfo.DocumentName = Common.GetSafeString(dataReaderInfo, "FDOCUMENTNAME");
                    attachmentInfo.DocumentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(dataReaderInfo, "FDOCUMENTTYPE"));
                    attachmentInfo.DownloadPath = attachmentPath + "/" + attachmentInfo.DocumentName;
                    if (attachmentInfo.DocumentType == DocumentType.IMAGE)
                        attachmentInfo.ThumbnailPath = attachmentPath + "/Thumbnail/" + attachmentInfo.DocumentName;

                    attachmentList.Add(attachmentInfo);
                }
                dataReaderInfo.Close();

                return attachmentList;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching attachment details for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<DocumentInfo> GetAttachmentDetailsForWorkOrder(BasicParam basicParam, string workOrderID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int scheduleID = MaintenanceDAL.GetAttachedWorkOrderScheduleID(db, null, basicParam.SiteID, workOrderID);

                MaintenanceFilterInfo filterInfo = new MaintenanceFilterInfo();
                filterInfo.SiteID = basicParam.SiteID;
                filterInfo.UserID = basicParam.UserID;
                filterInfo.MaintScheduleID = scheduleID;

                return GetAttachmentDetailsForSchedule(filterInfo);
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching attachment details for maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        #region Create Schedule

        public ScheduleDetailInfo GetMaintScheduleDetailInfo(ScheduleFilterInfo filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                return GetMaintScheduleDetailInfo(db, filterInfo);
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching maintenance schedule detail info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private ScheduleDetailInfo GetMaintScheduleDetailInfo(Database db, ScheduleFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                ScheduleDetailInfo scheduleDetailInfo = new ScheduleDetailInfo();

                dataReaderInfo = MaintenanceDAL.GetMaintScheduleDetailInfo(db, filterInfo.SiteID, filterInfo.MaintScheduleID);
                if (dataReaderInfo.Read())
                {
                    scheduleDetailInfo.ScheduleDetailID = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULE_DTL_ID");
                    scheduleDetailInfo.Frequency = (Schd_Frequency)Enum.Parse(typeof(Schd_Frequency), Common.GetSafeString(dataReaderInfo, "FFREQUENCY"));
                    scheduleDetailInfo.Interval = Common.GetSafeInt32(dataReaderInfo, "FINTERVAL");
                    scheduleDetailInfo.BasedOnLastPerformanceDate = Common.GetSafeString(dataReaderInfo, "FBASEDONPERFDATE") == "Y" ? true : false;
                    scheduleDetailInfo.StartDate = Common.GetSafeInt32(dataReaderInfo, "FSTARTDATE");
                    scheduleDetailInfo.StartTime = Common.GetSafeInt32(dataReaderInfo, "FSTARTTIME");
                    scheduleDetailInfo.EndDate = Common.GetSafeInt32(dataReaderInfo, "FENDDATE");
                    scheduleDetailInfo.EndNumOccurrence = Common.GetSafeInt32(dataReaderInfo, "FENDNUM_OCCURENCE");
                    scheduleDetailInfo.WeekDay = Common.GetSafeString(dataReaderInfo, "FWEEK_DAY").Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();

                    int monthOption = Common.GetSafeInt32(dataReaderInfo, "FMONTH_OPTION");
                    if (monthOption > 0)
                        scheduleDetailInfo.MonthOption = (Schd_MonthOption)monthOption;

                    string[] monthDays = Common.GetSafeString(dataReaderInfo, "FMONTH_DAY").Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                    foreach (string day in monthDays)
                    {
                        int dayNum = 0;
                        int.TryParse(day.Trim(), out dayNum);
                        scheduleDetailInfo.MonthDay.Add(dayNum);
                    }

                    scheduleDetailInfo.MonthPosition = Common.GetSafeString(dataReaderInfo, "FMONTH_POSITION").Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();

                    int yearOption = Common.GetSafeInt32(dataReaderInfo, "FYEAR_OPTION");
                    if (yearOption > 0)
                        scheduleDetailInfo.YearOption = (Schd_YearOption)yearOption;

                    scheduleDetailInfo.YearMonth = Common.GetSafeString(dataReaderInfo, "FYEAR_MONTH").Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
                    scheduleDetailInfo.NotifyDay = Common.GetSafeInt32(dataReaderInfo, "FNOTIFYDAY");
                }
                dataReaderInfo.Close();

                return scheduleDetailInfo;
            }
            catch 
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public int InsertUpdateMaintenanceScheduleDetailInfo(ScheduleDetailInfo schdDetailInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                int scheduleDetailID = 0;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, schdDetailInfo.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        string frequency = schdDetailInfo.Frequency != null ? schdDetailInfo.Frequency.ToString() : string.Empty;
                        int monthOption = schdDetailInfo.MonthOption != null ? (int)schdDetailInfo.MonthOption : 0;
                        int yearOption = schdDetailInfo.YearOption != null ? (int)schdDetailInfo.YearOption : 0;

                        string weekDay = schdDetailInfo.WeekDay != null ? string.Join(",", schdDetailInfo.WeekDay) : string.Empty;
                        string monthDay = schdDetailInfo.MonthDay != null ? string.Join(",", schdDetailInfo.MonthDay) : string.Empty;
                        string monthPosition = schdDetailInfo.MonthPosition != null ? string.Join(",", schdDetailInfo.MonthPosition) : string.Empty;
                        string yearMonth = schdDetailInfo.YearMonth != null ? string.Join(",", schdDetailInfo.YearMonth) : string.Empty;

                        if (schdDetailInfo.ScheduleDetailID > 0)
                        {
                            scheduleDetailID = schdDetailInfo.ScheduleDetailID;

                            ScheduleStatus scheduleStatus = ScheduleStatus.CANCELLED;
                            dataReaderInfo = MaintenanceDAL.CheckMaintenanceScheduleStatus(db, transaction, schdDetailInfo.SiteID, schdDetailInfo.ScheduleID);
                            if (dataReaderInfo.Read())
                            {
                                scheduleStatus = (ScheduleStatus)Enum.Parse(typeof(ScheduleStatus), Common.GetSafeString(dataReaderInfo, "FSCHEDULESTATUS"));
                            }
                            dataReaderInfo.Close();

                            //update schedule details
                            MaintenanceDAL.UpdateMaintenanceScheduleDetail(db, transaction, schdDetailInfo.SiteID, scheduleDetailID, 1, frequency, schdDetailInfo.Interval, schdDetailInfo.BasedOnLastPerformanceDate
                            , schdDetailInfo.StartDate, schdDetailInfo.StartTime, schdDetailInfo.EndDate, schdDetailInfo.EndNumOccurrence, weekDay, monthOption, monthDay, monthPosition
                            , yearOption, yearMonth, schdDetailInfo.NotifyDay, schdDetailInfo.UserID, currentDate, currentTime);

                            //update maintenance schedule status as 'Scheduling' only if schedule status is Released
                            if (scheduleStatus == ScheduleStatus.RELEASED)
                            {
                                MaintenanceDAL.UpdateMaintenanceScheduleStatus(db, transaction, schdDetailInfo.SiteID, schdDetailInfo.ScheduleID, schdDetailInfo.UserID, currentDate, currentTime, ScheduleStatus.SCHEDULING.ToString());
                            }
                        }
                        else
                        {
                            //intset new schedule details
                            scheduleDetailID = MaintenanceDAL.InsertMaintenanceScheduleDetail(db, transaction, schdDetailInfo.SiteID, schdDetailInfo.ScheduleID, 1, frequency, schdDetailInfo.Interval, schdDetailInfo.BasedOnLastPerformanceDate
                                , schdDetailInfo.StartDate, schdDetailInfo.StartTime, schdDetailInfo.EndDate, schdDetailInfo.EndNumOccurrence, weekDay, monthOption, monthDay, monthPosition
                                , yearOption, yearMonth, schdDetailInfo.NotifyDay, schdDetailInfo.UserID, currentDate, currentTime);
                        }

                        //update recurrence rule desc format
                        RecurrenceRuleDescInfo recurrenceRuleDescInfo = PopulateRecurrentRuleDescDetails(schdDetailInfo);
                        MaintenanceDAL.UpdateScheduleRuleDisplayTextFormat(db, transaction, schdDetailInfo.SiteID, schdDetailInfo.ScheduleID, (int)recurrenceRuleDescInfo.RuleDescType, recurrenceRuleDescInfo.RuleDesc);

                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }

                return scheduleDetailID;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating schedule detail info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + schdDetailInfo.SiteID + ";UserID: " + schdDetailInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool ActivateMaintenanceSchedule(ScheduleFilterInfo filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);
                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        if (filterInfo.ScheduleType == ScheduleType.WorkOrder)
                        {
                            MaintenanceDAL.UpdateMaintWorkOrderStatus(db, transaction, filterInfo.SiteID, string.Empty, WorkOrderStatus.SCHEDULED.ToString(), filterInfo.UserID, currentDate, currentTime, filterInfo.MaintScheduleID);
                            MaintenanceDAL.UpdateMaintenanceScheduleStatus(db, transaction, filterInfo.SiteID, filterInfo.MaintScheduleID, filterInfo.UserID, currentDate, currentTime, ScheduleStatus.RELEASED.ToString());
                        }
                        else
                        {
                            //Mark schedule status as 'Scheduling'
                            MaintenanceDAL.UpdateMaintenanceScheduleStatus(db, transaction, filterInfo.SiteID, filterInfo.MaintScheduleID, filterInfo.UserID, currentDate, currentTime, ScheduleStatus.SCHEDULING.ToString());
                        }
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while activating maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public bool InActivateMaintenanceSchedule(ScheduleFilterInfo filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        if (filterInfo.ScheduleType != ScheduleType.WorkOrder)
                        {
                            int scheduleDetailID = 0;
                            dataReaderInfo = MaintenanceDAL.GetScheduleDetailInfoForSchedule(db, transaction, filterInfo.SiteID, filterInfo.MaintScheduleID);
                            if (dataReaderInfo.Read())
                            {
                                scheduleDetailID = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULE_DTL_ID");
                            }
                            dataReaderInfo.Close();

                            //Delete upcoming schedules
                            if (scheduleDetailID > 0)
                            {
                                MaintenanceDAL.DeleteMaintenanceWorkOrderInfo(db, transaction, filterInfo.SiteID, scheduleDetailID, filterInfo.UserID, currentDate, currentTime);
                            }
                        }
                        else
                        {
                            MaintenanceDAL.UpdateMaintWorkOrderStatus(db, transaction, filterInfo.SiteID, string.Empty, WorkOrderStatus.CREATED.ToString(), filterInfo.UserID, currentDate, currentTime, filterInfo.MaintScheduleID);
                        }
                        //Mark schedule status as 'Cancelled'
                        MaintenanceDAL.UpdateMaintenanceScheduleStatus(db, transaction, filterInfo.SiteID, filterInfo.MaintScheduleID, filterInfo.UserID, currentDate, currentTime, ScheduleStatus.CANCELLED.ToString());

                        transaction.Commit();
                    }
                    catch (Exception)
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while in-activating maintenance schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        private RecurrenceRuleDescInfo PopulateRecurrentRuleDescDetails(ScheduleDetailInfo scheduleDetailInfo)
        {
            RecurrenceRuleDescInfo rRuleDescInfo = new RecurrenceRuleDescInfo();

            if (scheduleDetailInfo.Frequency == Schd_Frequency.HOURLY)
            {
                if (scheduleDetailInfo.Interval > 1)
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNHour;
                    rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "]";
                }
                else
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryHour;
                    rRuleDescInfo.RuleDesc = "";
                }
            }
            else if (scheduleDetailInfo.Frequency == Schd_Frequency.DAILY)
            {
                if (scheduleDetailInfo.Interval > 1)
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNDay;
                    rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "]";
                }
                else
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryDay;
                    rRuleDescInfo.RuleDesc = "";
                }
            }
            else if (scheduleDetailInfo.Frequency == Schd_Frequency.WEEKLY)
            {
                if (scheduleDetailInfo.Interval > 1)
                {
                    if (scheduleDetailInfo.WeekDay.Count > 0)
                    {
                        rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNWeekDay;
                        rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "][" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";
                    }
                    else
                    {
                        rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNWeek;
                        rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "]";
                    }
                }
                else
                {
                    if (scheduleDetailInfo.WeekDay.Count > 0)
                    {
                        rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryWeekDay;
                        rRuleDescInfo.RuleDesc = "[" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";
                    }
                    else
                    {
                        rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryWeek;
                        rRuleDescInfo.RuleDesc = "";
                    }
                }
            }
            else if (scheduleDetailInfo.Frequency == Schd_Frequency.MONTHLY)
            {
                if (scheduleDetailInfo.Interval > 1)
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNMonth;
                    rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "]";
                }
                else
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryMonth;
                    rRuleDescInfo.RuleDesc = "";
                }

                if (scheduleDetailInfo.MonthOption == Schd_MonthOption.Monthly_By_Date)
                {
                    if (scheduleDetailInfo.Interval > 1)
                    {
                        if (scheduleDetailInfo.MonthDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNMonthByDate;
                            rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "][" + string.Join(",", scheduleDetailInfo.MonthDay) + "]";
                        }
                    }
                    else
                    {
                        if (scheduleDetailInfo.MonthDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryMonthByDate;
                            rRuleDescInfo.RuleDesc = "[" + string.Join(",", scheduleDetailInfo.MonthDay) + "]";
                        }
                    }
                }
                else
                {
                    if (scheduleDetailInfo.Interval > 1)
                    {
                        if (scheduleDetailInfo.MonthPosition.Count > 0 || scheduleDetailInfo.WeekDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNMonthByDay;
                            rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "][" + string.Join(",", scheduleDetailInfo.MonthPosition) + "][" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";

                        }
                    }
                    else
                    {
                        if (scheduleDetailInfo.MonthPosition.Count > 0 || scheduleDetailInfo.WeekDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryMonthByDay;
                            rRuleDescInfo.RuleDesc = "[" + string.Join(",", scheduleDetailInfo.MonthPosition) + "][" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";

                        }
                    }
                }
            }
            else if (scheduleDetailInfo.Frequency == Schd_Frequency.YEARLY)
            {
                if (scheduleDetailInfo.Interval > 1)
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNYear;
                    rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "]";
                }
                else
                {
                    rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryYear;
                    rRuleDescInfo.RuleDesc = "";
                }

                if (scheduleDetailInfo.YearOption == Schd_YearOption.Yearly_By_Date)
                {
                    if (scheduleDetailInfo.Interval > 1)
                    {
                        if (scheduleDetailInfo.YearMonth.Count > 0 || scheduleDetailInfo.MonthDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNYearByDate;
                            rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "][" + string.Join(",", scheduleDetailInfo.YearMonth) + "][" + string.Join(",", scheduleDetailInfo.MonthDay) + "]";
                        }
                    }
                    else
                    {
                        if (scheduleDetailInfo.YearMonth.Count > 0 || scheduleDetailInfo.MonthDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryYearByDate;
                            rRuleDescInfo.RuleDesc = "[" + string.Join(",", scheduleDetailInfo.YearMonth) + "][" + string.Join(",", scheduleDetailInfo.MonthDay) + "]";
                        }
                    }
                }
                else
                {
                    if (scheduleDetailInfo.Interval > 1)
                    {
                        if (scheduleDetailInfo.YearMonth.Count > 0 || scheduleDetailInfo.MonthPosition.Count > 0 || scheduleDetailInfo.WeekDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryNYearByDay;
                            rRuleDescInfo.RuleDesc = "[" + scheduleDetailInfo.Interval + "][" + string.Join(",", scheduleDetailInfo.YearMonth) + "][" + string.Join(",", scheduleDetailInfo.MonthPosition) + "][" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";
                        }
                    }
                    else
                    {
                        if (scheduleDetailInfo.YearMonth.Count > 0 || scheduleDetailInfo.MonthPosition.Count > 0 || scheduleDetailInfo.WeekDay.Count > 0)
                        {
                            rRuleDescInfo.RuleDescType = RecurrenceRuleDescType.EveryYearByDay;
                            rRuleDescInfo.RuleDesc = "[" + string.Join(",", scheduleDetailInfo.YearMonth) + "][" + string.Join(",", scheduleDetailInfo.MonthPosition) + "][" + string.Join(",", scheduleDetailInfo.WeekDay) + "]";
                        }
                    }
                }
            }

            return rRuleDescInfo;
        }

        public ScheduleWorkOrderDetails GetScheduleWorkOrderDetails(ScheduleWorkOrderFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                ScheduleWorkOrderDetails scheduleWorkOrderDetails = new ScheduleWorkOrderDetails();
                ScheduleWorkOrderInfo workOrderInfo = null;

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Common.GetSiteDateTimeFormat(db, filterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);

                string workOrderStatus = filterInfo.Status != null ? filterInfo.Status : string.Empty;

                dataReaderInfo = MaintenanceDAL.GetScheduleWorkOrderDetails(db, filterInfo.SiteID, filterInfo.ScheduleID, workOrderStatus, filterInfo.PageIndex, filterInfo.PageSize);
                while (dataReaderInfo.Read())
                {
                    workOrderInfo = new ScheduleWorkOrderInfo();
                    workOrderInfo.Status = Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS");
                    workOrderInfo.WorkOrder = Common.GetSafeString(dataReaderInfo, "FWORK_ORDERID");

                    DateTime dateTime;

                    int date = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULEDATE");
                    int time = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULETIME");
                    DateTime.TryParseExact(date.ToString() + time.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime);
                    workOrderInfo.ScheduleDate = dateTime.ToString(siteDateFormat + " " + siteTimeFormat, CultureInfo.InvariantCulture);

                    date = Common.GetSafeInt32(dataReaderInfo, "FPLANNEDDATE");
                    time = Common.GetSafeInt32(dataReaderInfo, "FPLANNEDTIME");
                    DateTime.TryParseExact(date.ToString() + time.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime);
                    workOrderInfo.PlannedDate = dateTime.ToString(siteDateFormat + " " + siteTimeFormat, CultureInfo.InvariantCulture);

                    date = Common.GetSafeInt32(dataReaderInfo, "FSTARTDATE");
                    if (date > 0)
                    {
                        time = Common.GetSafeInt32(dataReaderInfo, "FSTARTTIME");
                        DateTime.TryParseExact(date.ToString() + time.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime);
                        workOrderInfo.StartDate = dateTime.ToString(siteDateFormat + " " + siteTimeFormat, CultureInfo.InvariantCulture);

                        date = Common.GetSafeInt32(dataReaderInfo, "FENDDATE");
                        if (date > 0)
                        {
                            time = Common.GetSafeInt32(dataReaderInfo, "FENDTIME");
                            DateTime.TryParseExact(date.ToString() + time.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime);
                            workOrderInfo.EndDate = dateTime.ToString(siteDateFormat + " " + siteTimeFormat, CultureInfo.InvariantCulture);
                        }
                    }

                    if (scheduleWorkOrderDetails.TotalRecords == 0)
                    {
                        scheduleWorkOrderDetails.TotalRecords = Common.GetSafeInt32(dataReaderInfo, "FCOUNT");
                    }

                    scheduleWorkOrderDetails.WorkOrderList.Add(workOrderInfo);
                }
                dataReaderInfo.Close();

                return scheduleWorkOrderDetails;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching work order details for schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        #endregion

        #region Auto Reschedule Work Order

        public void AutoReScheduleWorkOrder()
        {
            try
            {
                /**
                **Note: this auto rescheduling service runs at 12.00 AM to 12.20 AM
                */

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string activeSites = Common.GetActiveSitesBasedOnModules(db, false, false, false, false, false, false, true);
                string[] siteList = activeSites.Split(',');
                foreach (string site in siteList)
                {
                    int siteID = 0;
                    int.TryParse(site.Trim(), out siteID);

                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);

                    //Auto reschedule should happen till 12.30 AM
                   if (currentTime < 3000)
                        RescheduleWorkOrder(db, siteID, currentDate, currentTime);
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while auto rescheduling work orders", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "");
            }
        }

        public void RescheduleWorkOrder(Database db, int siteID, int currentDate, int currentTime)
        {
            try
            {
                DateTime currentDateTime;
                DateTime.TryParseExact(currentDate.ToString() + currentTime.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out currentDateTime);

                int yesterDayDate = Convert.ToInt32(currentDateTime.AddDays(-1).ToString("yyyyMMdd", CultureInfo.InvariantCulture));

                //Get all the work order scheduled yesterady (this method is executed just after the midnight & it auto roll over WO to TODAY
                DataTable workOrderInfoTable = MaintenanceDAL.GetYesterdaysWorkOrderForReschedule(db, siteID, yesterDayDate);
                foreach (DataRow dr in workOrderInfoTable.Rows)
                {
                    int scheduleDetailID = 0;
                    int.TryParse(dr["FREF_SCHEDULE_DTL_ID"].ToString().Trim(), out scheduleDetailID);
                    string workOrderID = dr["FWORK_ORDERID"].ToString().Trim();

                    int scheduleTime = 0;
                    int.TryParse(dr["FSCHEDULETIME"].ToString().Trim(), out scheduleTime);

                    string workOrderStatus = dr["FWORKORDERSTATUS"].ToString().Trim();

                    //Check if any order exists for the same schedule, scheduled on today. That means already same maintenance work is scheduled today also, so no need to roll over it 
                    //again.
                    if (!MaintenanceDAL.CheckWorkOrderExistsForToday(db, siteID, scheduleDetailID, currentDate) || workOrderStatus == "INPROGRESS")
                    {
                        MaintenanceDAL.UpdateScheduleDateForWorkOrder(db, null, siteID, workOrderID, currentDate, scheduleTime, false, 0, currentDate, currentTime);
                    }
                    else
                    {
                        //update 'overdue' status to work order
                        MaintenanceDAL.UpdateMaintWorkOrderStatus(db, null, siteID, workOrderID, WorkOrderStatus.OVERDUE.ToString(), 0, currentDate, currentTime, 0);
                    }
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while auto rescheduling work orders", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + siteID);
            }
        }

        #endregion

        #region Auto Update Maintenance Schedule

        public void AutoUpdateMaintenanceScheduleWorkOrder()
        {
            try
            {
                //this service will create or update work order for the schedule in a interval basis

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string activeSites = Common.GetActiveSitesBasedOnModules(db, false, false, false, false, false, false, true);
                string[] siteList = activeSites.Split(',');
                foreach (string site in siteList)
                {
                    int siteID = 0;
                    int.TryParse(site.Trim(), out siteID);

                    UpdateMaintenanceScheduleWorkOrderDetails(db, siteID);
                }

            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while auto updating maintenance schedule work orders", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "");
            }
        }

        private void UpdateMaintenanceScheduleWorkOrderDetails(Database db, int siteID)
        {
            try
            {
                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);

                DataTable scheduleDetailTable = MaintenanceDAL.GetSchedulesForAutoRecalculate(db, siteID, currentDate);
                foreach (DataRow dr in scheduleDetailTable.Rows)
                {
                    int scheduleDetailID = 0;
                    int.TryParse(dr["FSCHEDULE_DTL_ID"].ToString().Trim(), out scheduleDetailID);
                    int scheduleID = 0;
                    int.TryParse(dr["FSCHEDULEID"].ToString().Trim(), out scheduleID);

                    //get schedule detail information
                    ScheduleFilterInfo filterInfo = new ScheduleFilterInfo();
                    filterInfo.SiteID = siteID;
                    filterInfo.UserID = 0;
                    filterInfo.MaintScheduleID = scheduleID;
                    ScheduleDetailInfo scheduleDetailInfo = GetMaintScheduleDetailInfo(db,filterInfo);

                    if (scheduleDetailInfo.ScheduleDetailID > 0)
                    {
                        using (DbConnection connnection = db.CreateConnection())
                        {
                            connnection.Open();
                            DbTransaction transaction = connnection.BeginTransaction();
                            try
                            {
                                UpdateMaintenanceWorkOrderDetails(db, transaction, siteID, scheduleID, scheduleDetailID, scheduleDetailInfo, currentDate, currentTime);

                                transaction.Commit();
                            }
                            catch (Exception)
                            {
                                transaction.Rollback();
                                throw;
                            }
                            finally
                            {
                                connnection.Close();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while auto updating maintenance schedule work orders", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + siteID);
            }
        }

        private void UpdateMaintenanceWorkOrderDetails(Database db, DbTransaction transaction, int siteID, int scheduleID, int scheduleDetailID, ScheduleDetailInfo scheduleDetailInfo, int currentDate, int currentTime)
        {
            bool calculateSchedulingWorkOrders = true;

            //if based on last performance date
            if (scheduleDetailInfo.BasedOnLastPerformanceDate && (scheduleDetailInfo.Frequency != Schd_Frequency.DAILY || (scheduleDetailInfo.Frequency == Schd_Frequency.DAILY && scheduleDetailInfo.Interval > 1)))
            {
                calculateSchedulingWorkOrders = false;

                //get last executed work order
                DataTable lastWorkOrderInfoTable = MaintenanceDAL.GetLastExecutedWorkOrderForSchedule(db, transaction, siteID, scheduleDetailID);
                if (lastWorkOrderInfoTable.Rows.Count > 0)
                {
                    DataRow workOrderRow = lastWorkOrderInfoTable.Rows[0];

                    int plannedDate = 0;
                    int.TryParse(workOrderRow["FPLANNEDDATE"].ToString().Trim(), out plannedDate);
                    int plannedTime = 0;
                    int.TryParse(workOrderRow["FPLANNEDTIME"].ToString().Trim(), out plannedTime);
                    int finishDate = 0;
                    int.TryParse(workOrderRow["FENDDATE"].ToString().Trim(), out finishDate);
                    int finishTime = 0;
                    int.TryParse(workOrderRow["FENDTIME"].ToString().Trim(), out finishTime);
                    WorkOrderStatus workOrderStatus = (WorkOrderStatus)Enum.Parse(typeof(WorkOrderStatus), workOrderRow["FWORKORDERSTATUS"].ToString().Trim());

                    //if work order is completed and
                    //if work order's last completed date is greater than planned date then generate upcoming events based on last completed date for the schedule
                    if ((workOrderStatus == WorkOrderStatus.COMPLETED || workOrderStatus == WorkOrderStatus.CLOSED) && finishDate > plannedDate)
                    {
                        //change schedule start date
                        scheduleDetailInfo.StartDate = finishDate;

                        //if schedule is based on end occurence, then find how many pending work orders to complete
                        //and use that count as new end occurrence
                        if (scheduleDetailInfo.EndNumOccurrence > 0)
                        {
                            DataTable lastPlanWorkOrderTable = MaintenanceDAL.GetTotalScheduledWorkOrdersAvailable(db, transaction, siteID, scheduleDetailID, plannedDate, plannedTime);
                            if (lastPlanWorkOrderTable.Rows.Count > 0)
                            {
                                int count = 0;
                                int.TryParse(lastPlanWorkOrderTable.Rows[0]["FCOUNT"].ToString().Trim(), out count);
                                scheduleDetailInfo.EndNumOccurrence = count;
                            }
                        }

                        //Find next event & generate work orders based on next schedule event
                        var occurrences = GenerateRecurringEvents(scheduleDetailInfo);
                        if (occurrences.Count > 1)
                        {
                            int nextScheduleDate = 0;
                            int.TryParse(occurrences.ToList()[1].StartTime.Value.ToString("yyyyMMdd"), out nextScheduleDate);

                            scheduleDetailInfo.StartDate = nextScheduleDate;

                            //delete upcoming scheduled work orders
                            MaintenanceDAL.DeleteMaintenanceWorkOrderInfo(db, transaction, siteID, scheduleDetailID, 0, currentDate, currentTime);

                            //generate work orders
                            GenerateWorkOrdersForSchedule(db, transaction, siteID, scheduleID, scheduleDetailID, scheduleDetailInfo);
                        }
                    }
                }
                else
                    calculateSchedulingWorkOrders = true;
            }

            if (calculateSchedulingWorkOrders)
            {
                //Delete pending work orders for the schedule
                MaintenanceDAL.DeleteMaintenanceWorkOrderInfo(db, transaction, siteID, scheduleDetailID, 0, currentDate, currentTime);

                //generate work orders
                GenerateWorkOrdersForSchedule(db, transaction, siteID, scheduleID, scheduleDetailID, scheduleDetailInfo);

                //update schedule status as 'Released'
                MaintenanceDAL.UpdateMaintenanceScheduleStatus(db, transaction, siteID, scheduleID, 0, currentDate, currentTime, ScheduleStatus.RELEASED.ToString());
            }
        }

        public void AutoUpdateScheduleBasedOnLastPerformanceDate()
        {
            try
            {
                //this service runs daily once at 12.30 AM to 12.50 AM

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string activeSites = Common.GetActiveSitesBasedOnModules(db, false, false, false, false, false, false, true);
                string[] siteList = activeSites.Split(',');
                foreach (string site in siteList)
                {
                    int siteID = 0;
                    int.TryParse(site.Trim(), out siteID);

                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);

                    if (currentTime > 3000 && currentTime < 5000)
                        UpdateScheduleBasedOnLastPerformanceDate(db, siteID, currentDate, currentTime);
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while updating schedule based on last performance date", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "");
            }
        }

        private void UpdateScheduleBasedOnLastPerformanceDate(Database db, int siteID, int currentDate, int currentTime)
        {
            try
            {
                DateTime currentDateTime;
                DateTime.TryParseExact(currentDate.ToString() + currentTime.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None, out currentDateTime);

                int yesterDayDate = Convert.ToInt32(currentDateTime.AddDays(-1).ToString("yyyyMMdd", CultureInfo.InvariantCulture));

                DataTable scheduleDetailTable = MaintenanceDAL.GetSchedulesBasedOnLastPeformanceDate(db, siteID, yesterDayDate);
                foreach (DataRow dr in scheduleDetailTable.Rows)
                {
                    int scheduleDetailID = 0;
                    int.TryParse(dr["FSCHEDULE_DTL_ID"].ToString().Trim(), out scheduleDetailID);
                    int scheduleID = 0;
                    int.TryParse(dr["FSCHEDULEID"].ToString().Trim(), out scheduleID);

                    ScheduleFilterInfo filterInfo = new ScheduleFilterInfo();
                    filterInfo.SiteID = siteID;
                    filterInfo.UserID = 0;
                    filterInfo.MaintScheduleID = scheduleID;
                    ScheduleDetailInfo scheduleDetailInfo = GetMaintScheduleDetailInfo(filterInfo);
                    if (scheduleDetailInfo.ScheduleDetailID > 0)
                    {
                        using (DbConnection connnection = db.CreateConnection())
                        {
                            connnection.Open();
                            DbTransaction transaction = connnection.BeginTransaction();
                            try
                            {
                                UpdateMaintenanceWorkOrderDetails(db, transaction, siteID, scheduleID, scheduleDetailID, scheduleDetailInfo, currentDate, currentTime);

                                transaction.Commit();
                            }
                            catch (Exception)
                            {
                                transaction.Rollback();
                                throw;
                            }
                            finally
                            {
                                connnection.Close();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintainenceService", "Error while updating schedule based on last performance date", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + siteID);
            }
        }

        private void GenerateWorkOrdersForSchedule(Database db, DbTransaction transaction, int siteID, int scheduleID, int scheduleDetailID, ScheduleDetailInfo scheduleDetailInfo)
        {
            try
            {
                //calculate recurring events based on schedule details
                var occurrences = GenerateRecurringEvents(scheduleDetailInfo);

                //loop through all events and insert
                foreach (var evnt in occurrences)
                {
                    int scheduleDate = 0;
                    int.TryParse(evnt.StartTime.Value.ToString("yyyyMMdd"), out scheduleDate);
                    int scheduleTime = 0;
                    int.TryParse(evnt.StartTime.Value.ToString("HHmmss"), out scheduleTime);

                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, siteID, ref currentDate, ref currentTime);

                    if (!MaintenanceDAL.CheckWorkOrderWithPlannedTimeExists(db, transaction, siteID, scheduleDetailID, scheduleDate, scheduleTime))
                    {
                        string workOrder = MaintenanceDAL.GetNextMaintenanceWorkOrder(db);
                        MaintenanceDAL.InsertMaintenanceWorkOrderInfo(db, transaction, siteID, workOrder, scheduleDetailID, scheduleID, scheduleDate, scheduleTime, 'N', 0, currentDate, currentTime, WorkOrderStatus.SCHEDULED.ToString());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region Generate recurring events

        private HashSet<Period> GenerateRecurringEvents(ScheduleDetailInfo schdDetailInfo)
        {
            var startDateTime = DateTime.ParseExact(schdDetailInfo.StartDate.ToString().PadLeft(8, '0') + schdDetailInfo.StartTime.ToString().PadLeft(6, '0'), "yyyyMMddHHmmss", CultureInfo.InvariantCulture);
            var endDateTime = startDateTime.AddYears(100); //if no end date is availble, use near future date

            #region Creating rrule

            var rrule = new RecurrencePattern(GetFrequencyType(schdDetailInfo.Frequency), schdDetailInfo.Interval);
            if (schdDetailInfo.EndNumOccurrence > 0)
                rrule.Count = schdDetailInfo.EndNumOccurrence;
            else
                rrule.Until = DateTime.ParseExact(schdDetailInfo.EndDate.ToString().PadLeft(8, '0') + "235959", "yyyyMMddHHmmss", CultureInfo.InvariantCulture); ;

            if (schdDetailInfo.Frequency == Schd_Frequency.WEEKLY)
            {
                rrule.ByDay = GetWeekDayList(schdDetailInfo.WeekDay);
            }
            else if (schdDetailInfo.Frequency == Schd_Frequency.MONTHLY)
            {
                if (schdDetailInfo.MonthOption == Schd_MonthOption.Monthly_By_Date)
                {
                    rrule.ByMonthDay = schdDetailInfo.MonthDay;
                }
                else if (schdDetailInfo.MonthOption == Schd_MonthOption.Monthly_By_Day)
                {
                    rrule.BySetPosition = GetMonthPosition(schdDetailInfo.MonthPosition);
                    rrule.ByDay = GetWeekDayList(schdDetailInfo.WeekDay);
                }
            }
            else if (schdDetailInfo.Frequency == Schd_Frequency.YEARLY)
            {
                if (schdDetailInfo.YearOption == Schd_YearOption.Yearly_By_Date)
                {
                    rrule.ByMonth = GetYearMonthList(schdDetailInfo.YearMonth);
                    rrule.ByMonthDay = schdDetailInfo.MonthDay;
                }
                else if (schdDetailInfo.YearOption == Schd_YearOption.Yearly_By_Day)
                {
                    rrule.BySetPosition = GetMonthPosition(schdDetailInfo.MonthPosition);
                    rrule.ByDay = GetWeekDayList(schdDetailInfo.WeekDay);
                    rrule.ByMonth = GetYearMonthList(schdDetailInfo.YearMonth);
                }
            }

            //create first event
            var e = new Ical.Net.CalendarComponents.CalendarEvent
            {
                DtStart = new CalDateTime(startDateTime),
                RecurrenceRules = new List<RecurrencePattern> { rrule },
            };

            //apply rules & events to calendar
            var calendar = new Ical.Net.Calendar();
            calendar.Events.Add(e);

            #endregion

            //Get All occurences between range
            //var occurrences = calendar.GetOccurrences(startDateTime, endDateTime);

            var recurrenceEvaluator = new Ical.Net.Evaluation.RecurrencePatternEvaluator(rrule);
            var correctOccurrences = recurrenceEvaluator.Evaluate(e.DtStart, startDateTime, endDateTime, false);

            return correctOccurrences;
        }

        private FrequencyType GetFrequencyType(Schd_Frequency? frequency)
        {
            FrequencyType frequencyType = FrequencyType.Daily;
            switch (frequency)
            {
                case Schd_Frequency.HOURLY: frequencyType = FrequencyType.Hourly; break;
                case Schd_Frequency.DAILY: frequencyType = FrequencyType.Daily; break;
                case Schd_Frequency.WEEKLY: frequencyType = FrequencyType.Weekly; break;
                case Schd_Frequency.MONTHLY: frequencyType = FrequencyType.Monthly; break;
                case Schd_Frequency.YEARLY: frequencyType = FrequencyType.Yearly; break;
                default: break;
            }
            return frequencyType;
        }

        private List<WeekDay> GetWeekDayList(List<string> weekDate)
        {
            List<WeekDay> weekDays = new List<WeekDay>();
            foreach (string date in weekDate)
            {
                DayOfWeek dayOfWeek = DayOfWeek.Sunday;
                switch (date)
                {
                    case "SUN": dayOfWeek = DayOfWeek.Sunday; break;
                    case "MON": dayOfWeek = DayOfWeek.Monday; break;
                    case "TUE": dayOfWeek = DayOfWeek.Tuesday; break;
                    case "WED": dayOfWeek = DayOfWeek.Wednesday; break;
                    case "THU": dayOfWeek = DayOfWeek.Thursday; break;
                    case "FRI": dayOfWeek = DayOfWeek.Friday; break;
                    case "SAT": dayOfWeek = DayOfWeek.Saturday; break;
                    default: break;
                }
                weekDays.Add(new WeekDay(dayOfWeek));
            }
            return weekDays;
        }

        private List<int> GetMonthPosition(List<string> monthPosition)
        {
            List<int> positionList = new List<int>();
            foreach (var position in monthPosition)
            {
                int pos = 1;
                switch (position)
                {
                    case "FIRST": pos = 1; break;
                    case "SECOND": pos = 2; break;
                    case "THIRD": pos = 3; break;
                    case "FOURTH": pos = 4; break;
                    case "LAST": pos = -1; break;
                    default: break;
                }
                positionList.Add(pos);
            }
            return positionList;
        }

        private List<int> GetYearMonthList(List<string> yearMonth)
        {
            List<int> monthList = new List<int>();
            foreach (var month in yearMonth)
            {
                int mon = 1;
                switch (month)
                {
                    case "JAN": mon = 1; break;
                    case "FEB": mon = 2; break;
                    case "MAR": mon = 3; break;
                    case "APR": mon = 4; break;
                    case "MAY": mon = 5; break;
                    case "JUN": mon = 6; break;
                    case "JUL": mon = 7; break;
                    case "AUG": mon = 8; break;
                    case "SEP": mon = 9; break;
                    case "OCT": mon = 10; break;
                    case "NOV": mon = 11; break;
                    case "DEC": mon = 12; break;
                    default: break;
                }
                monthList.Add(mon);
            }
            return monthList;
        }

        #endregion

        #endregion

        #region Maintenance checklist Schedule

        public MeasurementDocumentInfo GetMeasurementDocumentInfo(MeasurementDocumentFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                MeasurementDocumentInfo measurementDocumentInfo = new MeasurementDocumentInfo();

                if (filterInfo.ScheduleID > 0)
                {
                    MeasDocMeasPoint measDocMeasPoint = null;
                    dataReaderInfo = MaintenanceDAL.GetMeasurementDocumentInfo(db, filterInfo.SiteID, filterInfo.ScheduleID);
                    if (dataReaderInfo.Read())
                    {
                        measurementDocumentInfo.MeasDocName = Common.GetSafeString(dataReaderInfo, "FMAINTENANCENAME");
                        measurementDocumentInfo.WorkGroupID = Common.GetSafeInt32(dataReaderInfo, "FWORKGROUPID");
                        measurementDocumentInfo.ScheduleDetailID = Common.GetSafeInt32(dataReaderInfo, "FSCHEDULE_DTL_ID");
                        measurementDocumentInfo.ScheduleStatus = Common.GetSafeString(dataReaderInfo, "FSCHEDULESTATUS");
                    }
                    dataReaderInfo.Close();

                    dataReaderInfo = MaintenanceDAL.GetMeasDocMeasuringPoints(db, filterInfo.SiteID, 0, 0, filterInfo.ScheduleID, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, true, 0, false, filterInfo.WorkGroupID);
                    while (dataReaderInfo.Read())
                    {
                        measDocMeasPoint = new MeasDocMeasPoint();
                        measDocMeasPoint.MeasuringPointID = Common.GetSafeInt32(dataReaderInfo, "FMEASURINGPOINTID");
                        measDocMeasPoint.MeasuringPointName = Common.GetSafeString(dataReaderInfo, "FMEASURINGPOINTNAME");
                        measDocMeasPoint.FunctionalLocation = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");
                        measDocMeasPoint.Equipment = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                        measDocMeasPoint.Category = Common.GetSafeString(dataReaderInfo, "FCATEGORY");

                        measurementDocumentInfo.MeasPointsList.Add(measDocMeasPoint);
                    }
                    dataReaderInfo.Close();
                }
                return measurementDocumentInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting maintenance checklist schedule info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public MeasurementDocumentInfo GetMeasDocMeasuringPoints(MeasurementDocumentFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                MeasurementDocumentInfo measurementDocumentInfo = new MeasurementDocumentInfo();
                MeasDocMeasPoint measDocMeasPoint = null;
                bool isConsiderSelected = filterInfo.PageSize == 0;

                bool restrictAccess = true;

                int accessLevelID = Common.GetUserAccessLevelID(db, filterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                dataReaderInfo = MaintenanceDAL.GetMeasDocMeasuringPoints(db, filterInfo.SiteID, filterInfo.PageSize, filterInfo.PageIndex, filterInfo.ScheduleID, filterInfo.FLocationIDs, filterInfo.EquipmentIDs, filterInfo.MeasuringPoint, filterInfo.CategoryIDs, filterInfo.SortType, isConsiderSelected, filterInfo.UserID, restrictAccess, filterInfo.WorkGroupID);
                while (dataReaderInfo.Read())
                {
                    measDocMeasPoint = new MeasDocMeasPoint();
                    measDocMeasPoint.MeasuringPointID = Common.GetSafeInt32(dataReaderInfo, "FMEASURINGPOINTID");
                    measDocMeasPoint.MeasuringPointName = Common.GetSafeString(dataReaderInfo, "FMEASURINGPOINTNAME");
                    measDocMeasPoint.FunctionalLocation = Common.GetSafeString(dataReaderInfo, "FLOCATIONNAME");
                    measDocMeasPoint.Equipment = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                    measDocMeasPoint.Category = Common.GetSafeString(dataReaderInfo, "FCATEGORY");

                    if (measurementDocumentInfo.TotalRecords == 0 && !isConsiderSelected)
                        measurementDocumentInfo.TotalRecords = Common.GetSafeInt32(dataReaderInfo, "FCOUNT");

                    measurementDocumentInfo.MeasPointsList.Add(measDocMeasPoint);
                }
                dataReaderInfo.Close();
                return measurementDocumentInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting measuring points for maintenance checklist schedule", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool InsertSelectedMeasuringPoint(MeasusrementDocumentScheduleInfo measurementDocInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, measurementDocInfo.SiteID, ref currentDate, ref currentTime);
                string status = string.Empty;
                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        foreach (var measuringPoint in measurementDocInfo.SelectedMeasuringPoints)
                        {
                            status = "A";
                            dataReaderInfo = MaintenanceDAL.CheckMeasuringPointExistForSchedule(db, transaction, measurementDocInfo.SiteID, measurementDocInfo.ScheduleID, measuringPoint);
                            if (dataReaderInfo.Read())
                            {
                                status = Common.GetSafeString(dataReaderInfo, "FSTATUS");
                                if (status == "I")
                                {
                                    MaintenanceDAL.UpdateMeasuringPointForSchedule(db, transaction, measurementDocInfo.SiteID, measurementDocInfo.ScheduleID, measuringPoint, measurementDocInfo.UserID, currentDate, currentTime);
                                }
                            }
                            else
                            {
                                MaintenanceDAL.InsertMeasuringPointForSchedule(db, transaction, measurementDocInfo.SiteID, measurementDocInfo.ScheduleID, measuringPoint, measurementDocInfo.UserID, currentDate, currentTime);
                            }
                            dataReaderInfo.Close();
                        }

                        transaction.Commit();
                        return true;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting measuring points for maintenance checklist schedule ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + measurementDocInfo.SiteID + ";UserID: " + measurementDocInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool DeleteSelectedMeasuringPoint(MeasDocScheduleMeasPoint filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                MaintenanceDAL.DeleteSelectedMeasuringPoint(db, filterInfo.SiteID, filterInfo.ScheduleID, filterInfo.MeasuringPointID, filterInfo.UserID, currentDate, currentTime);
                return true;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting selected measuring point for maintenance checklist schedule ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #endregion

        #region Work Group

        public List<AutoCompleteUserInfo> GetUserNameForAutoComplete(AutoCompleteSearch searchInfo)
        {
            IDataReader dataReaderUserInfo = null;
            try
            {
                List<AutoCompleteUserInfo> userInfoList = new List<AutoCompleteUserInfo>();
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int count = 1;
                AutoCompleteUserInfo userInfo = null;
                dataReaderUserInfo = MaintenanceDAL.GetUserInfoForAutoCompleteBox(db, searchInfo.SiteID, searchInfo.SearchString, false);

                while (dataReaderUserInfo.Read())
                {
                    if (searchInfo.DisplayCount == count)
                        break;

                    userInfo = new AutoCompleteUserInfo();
                    userInfo.UserID = Common.GetSafeInt32(dataReaderUserInfo, "FUSERID");
                    userInfo.UserName = Common.GetSafeString(dataReaderUserInfo, "FUSERNAME");
                    userInfoList.Add(userInfo);
                    count++;
                }
                dataReaderUserInfo.Close();

                return userInfoList;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching user info for autocomplete box", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, searchInfo.UserID.ToString());
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderUserInfo != null && !dataReaderUserInfo.IsClosed)
                    dataReaderUserInfo.Close();
            }
        }

        public int InsertOrUpdateWorkGroupInfo(BasicParam basicParam, WorkGroupInfo workGroupInfo)
        {
            IDataReader dataReaderWorkGroupInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;

                string description = string.Empty;
                string descInEnglish = string.Empty;
                int result = 0;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        int workGroupID = 0;
                        bool updateWorkGroupStatus = false;
                        char status = 'N';
                        int itemID = 0;

                        // Check work group exist or not
                        dataReaderWorkGroupInfo = MaintenanceDAL.GetWorkGroupInfo(db, transaction, basicParam.SiteID, workGroupInfo.MasterDataType.ToString(), workGroupInfo.MasterDataID, workGroupInfo.MasterDataName, true);
                        if (dataReaderWorkGroupInfo.Read())
                        {
                            status = Convert.ToChar(Common.GetSafeString(dataReaderWorkGroupInfo, "FSTATUS"));
                            workGroupID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FMASTERID");
                            dataReaderWorkGroupInfo.Close();

                            if (status == 'A')
                            {
                                transaction.Rollback();
                                result = 1; //already exist work group name
                                return result;
                            }
                            else
                            {
                                if (workGroupInfo.MasterDataID == 0)
                                {
                                    updateWorkGroupStatus = true;  //while inserting record work group status if status is InActive 
                                }
                                else
                                {
                                    transaction.Rollback();
                                    result = 4;   //while updating cannot update work group, if it is already exist in 'InActive' state
                                    return result;
                                }
                            }
                        }
                        dataReaderWorkGroupInfo.Close();

                        if (workGroupInfo.MasterDataID == 0 || updateWorkGroupStatus)
                        {
                            #region Insert or Update Work Group Info
                            if (workGroupID == 0 || !updateWorkGroupStatus)
                            {
                                // Insert Work Group Info
                                workGroupID = MaintenanceDAL.InsertMaintMasterData(db, transaction, basicParam.SiteID, workGroupInfo.MasterDataName, workGroupInfo.MasterDataType.ToString(), workGroupInfo.Description, basicParam.UserID,
                                        currentDate, currentTime);

                                #region Log Information
                                // Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupInfoAdded.Replace("[XXX]", workGroupInfo.MasterDataName.Trim().ToUpper());
                                descInEnglish = "Successfully inserted information for work group name : " + workGroupInfo.MasterDataName.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_WorkGroup_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }
                            else
                            {
                                if (status == 'I')
                                {
                                    //active existing record
                                    MaintenanceDAL.UpdateMasterDataStatus(db, transaction, basicParam.SiteID, workGroupID, 'A', basicParam.UserID, currentDate, currentTime);

                                    #region Log Information
                                    // Log Information
                                    description = Language_Resources.Maintenance_LogInformations_Resource.workGroupStatus.Replace("[XXX]", workGroupInfo.MasterDataName.Trim().ToUpper());
                                    descInEnglish = "Successfully updated status active for work group name : " + workGroupInfo.MasterDataName.Trim().ToUpper();
                                    CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_WorkGroup_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                    #endregion
                                }

                                //Update Work Group Info
                                MaintenanceDAL.UpdateMaintMasterData(db, transaction, basicParam.SiteID, workGroupID, workGroupInfo.MasterDataName, workGroupInfo.MasterDataType.ToString(), workGroupInfo.Description,
                                    basicParam.UserID, currentDate, currentTime);

                                #region Log Information
                                // Log Information
                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupInfoUpdated.Replace("[XXX]", workGroupInfo.MasterDataName.Trim().ToUpper());
                                descInEnglish = "Successfully updated information for work group name : " + workGroupInfo.MasterDataName.Trim().ToUpper();
                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_WorkGroup_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                                #endregion
                            }

                            #region Insert Work Group User Information   

                            if (workGroupID == 0)
                                workGroupID = workGroupInfo.MasterDataID;

                            MaintenanceDAL.UpdateWorkGroupUserStatus(db, transaction, basicParam.SiteID, workGroupInfo.MasterDataID, 0, 'I', basicParam.UserID, currentDate, currentTime);
                            if (workGroupInfo.WorkGroupAssigneeList.Count > 0)
                            {
                                foreach (WorkGroupUserInfo workGroupAssignee in workGroupInfo.WorkGroupAssigneeList)
                                {
                                    //Insert all assignee information
                                    itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupID);
                                    if (MaintenanceDAL.CheckWorkGroupUserExists(db, transaction, workGroupID, workGroupAssignee.UserID, basicParam.SiteID))
                                        MaintenanceDAL.UpdateWorkGroupUserData(db, transaction, workGroupAssignee.UserID, workGroupID, itemID, workGroupAssignee.IsScheduleNotification, workGroupAssignee.IsOnWork, workGroupAssignee.IsOnComplete,
                                          workGroupAssignee.IsOnReport, workGroupAssignee.IsOnDowntime, Convert.ToString((char)workGroupAssignee.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                    else
                                        MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupID, itemID, workGroupAssignee.UserID, workGroupAssignee.IsScheduleNotification, workGroupAssignee.IsOnWork, workGroupAssignee.IsOnComplete,
                                            workGroupAssignee.IsOnReport, workGroupAssignee.IsOnDowntime, Convert.ToString((char)workGroupAssignee.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            if (workGroupInfo.WorkGroupReporterList.Count > 0)
                            {
                                foreach (WorkGroupUserInfo workGroupReportTo in workGroupInfo.WorkGroupReporterList)
                                {
                                    //Insert all reportee information
                                    itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupID);
                                    if (MaintenanceDAL.CheckWorkGroupUserExists(db, transaction, workGroupID, workGroupReportTo.UserID, basicParam.SiteID))
                                        MaintenanceDAL.UpdateWorkGroupUserData(db, transaction, workGroupReportTo.UserID, workGroupID, itemID, workGroupReportTo.IsScheduleNotification, workGroupReportTo.IsOnWork, workGroupReportTo.IsOnComplete,
                                          workGroupReportTo.IsOnReport, workGroupReportTo.IsOnDowntime, Convert.ToString((char)workGroupReportTo.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                    else
                                        MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupID, itemID, workGroupReportTo.UserID, workGroupReportTo.IsScheduleNotification, workGroupReportTo.IsOnWork, workGroupReportTo.IsOnComplete,
                                         workGroupReportTo.IsOnReport, workGroupReportTo.IsOnDowntime, Convert.ToString((char)workGroupReportTo.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            #endregion

                            result = 2; //successfully inserted work group information
                            #endregion
                        }
                        else
                        {
                            //Update master data info
                            MaintenanceDAL.UpdateMaintMasterData(db, transaction, basicParam.SiteID, workGroupInfo.MasterDataID, workGroupInfo.MasterDataName, workGroupInfo.MasterDataType.ToString(), workGroupInfo.Description,
                                    basicParam.UserID, currentDate, currentTime);

                            #region Log Information
                            // Log Information
                            description = Language_Resources.Maintenance_LogInformations_Resource.workGroupInfoUpdated.Replace("[XXX]", workGroupInfo.MasterDataName.Trim().ToUpper());
                            descInEnglish = "Successfully updated information for work group name : " + workGroupInfo.MasterDataName.Trim().ToUpper();
                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, LogTypes.Config_WorkGroup_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                            #endregion
                            #region Insert Work Group User Information   

                            MaintenanceDAL.UpdateWorkGroupUserStatus(db, transaction, basicParam.SiteID, workGroupInfo.MasterDataID, 0, 'I', basicParam.UserID, currentDate, currentTime);
                            if (workGroupInfo.WorkGroupAssigneeList.Count > 0)
                            {
                                foreach (WorkGroupUserInfo workGroupAssignee in workGroupInfo.WorkGroupAssigneeList)
                                {
                                    //Insert all assignee information
                                    itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupInfo.MasterDataID);
                                    if (MaintenanceDAL.CheckWorkGroupUserExists(db, transaction, workGroupInfo.MasterDataID, workGroupAssignee.UserID, basicParam.SiteID))
                                        MaintenanceDAL.UpdateWorkGroupUserData(db, transaction, workGroupAssignee.UserID, workGroupInfo.MasterDataID, itemID, workGroupAssignee.IsScheduleNotification, workGroupAssignee.IsOnWork, workGroupAssignee.IsOnComplete,
                                          workGroupAssignee.IsOnReport, workGroupAssignee.IsOnDowntime, Convert.ToString((char)workGroupAssignee.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                    else
                                        MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupInfo.MasterDataID, itemID, workGroupAssignee.UserID, workGroupAssignee.IsScheduleNotification, workGroupAssignee.IsOnWork, workGroupAssignee.IsOnComplete,
                                            workGroupAssignee.IsOnReport, workGroupAssignee.IsOnDowntime, Convert.ToString((char)workGroupAssignee.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            if (workGroupInfo.WorkGroupReporterList.Count > 0)
                            {
                                foreach (WorkGroupUserInfo workGroupReportTo in workGroupInfo.WorkGroupReporterList)
                                {
                                    //Insert all reportee information
                                    itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupInfo.MasterDataID);
                                    if (MaintenanceDAL.CheckWorkGroupUserExists(db, transaction, workGroupInfo.MasterDataID, workGroupReportTo.UserID, basicParam.SiteID))
                                        MaintenanceDAL.UpdateWorkGroupUserData(db, transaction, workGroupReportTo.UserID, workGroupInfo.MasterDataID, itemID, workGroupReportTo.IsScheduleNotification, workGroupReportTo.IsOnWork, workGroupReportTo.IsOnComplete,
                                          workGroupReportTo.IsOnReport, workGroupReportTo.IsOnDowntime, Convert.ToString((char)workGroupReportTo.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                    else
                                        MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupInfo.MasterDataID, itemID, workGroupReportTo.UserID, workGroupReportTo.IsScheduleNotification, workGroupReportTo.IsOnWork, workGroupReportTo.IsOnComplete,
                                         workGroupReportTo.IsOnReport, workGroupReportTo.IsOnDowntime, Convert.ToString((char)workGroupReportTo.WorkGroupUserType), basicParam.SiteID, basicParam.UserID, currentDate, currentTime);
                                }
                            }
                            #endregion
                            result = 3;//successfully updated work group information
                        }
                        transaction.Commit();
                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting or updating work group info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderWorkGroupInfo != null && !dataReaderWorkGroupInfo.IsClosed)
                    dataReaderWorkGroupInfo.Close();
            }
        }

        public WorkGroupInfo GetEditWorkGroupInfo(WorkGroupFilterInfo workGroupFilterInfo)
        {
            IDataReader dataReaderMaintMaster = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Common.GetSiteDateTimeFormat(db, workGroupFilterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);

                WorkGroupInfo workGroupInfoList = new WorkGroupInfo();
                WorkGroupUserInfo workGroupUserInfo = null;

                dataReaderMaintMaster = MaintenanceDAL.GetWorkGroupInfo(db, null, workGroupFilterInfo.SiteID, workGroupFilterInfo.MasterDataType.ToString(), workGroupFilterInfo.WorkGroupID, string.Empty, false);
                if (dataReaderMaintMaster.Read())
                {
                    workGroupInfoList.MasterDataID = Common.GetSafeInt32(dataReaderMaintMaster, "FMASTERID");
                    workGroupInfoList.MasterDataName = Common.GetSafeString(dataReaderMaintMaster, "FNAME");
                    workGroupInfoList.Description = Common.GetSafeString(dataReaderMaintMaster, "FDESCRIPTION");

                }
                dataReaderMaintMaster.Close();

                #region Work Group User info

                DataTable workGroupUserDataTable = MaintenanceDAL.GetWorkGroupUserInfo(db, null, workGroupFilterInfo.SiteID, workGroupInfoList.MasterDataID);
                DataTable distinctUserTypeTable = workGroupUserDataTable.DefaultView.ToTable(true, "FUSERTYPE");
                foreach (DataRow distinctUserType in distinctUserTypeTable.Rows)
                {
                    DataRow[] workGroupUserForUserTypeRows = workGroupUserDataTable.Select("FUSERTYPE='" + distinctUserType["FUSERTYPE"] + "'");
                    foreach (DataRow workGroupUserInfoRow in workGroupUserForUserTypeRows)
                    {
                        workGroupUserInfo = new WorkGroupUserInfo();
                        workGroupUserInfo.UserID = Convert.ToInt32(workGroupUserInfoRow["FUSERID"].ToString().Trim());
                        workGroupUserInfo.ItemID = Convert.ToInt32(workGroupUserInfoRow["FITEMID"].ToString().Trim());
                        workGroupUserInfo.UserName = workGroupUserInfoRow["FUSERNAME"].ToString().Trim();
                        workGroupUserInfo.IsScheduleNotification = workGroupUserInfoRow["FSCH_NOTIFY"].ToString().Trim() == "Y" ? true : false;
                        workGroupUserInfo.IsOnWork = workGroupUserInfoRow["FWORKSTART_NOTIFY"].ToString().Trim() == "Y" ? true : false;
                        workGroupUserInfo.IsOnReport = workGroupUserInfoRow["FREPORTISSUE_NOTIFY"].ToString().Trim() == "Y" ? true : false;
                        workGroupUserInfo.IsOnDowntime = workGroupUserInfoRow["FDOWNTIME_NOTIFY"].ToString().Trim() == "Y" ? true : false;
                        workGroupUserInfo.IsOnComplete = workGroupUserInfoRow["FWORKFINISH_NOTIFY"].ToString().Trim() == "Y" ? true : false;
                        workGroupUserInfo.WorkGroupUserType = (WorkGroupUserType)Enum.ToObject(typeof(WorkGroupUserType), Convert.ToChar(distinctUserType["FUSERTYPE"]));
                        if (workGroupUserInfo.WorkGroupUserType == WorkGroupUserType.Assignee)
                            workGroupInfoList.WorkGroupAssigneeList.Add(workGroupUserInfo);
                        else
                            workGroupInfoList.WorkGroupReporterList.Add(workGroupUserInfo);
                    }
                }

                #endregion

                return workGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting work group info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + workGroupFilterInfo.SiteID + ";UserID : " + workGroupFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderMaintMaster != null && !dataReaderMaintMaster.IsClosed)
                    dataReaderMaintMaster.Close();
            }
        }

        public int DeleteWorkGroupUserInfo(WorkGroupFilterInfo workGroupFilterInfo)
        {
            IDataReader dataReaderWorkGroupUserInfo = null;
            try
            {
                int currentDate = 0;
                int currentTime = 0;
                int result = 0;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                Common.GetCurrentSiteDateTime(db, workGroupFilterInfo.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        int totalRecord = 0;
                        string userName = string.Empty;
                        string workGroupName = string.Empty;
                        bool isExist = false;

                        dataReaderWorkGroupUserInfo = MaintenanceDAL.CheckWorkGroupUserExist(db, transaction, workGroupFilterInfo.SiteID, workGroupFilterInfo.WorkGroupID, string.Empty, string.Empty,true);
                        if (dataReaderWorkGroupUserInfo.Read())
                        {
                            totalRecord = Common.GetSafeInt32(dataReaderWorkGroupUserInfo, "FCOUNT");
                            userName = Common.GetSafeString(dataReaderWorkGroupUserInfo, "FUSERNAME");
                            workGroupName = Common.GetSafeString(dataReaderWorkGroupUserInfo, "FNAME");
                            isExist = true;
                        }
                        dataReaderWorkGroupUserInfo.Close();

                        if (isExist)
                        {
                            if (totalRecord > 1)
                            {
                                //Delete work group user info
                                MaintenanceDAL.UpdateWorkGroupUserStatus(db, transaction, workGroupFilterInfo.SiteID, workGroupFilterInfo.WorkGroupID, workGroupFilterInfo.ItemID, 'I', workGroupFilterInfo.UserID, currentDate, currentTime);

                                #region Log Information
                                if (workGroupName.Length > 0)
                                {
                                    string description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserInfoDeleted.Replace("[XXX]", userName.Trim()).Replace("[YYY]", workGroupName.Trim());
                                    string descInEnglish = "Successfully deleted information for user name : " + userName.Trim() + " for work group name : " + workGroupName.Trim();
                                    CommonDAL.InsertLogInformation(db, transaction, workGroupFilterInfo.SiteID, LogTypes.Config_WorkGroup_Info.ToString(), description, descInEnglish, workGroupFilterInfo.UserID, currentDate, currentTime);
                                }
                                #endregion

                                transaction.Commit();
                                result = 2;//Work group user info deleted successfully
                            }
                            else
                            {
                                transaction.Rollback();
                                result = 3; //can't delete work group user info, atleast should have one record
                            }
                        }
                        else
                        {
                            transaction.Rollback();
                            result = 1; //work group user info info does not exist in 'active' status
                        }

                        return result;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting work group user records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + workGroupFilterInfo.SiteID + ";UserID: " + workGroupFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderWorkGroupUserInfo != null && !dataReaderWorkGroupUserInfo.IsClosed)
                    dataReaderWorkGroupUserInfo.Close();
            }
        }

        #region Download Template

        public string DownloadWorkGroupExcelTemplateInfo(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "WorkGroupInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadWorkGroupExcelTemplate asyncWorkGroupTemplate = new DownloadWorkGroupExcelTemplate(GetWorkGroupExcelTemplate);
                asyncWorkGroupTemplate.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetWorkGroupExcelTemplate(Database db, BasicParam basicParam, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("WorkGroupInfo");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindWorkGroupExcelHeaderInfo(db, worksheet, colFromHex, package, rowIndex, columnIndex, basicParam.SiteID);

                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading work group excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void BindWorkGroupExcelHeaderInfo(Database db, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int siteID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                DataTable dtQualityParameters = new DataTable();
                List<string> notificationTypes = new List<string> { "Yes", "No" };

                List<string> userNameList = new List<string>();
                dataReaderInfo = MaintenanceDAL.GetUserInfoForAutoCompleteBox(db, siteID, string.Empty, true);
                while (dataReaderInfo.Read())
                {
                    userNameList.Add(Common.GetSafeString(dataReaderInfo, "FUSERNAME"));
                }
                dataReaderInfo.Close();

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.workGroup;
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.description;
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.assignee;
                Common.BindExcelCellListData(package, worksheet, "Assignee", columnIndex, userNameList, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.reportingTo;
                Common.BindExcelCellListData(package, worksheet, "ReportTo", columnIndex, userNameList, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.scheduleNotification;
                Common.BindExcelCellListData(package, worksheet, "ScheduleNotification", columnIndex, notificationTypes, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.onWorkStatement;
                Common.BindExcelCellListData(package, worksheet, "OnWork", columnIndex, notificationTypes, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.onComplete;
                Common.BindExcelCellListData(package, worksheet, "OnComplete", columnIndex, notificationTypes, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.onReportIssue;
                Common.BindExcelCellListData(package, worksheet, "OnReport", columnIndex, notificationTypes, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.onDowntime;
                Common.BindExcelCellListData(package, worksheet, "OnDowntime", columnIndex, notificationTypes, false);
                worksheet.Column(columnIndex).Width = 18;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.WorkGroup_Resource.status;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "StatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        #region Download Excel Info

        public string DownloadAllWorkGroupInfo(WorkGroupFilterInfo workGroupFilterInfo)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "WorkGroupInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadWorkGroupInfo asyncQualityParameterInfo = new DownloadWorkGroupInfo(GetWorkGroupInfoForDownload);
                asyncQualityParameterInfo.BeginInvoke(db, workGroupFilterInfo, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetWorkGroupInfoForDownload(Database db, WorkGroupFilterInfo workGroupFilterInfo, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("WorkGroupInfo");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindWorkGroupExcelHeaderInfo(db, worksheet, colFromHex, package, rowIndex, columnIndex, workGroupFilterInfo.SiteID);

                    //Get Content for excel sheet
                    GetExcelContentForWorkGroupInfo(db, worksheet, workGroupFilterInfo, targetFile);

                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "\\" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading work group info excel ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + workGroupFilterInfo.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void GetExcelContentForWorkGroupInfo(Database db, ExcelWorksheet workSheet, WorkGroupFilterInfo workGroupFilterInfo, string targetFile)
        {
            IDataReader dataReaderWorkGroupInfo = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;

                string materialCode = string.Empty;
                string notificationType = string.Empty;
                string analysisResult = string.Empty;
                string xrfResult = string.Empty;
                string vendorTc = string.Empty;
                string thirdParty = string.Empty;


                dataReaderWorkGroupInfo = MaintenanceDAL.CheckWorkGroupUserExist(db, null, workGroupFilterInfo.SiteID, 0, workGroupFilterInfo.SearchString, string.Empty,true);
                while (dataReaderWorkGroupInfo.Read())
                {
                    columnIndex = 1;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FNAME");
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FDESCRIPTION");
                    columnIndex++;
                    if (Common.GetSafeString(dataReaderWorkGroupInfo, "FUSERTYPE") == "A")
                    {
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "USERNAME");
                        columnIndex++;
                    }
                    else
                    {
                        columnIndex++;
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "USERNAME");

                    }
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FSCH_NOTIFY") == "Y" ? "Yes" : "No";
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FWORKSTART_NOTIFY") == "Y" ? "Yes" : "No";
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FWORKFINISH_NOTIFY") == "Y" ? "Yes" : "No";
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FREPORTISSUE_NOTIFY") == "Y" ? "Yes" : "No";
                    columnIndex++;
                    workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderWorkGroupInfo, "FDOWNTIME_NOTIFY") == "Y" ? "Yes" : "No";
                    columnIndex++;
                    rowIndex++;

                }
                dataReaderWorkGroupInfo.Close();
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Failed to download work group information excel sheet", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID: " + workGroupFilterInfo.UserID + " ;SiteID:" + workGroupFilterInfo.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderWorkGroupInfo != null && !dataReaderWorkGroupInfo.IsClosed)
                    dataReaderWorkGroupInfo.Close();
            }
        }

        #endregion

        #region Upload excel

        public string UploadExcelWorkGroupInfo(BasicParam basicParam, string fileName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadWorkGroupInfo asyncUploadWorkGroupInfo = new UploadWorkGroupInfo(InsertUpdateWorkGroupInformation);
                AsyncCallback cb = new AsyncCallback(send);
                asyncUploadWorkGroupInfo.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void InsertUpdateWorkGroupInformation(Database db, BasicParam basicParam, string fileName)
        {
            string path = ConfigurationManager.AppSettings["LogFileLocation"];
            int inserted = 0;
            int updated = 0;
            int deleted = 0;
            int failure = 0;

            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deletedMessage = string.Empty;
            try
            {               
                string logType = LogTypes.Config_WorkGroup_Info.ToString();
                int createdOn = 0;
                int createdTime = 0;
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);

                string description = string.Empty;
                string descInEnglish = string.Empty;

                string completePath = path + fileName;
                string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + completePath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                OleDbConnection olDbObjConn = new OleDbConnection(connectionString);
                OleDbDataAdapter oledbObject = new OleDbDataAdapter("Select * from [WorkGroupInfo$]", olDbObjConn);
                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DataTable excelDataTable = dtExcelDataSet.Tables[0];

                if (excelDataTable.Rows.Count > 0)
                {
                    DbTransaction transaction = null;
                    using (DbConnection connection = db.CreateConnection())
                    {
                        connection.Open();
                        transaction = connection.BeginTransaction();
                        IDataReader dataReaderWorkGroupInfo = null;

                        try
                        {
                            int lineNumber = 2;
                            foreach (DataRow row in excelDataTable.Rows)
                            {
                                #region ReadExcel
                                string workGroup = string.Empty;
                                string workGroupDescription = string.Empty;
                                string assigneeName = string.Empty;
                                string reportToName = string.Empty;
                                bool isScheduleNotification = false;
                                bool isOnWorkStatement = false;
                                bool isOnComplete = false;
                                bool isOnReportIssue = false;
                                bool isDowntime = false;
                                string excelStatus = string.Empty;
                                int workGroupID = 0;
                                int itemID = 0;
                                string existingDescription = string.Empty;
                                string userType = string.Empty;
                                string userName = string.Empty;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.workGroup))
                                    workGroup = row[Language_Resources.WorkGroup_Resource.workGroup].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.description))
                                    workGroupDescription = row[Language_Resources.WorkGroup_Resource.description].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.assignee))
                                    assigneeName = row[Language_Resources.WorkGroup_Resource.assignee].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.reportingTo))
                                    reportToName = row[Language_Resources.WorkGroup_Resource.reportingTo].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.scheduleNotification))
                                    isScheduleNotification = row[Language_Resources.WorkGroup_Resource.scheduleNotification].ToString().Trim().ToUpper() == "YES" ? true : false;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.onWorkStatement))
                                    isOnWorkStatement = row[Language_Resources.WorkGroup_Resource.onWorkStatement].ToString().Trim().ToUpper() == "YES" ? true : false;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.onComplete))
                                    isOnComplete = row[Language_Resources.WorkGroup_Resource.onComplete].ToString().Trim().ToUpper() == "YES" ? true : false;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.onReportIssue))
                                    isOnReportIssue = row[Language_Resources.WorkGroup_Resource.onReportIssue].ToString().Trim().ToUpper() == "YES" ? true : false;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.onDowntime))
                                    isDowntime = row[Language_Resources.WorkGroup_Resource.onDowntime].ToString().Trim().ToUpper() == "YES" ? true : false;

                                if (excelDataTable.Columns.Contains(Language_Resources.WorkGroup_Resource.status))
                                    excelStatus = row[Language_Resources.WorkGroup_Resource.status].ToString().Trim().ToUpper() == "MARK DELETE" ? "X" : "A";

                                #endregion

                                #region Validation fields
                                if (workGroup.Length == 0)
                                {
                                    failureMessage += "Work Group is empty in line number: " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (workGroup.Length > 50)
                                {
                                    failureMessage += "Work group value's length exceeds max length (50) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (workGroupDescription.Length > 100)
                                {
                                    failureMessage += "Description value's length exceeds max length (100) in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (assigneeName.Length == 0 && reportToName.Length == 0)
                                {
                                    failureMessage += "Either assignee or report to user must be mentioned in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                else if (assigneeName.Length > 0 && reportToName.Length > 0)
                                {
                                    failureMessage += "Both assignee and report to user should not be mentioned in line number : " + lineNumber.ToString() + Environment.NewLine;
                                    failure++;
                                }
                                #endregion                               

                                else if (workGroup.Length > 0 && (assigneeName.Length > 0 || reportToName.Length > 0))
                                {
                                    WorkGroupUserInfo oldWorkGroupInfo = oldWorkGroupInfo = new WorkGroupUserInfo();
                                    bool isWorkGroupExits = false;
                                    userType = assigneeName.Length == 0 ? Convert.ToChar(WorkGroupUserType.Report).ToString() : Convert.ToChar(WorkGroupUserType.Assignee).ToString();
                                    userName = assigneeName.Length == 0 ? reportToName : assigneeName;

                                    dataReaderWorkGroupInfo = MaintenanceDAL.GetWorkGroupInfo(db, transaction, basicParam.SiteID, MasterDataType.WORKGROUP.ToString(), 0, workGroup, false);
                                    if (dataReaderWorkGroupInfo.Read())
                                    {
                                        existingDescription = Common.GetSafeString(dataReaderWorkGroupInfo, "FDESCRIPTION");
                                        workGroupID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FMASTERID");
                                        isWorkGroupExits = true;
                                    }
                                    dataReaderWorkGroupInfo.Close();

                                    if (isWorkGroupExits)
                                    {
                                        #region Get old work group info
                                        bool isWorkGroupWithMemberExits = false;
                                        int workGroupUserCount = 0;
                                        string status = string.Empty;

                                        dataReaderWorkGroupInfo = MaintenanceDAL.CheckWorkGroupUserExist(db, transaction, basicParam.SiteID, workGroupID, string.Empty, userName,false);
                                        if (dataReaderWorkGroupInfo.Read())
                                        {
                                            oldWorkGroupInfo.UserName = Common.GetSafeString(dataReaderWorkGroupInfo, "FUSERNAME");
                                            oldWorkGroupInfo.UserID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FUSERID");
                                            oldWorkGroupInfo.ItemID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FITEMID");
                                            oldWorkGroupInfo.IsScheduleNotification = Common.GetSafeString(dataReaderWorkGroupInfo, "FSCH_NOTIFY") == "Y" ? true : false;
                                            oldWorkGroupInfo.IsOnWork = Common.GetSafeString(dataReaderWorkGroupInfo, "FWORKSTART_NOTIFY") == "Y" ? true : false;
                                            oldWorkGroupInfo.IsOnReport = Common.GetSafeString(dataReaderWorkGroupInfo, "FREPORTISSUE_NOTIFY") == "Y" ? true : false;
                                            oldWorkGroupInfo.IsOnDowntime = Common.GetSafeString(dataReaderWorkGroupInfo, "FDOWNTIME_NOTIFY") == "Y" ? true : false;
                                            oldWorkGroupInfo.IsOnComplete = Common.GetSafeString(dataReaderWorkGroupInfo, "FWORKFINISH_NOTIFY") == "Y" ? true : false;
                                            workGroupUserCount = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FCOUNT");
                                            status = Common.GetSafeString(dataReaderWorkGroupInfo, "FSTATUS");
                                            isWorkGroupWithMemberExits = true;
                                        }
                                        dataReaderWorkGroupInfo.Close();
                                        #endregion

                                        if (isWorkGroupWithMemberExits && excelStatus == "A")
                                        {
                                            // update Work Group Info and user info   
                                            MaintenanceDAL.UpdateMaintMasterData(db, transaction, basicParam.SiteID, workGroupID, workGroup, MasterDataType.WORKGROUP.ToString(), workGroupDescription==string.Empty? existingDescription: workGroupDescription, basicParam.UserID, createdOn, createdTime);

                                            MaintenanceDAL.UpdateWorkGroupUserData(db, transaction, oldWorkGroupInfo.UserID, workGroupID, oldWorkGroupInfo.ItemID, isScheduleNotification, isOnWorkStatement, isOnComplete,
                                            isOnReportIssue, isDowntime, userType, basicParam.SiteID, basicParam.UserID, createdOn, createdTime);

                                            #region Log Information

                                            if (oldWorkGroupInfo.IsScheduleNotification != isScheduleNotification)
                                            {
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserScheduleNotificationUpdatedExcel.Replace("[AAA]", oldWorkGroupInfo.IsScheduleNotification == true ? "Yes" : "No").Replace("[BBB]", isScheduleNotification == true ? "Yes" : "No").Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully updated schedule notification from " + (oldWorkGroupInfo.IsScheduleNotification == true ? "Yes" : "No") + " to " + (isScheduleNotification == true ? "Yes" : "No") + " for user name :" + oldWorkGroupInfo.UserName.Trim() + " and work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            }
                                            if (oldWorkGroupInfo.IsOnWork != isOnWorkStatement)
                                            {
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserOnWorkUpdatedExcel.Replace("[AAA]", oldWorkGroupInfo.IsOnWork == true ? "Yes" : "No").Replace("[BBB]", isOnWorkStatement == true ? "Yes" : "No").Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully updated on work statement from " + (oldWorkGroupInfo.IsOnWork == true ? "Yes" : "No") + " to " + (isOnWorkStatement == true ? "Yes" : "No") + " for user name :" + oldWorkGroupInfo.UserName.Trim() + " and work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            }
                                            if (oldWorkGroupInfo.IsOnReport != isOnReportIssue)
                                            {
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserOnReportUpdatedExcel.Replace("[AAA]", oldWorkGroupInfo.IsOnReport == true ? "Yes" : "No").Replace("[BBB]", isOnReportIssue == true ? "Yes" : "No").Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully updated on report from " + (oldWorkGroupInfo.IsOnReport == true ? "Yes" : "No") + " to " + (isOnReportIssue == true ? "Yes" : "No") + " for user name :" + oldWorkGroupInfo.UserName.Trim() + " and work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            }
                                            if (oldWorkGroupInfo.IsOnDowntime != isDowntime)
                                            {
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserOnDowntimeUpdatedExcel.Replace("[AAA]", oldWorkGroupInfo.IsOnDowntime == true ? "Yes" : "No").Replace("[BBB]", isDowntime == true ? "Yes" : "No").Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully updated on downtime from " + (oldWorkGroupInfo.IsOnDowntime == true ? "Yes" : "No") + " to " + (isDowntime == true ? "Yes" : "No") + " for user name :" + oldWorkGroupInfo.UserName.Trim() + " and work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            }
                                            if (oldWorkGroupInfo.IsOnComplete != isOnComplete)
                                            {
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserOnCompleteUpdatedExcel.Replace("[AAA]", oldWorkGroupInfo.IsOnComplete == true ? "Yes" : "No").Replace("[BBB]", isOnComplete == true ? "Yes" : "No").Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully updated schedule on complete from " + (oldWorkGroupInfo.IsOnComplete == true ? "Yes" : "No") + " to " + (isOnComplete == true ? "Yes" : "No") + " for user name :" + oldWorkGroupInfo.UserName.Trim() + " and work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            }
                                            #endregion
                                            if (status == "I")
                                            {
                                                insertMessage += "User name :" + userName.Trim() + " is successfully inserted for work group : " + workGroup.Trim() + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                inserted++;
                                            }
                                            else
                                            {
                                                updateMessage += "User name : " + userName.Trim() + " is successfully updated for work group : " + workGroup.Trim() + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                updated++;
                                            }

                                        }

                                        else if (isWorkGroupWithMemberExits && excelStatus == "X")
                                        {
                                            bool isLinkedToSchedule = false;
                                            if (workGroupUserCount == 1)
                                            {
                                                if (!MaintenanceDAL.CheckWorkGroupLinkToSchedule(db, transaction, basicParam.SiteID, workGroupID))
                                                {
                                                    //update status as 'in-active' for work group
                                                    MaintenanceDAL.DeleteMaintMasterData(db, transaction, basicParam.SiteID, workGroupID, basicParam.UserID, createdOn, createdTime);
                                                }
                                                else
                                                {
                                                    failureMessage += "Work group : " + workGroup.Trim() + " cannot be deleted as it is mapped to schedule in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                    isLinkedToSchedule = true;
                                                }

                                            }
                                            if (!isLinkedToSchedule)
                                            {
                                                //Update status as 'In-Active' for Work group user
                                                MaintenanceDAL.UpdateWorkGroupUserStatus(db, transaction, basicParam.SiteID, workGroupID, oldWorkGroupInfo.ItemID, 'I', basicParam.UserID, createdOn, createdTime);

                                                #region Log Information
                                                description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserDeletedExcel.Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", workGroup.Trim());
                                                descInEnglish = "Successfully deleted information for user name :" + oldWorkGroupInfo.UserName.Trim() + " for work group :" + workGroup.Trim() + " through excel";
                                                CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                                #endregion

                                                deletedMessage += "User name : " + userName.Trim() + " is successfully deleted for work group : " + workGroup.Trim() + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                deleted++;
                                            }
                                        }

                                        else if (!isWorkGroupWithMemberExits && excelStatus == "X")
                                        {
                                            failureMessage += "User name : " + userName.Trim() + " for  work group : " + workGroup.Trim() + " cannot be deleted as it is not available in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }

                                        else
                                        {
                                            int userID = 0;
                                            dataReaderWorkGroupInfo = MaintenanceDAL.GetUserInfoForAutoCompleteBox(db, basicParam.SiteID, assigneeName.Length > 0 ? assigneeName : reportToName, true);
                                            if (dataReaderWorkGroupInfo.Read())
                                            {
                                                userID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FUSERID");
                                            }
                                            dataReaderWorkGroupInfo.Close();

                                            // Insert Work Group user Info    
                                            itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupID);
                                            MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupID, itemID, userID, isScheduleNotification, isOnWorkStatement, isOnComplete,
                                            isOnReportIssue, isDowntime, userType, basicParam.SiteID, basicParam.UserID, createdOn, createdTime);

                                            #region Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserInfoInsertedExcel.Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", isScheduleNotification == true ? "Yes" : "No").Replace("[ZZZ]", isOnWorkStatement == true ? "Yes" : "No").Replace("[AAA]", isOnReportIssue == true ? "Yes" : "No").Replace("[BBB]", isDowntime == true ? "Yes" : "No").Replace("[CCC]", isOnComplete == true ? "Yes" : "No").Replace("[DDD]", workGroup.Trim());
                                            descInEnglish = "Successfully inserted information for user name : " + userName.Trim() + " with [Schedule Notification" + (isScheduleNotification == true ? "Yes" : "No") + "],[On Work Statement" + (isOnWorkStatement == true ? "Yes" : "No") + "],[On Report Issue:" + (isOnReportIssue == true ? "Yes" : "No") + "],[On Downtime:" + (isDowntime == true ? "Yes" : "No") + "] and On Complete " + (isOnComplete == true ? "Yes" : "No") + " for work group : " + workGroup.Trim() + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            #endregion

                                            insertMessage += "User name :" + userName.Trim() + " is successfully inserted for work group : " + workGroup.Trim() + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            inserted++;

                                        }
                                    }
                                    else
                                    {
                                        int userID = 0;
                                        dataReaderWorkGroupInfo = MaintenanceDAL.GetUserInfoForAutoCompleteBox(db, basicParam.SiteID, assigneeName.Length > 0 ? assigneeName : reportToName, true);
                                        if (dataReaderWorkGroupInfo.Read())
                                        {
                                            userID = Common.GetSafeInt32(dataReaderWorkGroupInfo, "FUSERID");
                                        }
                                        dataReaderWorkGroupInfo.Close();
                                        if (userID > 0 && excelStatus == "A")
                                        {
                                            // Insert Work Group Info    
                                            workGroupID = MaintenanceDAL.InsertMaintMasterData(db, transaction, basicParam.SiteID, workGroup, MasterDataType.WORKGROUP.ToString(), workGroupDescription, basicParam.UserID,
                                                  createdOn, createdTime);

                                            itemID = MaintenanceDAL.GetWorkGroupMaxItemID(db, transaction, workGroupID);
                                            MaintenanceDAL.InsertWorkGroupUserData(db, transaction, workGroupID, itemID, userID, isScheduleNotification, isOnWorkStatement, isOnComplete,
                                            isOnReportIssue, isDowntime, userType, basicParam.SiteID, basicParam.UserID, createdOn, createdTime);

                                            #region Log Information
                                            description = Language_Resources.Maintenance_LogInformations_Resource.workGroupUserInfoInsertedExcel.Replace("[XXX]", oldWorkGroupInfo.UserName.Trim()).Replace("[YYY]", isScheduleNotification == true ? "Yes" : "No").Replace("[ZZZ]", isOnWorkStatement == true ? "Yes" : "No").Replace("[AAA]", isOnReportIssue == true ? "Yes" : "No").Replace("[BBB]", isDowntime == true ? "Yes" : "No").Replace("[CCC]", isOnComplete == true ? "Yes" : "No").Replace("[DDD]", workGroup.Trim());
                                            descInEnglish = "Successfully inserted information for user name : " + userName.Trim() + " with [Schedule Notification " + (isScheduleNotification == true ? "Yes" : "No") + "],[On Work Statement " + (isOnWorkStatement == true ? "Yes" : "No") + "],[On Report Issue: " + (isOnReportIssue == true ? "Yes" : "No") + "],[On Downtime: " + (isDowntime == true ? "Yes" : "No") + "] and On Complete " + (isOnComplete == true ? "Yes" : "No") + " for work group : " + workGroup.Trim() + " through excel";
                                            CommonDAL.InsertLogInformation(db, transaction, basicParam.SiteID, logType, description, descInEnglish, basicParam.UserID, createdOn, createdTime);
                                            #endregion

                                            insertMessage += "Successfully inserted work group : " + workGroup.Trim() + " with user name " + userName.Trim() + " for " + (userType == "A" ? "assignee" : "reporting to") + " in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            inserted++;
                                        }
                                        else if (userID > 0 && excelStatus == "X")
                                        {
                                            failureMessage += "User name: " + userName.Trim() + " with  work group :" + workGroup.Trim() + " cannot be deleted as it is not available in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                        else
                                        {
                                            failureMessage += "User name: " + userName + " is not valid for work group: " + workGroup.Trim() + "in line number : " + lineNumber.ToString() + Environment.NewLine;
                                            failure++;
                                        }
                                    }
                                }

                                lineNumber++;
                            }
                            transaction.Commit();
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            if (dataReaderWorkGroupInfo != null && !dataReaderWorkGroupInfo.IsClosed)
                                dataReaderWorkGroupInfo.Close();
                            connection.Close();
                        }
                   
                    }
                }
                #region SuccessLog
                string logFileName = fileName + "_tempSuccess.txt";
                string targetFile = path + logFileName;
                using (FileStream fs = new FileStream(targetFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine("Work group Information Upload log" + "_" + DateTime.Now.ToString());
                        sw.WriteLine("-------------------------------------------------------------------------------------------");
                        sw.WriteLine("Successfully Inserted :" + inserted.ToString());
                        sw.WriteLine("Successfully Updated :" + updated.ToString());
                        sw.WriteLine("Successfully Deleted :" + deleted.ToString());
                        sw.WriteLine("Failure :" + failure.ToString());
                        if (insertMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Inserted------------------------------------------------------------------------");
                            sw.WriteLine(insertMessage);
                        }
                        if (updateMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Updated-------------------------------------------------------------------------");
                            sw.WriteLine(updateMessage);
                        }
                        if (deletedMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Deleted-------------------------------------------------------------------------");
                            sw.WriteLine(deletedMessage);
                        }
                        if (failureMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                            sw.WriteLine(failureMessage);
                        }
                        sw.Close();
                        fs.Close();
                    }
                }
                #endregion
            }

            catch (Exception ex)
            {
                #region ErrorLog
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.WriteLine("Work group Information Upload log" + "_" + DateTime.Now.ToString());
                        sw3.WriteLine("-------------------------------------------------------------------------------------------");
                        sw3.WriteLine("Successfully Inserted :" + inserted.ToString());
                        sw3.WriteLine("Successfully Updated :" + updated.ToString());
                        sw3.WriteLine("Failure :" + failure.ToString());
                        if (insertMessage.ToString() != string.Empty)
                        {
                            sw3.WriteLine("-----------Inserted------------------------------------------------------------------------");
                            sw3.WriteLine(insertMessage);
                        }
                        if (updateMessage.ToString() != string.Empty)
                        {
                            sw3.WriteLine("-----------Updated-------------------------------------------------------------------------");
                            sw3.WriteLine(updateMessage);
                        }                       
                        if (failureMessage.ToString() != string.Empty)
                        {
                            sw3.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                            sw3.WriteLine(failureMessage);
                        }
                        sw3.Write("Error : ");
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintainenceService", "Error while uploading work group info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID);
                #endregion
            }

        }

        #endregion

        #endregion

        #region View Work Order

        #region Calendar

        public List<UserWorkGroupInfo> GetUserWorkGroupInfo(BasicParam basicParam)
        {
            IDataReader workGroupInfoReader = null;
            try
            {
                UserWorkGroupInfo userWorkGroupInfo = null;
                List<UserWorkGroupInfo> userWorkGroupInfoList = new List<UserWorkGroupInfo>();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                workGroupInfoReader = MaintenanceDAL.GetUserWorkGroup(db, basicParam.SiteID, basicParam.UserID);
                while (workGroupInfoReader.Read())
                {
                    string userType = Common.GetSafeString(workGroupInfoReader, "FUSERTYPE");
                    int workGroupID = Common.GetSafeInt32(workGroupInfoReader, "FWORKGROUPID");
                    if (userWorkGroupInfo == null || userWorkGroupInfo.UserType != userType)
                    {
                        userWorkGroupInfo = new UserWorkGroupInfo();
                        userWorkGroupInfo.UserType = userType;
                        userWorkGroupInfoList.Add(userWorkGroupInfo);
                    }

                    userWorkGroupInfo.WorkGroupIDList.Add(workGroupID);
                }
                workGroupInfoReader.Close();

                return userWorkGroupInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching user work group info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID : " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (workGroupInfoReader != null && !workGroupInfoReader.IsClosed)
                    workGroupInfoReader.Close();
            }
        }

        #endregion

        #region Resource View

        //public List<LocationEquipmentInfo> GetResourceInfoForTimeLine(BasicParam basicParam)
        //{
        //    IDataReader resourceReader = null;
        //    bool restrictAccess = true;
        //    try
        //    {
        //        List<LocationEquipmentInfo> locationEquipmentInfoList = new List<LocationEquipmentInfo>();

        //        Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

        //        int accessLevelID = Common.GetUserAccessLevelID(db, basicParam.UserID);
        //        if (accessLevelID != 5)
        //        {
        //            restrictAccess = false;
        //        }

        //        resourceReader = MaintenanceDAL.GetAllFunctionalLocations(db, basicParam.SiteID, 0, 0, string.Empty, 0, string.Empty, basicParam.UserID, restrictAccess);
        //        while (resourceReader.Read())
        //        {
        //            LocationEquipmentInfo locationEquipment = new LocationEquipmentInfo();
        //            locationEquipment.Key = Common.GetSafeInt32(resourceReader, "FLOCATIONID").ToString();
        //            locationEquipment.Value = Common.GetSafeString(resourceReader, "FLOCATIONNAME");
        //            locationEquipmentInfoList.Add(locationEquipment);
        //        }
        //        resourceReader.Close();

        //        resourceReader = MaintenanceDAL.GetEquipmentsForTimeLine(db, basicParam.SiteID, restrictAccess, basicParam.UserID);
        //        while (resourceReader.Read())
        //        {
        //            int locationID = Common.GetSafeInt32(resourceReader, "FLOCATIONID");
        //            LocationEquipmentInfo locationEquipment = locationEquipmentInfoList.FirstOrDefault(loc => loc.Key == locationID.ToString());
        //            if (locationEquipment == null)
        //            {
        //                locationEquipment = new LocationEquipmentInfo();
        //                locationEquipment.Key = locationID.ToString();
        //                locationEquipmentInfoList.Add(locationEquipment);
        //            }

        //            KeyValueInfo keyValueInfo = new KeyValueInfo();
        //            keyValueInfo.Key = Common.GetSafeInt32(resourceReader, "FEQUIPMENTID").ToString();
        //            keyValueInfo.Value = Common.GetSafeString(resourceReader, "FEQUIPMENTNAME");
        //            locationEquipment.EquipmentInfoList.Add(keyValueInfo);
        //        }
        //        resourceReader.Close();

        //        return locationEquipmentInfoList;
        //    }
        //    catch (Exception ex)
        //    {
        //        string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
        //        Common.LogException(ex, "MaintainenceService", "Error while fetching resource info for timeline", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
        //        throw new FaultException(exceptionErrorMessage);
        //    }
        //    finally
        //    {
        //        if (resourceReader != null && !resourceReader.IsClosed)
        //            resourceReader.Close();
        //    }
        //}


        public WorkOrderResourceViewInfo GetResourceViewWorkOrderInfo(WorkOrderResourceViewFilter filter)
        {
            IDataReader eventInfoReader = null;
            try
            {
                WorkOrderTimelineEventInfo eventInfo = null;
                WorkOrderTimelineEventDetails eventDetails = null;
                TypeValueInfo functionalLocationEquipmentInfo = null;
                WorkOrderResourceViewInfo resourceViewInfo = new WorkOrderResourceViewInfo();
                DataTable dtresourceViewWorkOrder = null;
                
                if (filter.Month == 0 || filter.Year == 0)
                {
                    filter.Month = DateTime.Now.Month;
                    filter.Year = DateTime.Now.Year;
                }

                int lastDayofMonth = DateTime.DaysInMonth(filter.Year, filter.Month);
                DateTime monthStartDateTime = new DateTime(filter.Year, filter.Month, 1);
                DateTime monthEndDateTime = new DateTime(filter.Year, filter.Month, lastDayofMonth);

                int startDate = Convert.ToInt32(monthStartDateTime.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture));
                int endDate = Convert.ToInt32(monthEndDateTime.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture));

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, filter.SiteID);

                bool isWorkOrderScheduled = false;               
                string locationtIDs = string.Empty;
                string equipmentIDs = string.Empty;
                dtresourceViewWorkOrder = MaintenanceDAL.GetResourceViewWorkOrderInfoForPaging(db, filter.PageSize, filter.PageIndex, filter.SiteID, startDate, endDate, filter.FunctionalLocIDs, filter.EquipmentIDs);
                if (dtresourceViewWorkOrder.Rows.Count > 0)
                {
                    isWorkOrderScheduled = true;
                    locationtIDs = string.Join(",", dtresourceViewWorkOrder.AsEnumerable().Where(i => i["FLOCATIONID"].ToString() != "0").Select(s => s.Field<decimal>("FLOCATIONID")));
                    equipmentIDs = string.Join(",", dtresourceViewWorkOrder.AsEnumerable().Where(i => i["FEQUIPMENTID"].ToString() != "0").Select(s => s.Field<decimal>("FEQUIPMENTID")));
                }
              
                if (isWorkOrderScheduled)
                {                  
                    eventInfoReader = MaintenanceDAL.GetResourceViewWorkOrderInfo(db, filter.SiteID, startDate, endDate, locationtIDs, equipmentIDs);
                    while (eventInfoReader.Read())
                    {
                        int scheduleDate = Common.GetSafeInt32(eventInfoReader, "SCHEDULEDATE");
                        int equipmentID = Common.GetSafeInt32(eventInfoReader, "FEQUIPMENTID");
                        int locationID = Common.GetSafeInt32(eventInfoReader, "FLOCATIONID");
                        string equipmentName = Common.GetSafeString(eventInfoReader, "FEQUIPMENTNAME");
                        string locationName = Common.GetSafeString(eventInfoReader, "FLOCATIONNAME");

                        eventInfo = resourceViewInfo.eventInfoList.FirstOrDefault(eInfo => eInfo.EquipmentID == equipmentID && eInfo.LocationID == locationID && eInfo.ScheduleDate == scheduleDate);
                        if (eventInfo == null)
                        {
                            eventInfo = new WorkOrderTimelineEventInfo();
                            eventInfo.ScheduleDate = scheduleDate;
                            eventInfo.EquipmentID = equipmentID;
                            eventInfo.LocationID = locationID;
                            eventInfo.EquipmentName = equipmentName;
                            eventInfo.LocationName = locationName;
                            resourceViewInfo.eventInfoList.Add(eventInfo);
                        }

                        eventDetails = new WorkOrderTimelineEventDetails();
                        eventDetails.WorkOrderID = Common.GetSafeString(eventInfoReader, "FWORK_ORDERID");
                        eventDetails.WorkOrderNumber = Common.GetSafeString(eventInfoReader, "FERP_WORKORDER");
                        eventDetails.MaintenanceName = Common.GetSafeString(eventInfoReader, "FMAINTENANCENAME");
                        eventDetails.StartDateTime = Common.GetDateFormat(Common.GetSafeInt32(eventInfoReader, "SCHEDULEDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(eventInfoReader, "SCHEDULETIME"), siteDateTimeFormatInfo.TimeFormat);
                        if (Common.GetSafeInt32(eventInfoReader, "FENDDATE") > 0)
                            eventDetails.EndDateTime = Common.GetDateFormat(Common.GetSafeInt32(eventInfoReader, "FENDDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(eventInfoReader, "FENDTIME"), siteDateTimeFormatInfo.TimeFormat);
                        eventInfo.EventListDetailsList.Add(eventDetails);
                    }
                    eventInfoReader.Close();
                }
                else
                {
                    if (!string.IsNullOrEmpty(filter.FunctionalLocIDs))
                    {
                        eventInfoReader = MaintenanceDAL.GetResourceViewInfo(db, filter.PageSize, filter.PageIndex, filter.SiteID, filter.FunctionalLocIDs, filter.EquipmentIDs);
                        while (eventInfoReader.Read())
                        {
                            functionalLocationEquipmentInfo = new TypeValueInfo();
                            functionalLocationEquipmentInfo.DisplayName = Common.GetSafeString(eventInfoReader, "DISPLAYNAME");
                            functionalLocationEquipmentInfo.TypeValue = Common.GetSafeInt32(eventInfoReader, "TYPEVALUE");

                            if (resourceViewInfo.TotalRecords == 0)
                                resourceViewInfo.TotalRecords = Common.GetSafeInt32(eventInfoReader, "FCOUNT");
                            resourceViewInfo.FunctionalLocationEquipmentList.Add(functionalLocationEquipmentInfo);
                        }
                        eventInfoReader.Close();
                    }
                    else
                    {
                        eventInfoReader = MaintenanceDAL.GetResourceViewEquipmentInfo(db, filter.PageSize, filter.PageIndex, filter.SiteID, filter.EquipmentIDs);
                        while (eventInfoReader.Read())
                        {
                            functionalLocationEquipmentInfo = new TypeValueInfo();
                            functionalLocationEquipmentInfo.DisplayName = Common.GetSafeString(eventInfoReader, "FEQUIPMENTNAME");
                            functionalLocationEquipmentInfo.TypeValue = Common.GetSafeInt32(eventInfoReader, "FEQUIPMENTID");

                            if (resourceViewInfo.TotalRecords == 0)
                                resourceViewInfo.TotalRecords = Common.GetSafeInt32(eventInfoReader, "FCOUNT");
                            resourceViewInfo.FunctionalLocationEquipmentList.Add(functionalLocationEquipmentInfo);
                        }
                        eventInfoReader.Close();
                    }
                }

                resourceViewInfo.MonthYear = monthEndDateTime.ToString("MMMM") + ", " + monthEndDateTime.Year;
                return resourceViewInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching resource view work order info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filter.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (eventInfoReader != null && !eventInfoReader.IsClosed)
                    eventInfoReader.Close();
            }
        }

        public int InsertOrUpdateUserPreference(UserPreferenceFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);


                if (CommonDAL.CheckUserPreferenceRecordExists(db, filterInfo.UserID) == true)
                {
                    CommonDAL.UpdateUserPreference(db, filterInfo.UserID, String.Join(",", filterInfo.PreferenceLocationIDS), String.Join(",", filterInfo.PreferenceEquipmentIDS), currentDate, currentTime);
                }
                else
                {
                    CommonDAL.InsertUserPreference(db, filterInfo.UserID, String.Join(",", filterInfo.PreferenceLocationIDS), String.Join(",", filterInfo.PreferenceEquipmentIDS), currentDate, currentTime);
                }

                return 1;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating user preference", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + filterInfo.SiteID + ",UserID:" + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        public WorkOrderBasicInfo GetWorkOrderBasicInfo(WorkOrderFilter filter)
        {
            IDataReader workOrderReader = null;
            try
            {
                WorkOrderBasicInfo orderBasicInfo = new WorkOrderBasicInfo();

                string equipmentImagePath = ConfigurationManager.AppSettings["EquipmentImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;
                string equipmentModelImagePath = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;
                string locationImagePath = ConfigurationManager.AppSettings["FunctionalLocImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, filter.SiteID);

                workOrderReader = MaintenanceDAL.GetWorkOrderBasicInfo(db, filter.SiteID, filter.WorkOrderID);
                if (workOrderReader.Read())
                {
                    orderBasicInfo.MaintenanceName = Common.GetSafeString(workOrderReader, "FMAINTENANCENAME");
                    orderBasicInfo.Description = Common.GetSafeString(workOrderReader, "FMAINDESCRIPTION");
                    orderBasicInfo.MaintenanceType = Common.GetSafeString(workOrderReader, "FMAINTANANCETYPE");
                    orderBasicInfo.ScheduledDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FPLANNEDDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FPLANNEDTIME"), siteDateTimeFormatInfo.TimeFormat);
                    orderBasicInfo.StartDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FSCHEDULEDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FSCHEDULETIME"), siteDateTimeFormatInfo.TimeFormat);
                    if (Common.GetSafeInt32(workOrderReader, "FSTARTDATE") > 0)
                        orderBasicInfo.ActualStartDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FSTARTDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FSTARTTIME"), siteDateTimeFormatInfo.TimeFormat);
                    if (Common.GetSafeInt32(workOrderReader, "FENDDATE") > 0)
                        orderBasicInfo.CompletedDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FENDDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FENDTIME"), siteDateTimeFormatInfo.TimeFormat);
                    orderBasicInfo.EstimatedTime = Common.GetSafeDecimal(workOrderReader, "FESTIMATEDTIME");
                    orderBasicInfo.ActualTime = Common.GetSafeDecimal(workOrderReader, "FACTUALTIME");
                    orderBasicInfo.Priority = Common.GetSafeString(workOrderReader, "FPRIORITY");
                    orderBasicInfo.EquipmentID = Common.GetSafeInt32(workOrderReader, "FEQUIPMENTID");
                    orderBasicInfo.EquipmentName = Common.GetSafeString(workOrderReader, "FEQUIPMENTNAME");
                    orderBasicInfo.EquipmentType = Common.GetSafeString(workOrderReader, "EQUIPMENTTYPE");
                    string equipmentImageName = Common.GetSafeString(workOrderReader, "FEQUIPMENTIMAGE");
                    if (equipmentImageName.Length > 0)
                    {
                        orderBasicInfo.EquipmentImagePath = equipmentImagePath + "/" + "Thumbnail" + "/" + equipmentImageName;
                        orderBasicInfo.EquipmentOrgImagePath = equipmentImagePath + "/" + equipmentImageName;
                    }
                    else
                    {
                        equipmentImageName = Common.GetSafeString(workOrderReader, "FIMAGENAME");
                        if (equipmentImageName.Length > 0)
                        {
                            orderBasicInfo.EquipmentImagePath = equipmentModelImagePath + "/" + "Thumbnail" + "/" + equipmentImageName;
                            orderBasicInfo.EquipmentOrgImagePath = equipmentModelImagePath + "/" + equipmentImageName;
                        }
                    }
                    orderBasicInfo.LocationID = Common.GetSafeInt32(workOrderReader, "FLOCATIONID");
                    orderBasicInfo.LocationName = Common.GetSafeString(workOrderReader, "FLOCATIONNAME");
                    string locationImageName = Common.GetSafeString(workOrderReader, "FLOCATIONIMG");
                    if (locationImageName.Length > 0)
                    {
                        orderBasicInfo.LocationImagePath = locationImagePath + "/" + "Thumbnail" + "/" + locationImageName;
                        orderBasicInfo.LocationOrgImagePath = locationImagePath + "/" + locationImageName;
                    }
                    orderBasicInfo.AssignedTo = Common.GetSafeString(workOrderReader, "FASSIGNEDTO");
                    orderBasicInfo.ReportedTo = Common.GetSafeString(workOrderReader, "FREPORTEDTO");
                    orderBasicInfo.Status = Common.GetSafeString(workOrderReader, "FWORKORDERSTATUS");

                    if (Common.GetSafeInt32(workOrderReader, "FWORK_STARTDATE") > 0)
                    {
                        orderBasicInfo.WorkStartDate = Common.GetSafeInt32(workOrderReader, "FWORK_STARTDATE");
                        orderBasicInfo.WorkStartTime = Common.GetSafeInt32(workOrderReader, "FWORK_STARTTIME");
                    }
                    else
                    {
                        orderBasicInfo.WorkStartDate = Common.GetSafeInt32(workOrderReader, "FSTARTDATE");
                        orderBasicInfo.WorkStartTime = Common.GetSafeInt32(workOrderReader, "FSTARTTIME");
                    }

                    if (Common.GetSafeInt32(workOrderReader, "FWORK_ENDDATE") > 0)
                    {
                        orderBasicInfo.WorkEndDate = Common.GetSafeInt32(workOrderReader, "FWORK_ENDDATE");
                        orderBasicInfo.WorkEndTime = Common.GetSafeInt32(workOrderReader, "FWORK_ENDTIME");
                    }
                    else
                    {
                        orderBasicInfo.WorkEndDate = Common.GetSafeInt32(workOrderReader, "FENDDATE");
                        orderBasicInfo.WorkEndTime = Common.GetSafeInt32(workOrderReader, "FENDTIME");
                    }

                    if (Common.GetSafeDecimal(workOrderReader, "FLABORTIME") > 0)
                    {
                        orderBasicInfo.LaborTimeTakenUnit = (UnitOfTime)Common.GetSafeString(workOrderReader, "FLABORTIMEUNIT")[0];
                        TimeSpan laborTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(Common.GetSafeDecimal(workOrderReader, "FLABORTIME")));
                        switch (orderBasicInfo.LaborTimeTakenUnit)
                        {
                            case UnitOfTime.Hours:
                                orderBasicInfo.LaborTime = Convert.ToDecimal(laborTimeSpan.TotalHours);
                                break;
                            case UnitOfTime.Minutes:
                                orderBasicInfo.LaborTime = Convert.ToDecimal(laborTimeSpan.TotalMinutes);
                                break;
                        }
                    }
                    if (Common.GetSafeDecimal(workOrderReader, "FTIMETAKEN") > 0)
                    {
                        orderBasicInfo.TimeSpentUnit = (UnitOfTime)Common.GetSafeString(workOrderReader, "FTIMETAKENUNIT")[0];
                        TimeSpan timeSpentTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(Common.GetSafeDecimal(workOrderReader, "FTIMETAKEN")));
                        switch (orderBasicInfo.TimeSpentUnit)
                        {
                            case UnitOfTime.Hours:
                                orderBasicInfo.TimeSpent = Convert.ToDecimal(timeSpentTimeSpan.TotalHours);
                                break;
                            case UnitOfTime.Minutes:
                                orderBasicInfo.TimeSpent = Convert.ToDecimal(timeSpentTimeSpan.TotalMinutes);
                                break;
                        }
                    }
                    if (Common.GetSafeDecimal(workOrderReader, "FBREAKDOWN_DURATION") > 0)
                    {
                        orderBasicInfo.BreakdownDurationUnit = (UnitOfTime)Common.GetSafeString(workOrderReader, "FBREAKDOWN_DURATIONUNIT")[0];
                        TimeSpan breakdownTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(Common.GetSafeDecimal(workOrderReader, "FBREAKDOWN_DURATION")));
                        switch (orderBasicInfo.BreakdownDurationUnit)
                        {
                            case UnitOfTime.Hours:
                                orderBasicInfo.BreakdownDuration = Convert.ToDecimal(breakdownTimeSpan.TotalHours);
                                break;
                            case UnitOfTime.Minutes:
                                orderBasicInfo.BreakdownDuration = Convert.ToDecimal(breakdownTimeSpan.TotalMinutes);
                                break;
                        }
                    }
                    orderBasicInfo.BreakdownStartDate = Common.GetSafeInt32(workOrderReader, "FBREAKDOWN_STARTDATE");
                    orderBasicInfo.BreakdownStartTime = Common.GetSafeInt32(workOrderReader, "FBREAKDOWN_STARTTIME");
                    orderBasicInfo.BreakdownEndDate = Common.GetSafeInt32(workOrderReader, "FBREAKDOWN_ENDDATE");
                    orderBasicInfo.BreakdownEndTime = Common.GetSafeInt32(workOrderReader, "FBREAKDOWN_ENDTIME");

                    if (orderBasicInfo.Status == WorkOrderStatus.CLOSED.ToString())
                    {
                        orderBasicInfo.ClosedBy = Common.GetSafeString(workOrderReader, "FCLOSEDBY");
                        if (Common.GetSafeInt32(workOrderReader, "FUPDATEDON") > 0)
                            orderBasicInfo.ClosedOn = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FUPDATEDON"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FUPDATEDTIME"), siteDateTimeFormatInfo.TimeFormat);
                    }
                }
                workOrderReader.Close();

                return orderBasicInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching work order basic information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filter.SiteID + ", Work order ID: " + filter.WorkOrderID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (workOrderReader != null && !workOrderReader.IsClosed)
                    workOrderReader.Close();
            }
        }

        public WorkOrderEquipmentInfo GetWorkOrderEquipmentInfo(WorkOrderFilter filter)
        {
            IDataReader workOrderReader = null;
            try
            {
                WorkOrderEquipmentInfo equipmentInfo = new WorkOrderEquipmentInfo();
                string equipmentImagePath = ConfigurationManager.AppSettings["EquipmentImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;
                string equipmentModelImagePath = ConfigurationManager.AppSettings["EquipmentModelImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filter.SiteID, ref currentDate, ref currentTime);

                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, filter.SiteID);

                workOrderReader = MaintenanceDAL.GetWorkOrderEquipmentInfo(db, filter.SiteID, filter.WorkOrderID, filter.EquipmentID);
                if (workOrderReader.Read())
                {

                    equipmentInfo = new WorkOrderEquipmentInfo();
                    equipmentInfo.EquipmentID = Common.GetSafeInt32(workOrderReader, "FEQUIPMENTID");
                    equipmentInfo.EquipmentName = Common.GetSafeString(workOrderReader, "FEQUIPMENTNAME");
                    equipmentInfo.Description = Common.GetSafeString(workOrderReader, "FDESCRIPTION");
                    equipmentInfo.Location = Common.GetSafeString(workOrderReader, "FLOCATIONNAME");
                    equipmentInfo.Type = Common.GetSafeString(workOrderReader, "EQUIPMENTTYPE");
                    equipmentInfo.Class = Common.GetSafeString(workOrderReader, "EQUIPMENTCLASS");
                    string equipmentImageName = Common.GetSafeString(workOrderReader, "FIMAGENAME");
                    if (equipmentImageName.Length > 0)
                    {
                        equipmentInfo.EquipmentImagePath = equipmentImagePath + "/" + "Thumbnail" + "/" + equipmentImageName;
                        equipmentInfo.EquipmentOrgImagePath = equipmentImagePath + "/" + equipmentImageName;
                    }
                    else
                    {
                        equipmentImageName = Common.GetSafeString(workOrderReader, "FMODELIMAGENAME");
                        if (equipmentImageName.Length > 0)
                        {
                            equipmentInfo.EquipmentImagePath = equipmentModelImagePath + "/" + "Thumbnail" + "/" + equipmentImageName;
                            equipmentInfo.EquipmentOrgImagePath = equipmentModelImagePath + "/" + equipmentImageName;
                        }
                    }

                    equipmentInfo.ModelNumber = Common.GetSafeString(workOrderReader, "FMODELNUMBER");
                    equipmentInfo.ModelName = Common.GetSafeString(workOrderReader, "EQUIPMENTMODEL");
                    equipmentInfo.Manufacturer = Common.GetSafeString(workOrderReader, "MANUFACTURER");
                    equipmentInfo.SerialNumber = Common.GetSafeString(workOrderReader, "FSERIALNUMBER");
                    equipmentInfo.WarrentyNo = Common.GetSafeString(workOrderReader, "FWARRANTYNUMBER");
                    int warrentyExpiryDate = Common.GetSafeInt32(workOrderReader, "FWARRANTYEXPIREDDATE");
                    if (warrentyExpiryDate > 0)
                    {
                        equipmentInfo.WarrentyExpiryDate = Common.GetDateFormat(warrentyExpiryDate, siteDateTimeFormatInfo.DateFormat);

                        DateTime expiryDateTime;
                        DateTime currentDateTime;
                        DateTime.TryParseExact(warrentyExpiryDate.ToString(), "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out expiryDateTime);
                        DateTime.TryParseExact(currentTime.ToString(), "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out currentDateTime);

                        if (currentDateTime <= expiryDateTime)
                            equipmentInfo.WarretyStatus = "1";
                        else
                            equipmentInfo.WarretyStatus = "0";
                    }
                    equipmentInfo.PurchaseDate = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FPURCHASEDATE"), siteDateTimeFormatInfo.DateFormat);
                    equipmentInfo.InstalledDate = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FINSTALLDATE"), siteDateTimeFormatInfo.DateFormat);
                }
                workOrderReader.Close();

                if (equipmentInfo.EquipmentID > 0)
                {
                    DocumentInfo documentInfo = null;
                    string documentsPath = ConfigurationManager.AppSettings["MaintenanceDocumentsPath"].ToString().Trim('/') + "/" + InfoType.Equipment.ToString() + "/" + filter.SiteID;
                    string documentsModelPath = ConfigurationManager.AppSettings["MaintenanceDocumentsPath"].ToString().Trim('/') + "/" + InfoType.Equipment_Model.ToString() + "/" + filter.SiteID;

                    workOrderReader = MaintenanceDAL.GetAllDocumentsAndImagesInfo(db, filter.SiteID, equipmentInfo.EquipmentID, (char)InfoType.Equipment, true);
                    while (workOrderReader.Read())
                    {
                        documentInfo = new DocumentInfo();
                        documentInfo.DocumentID = Common.GetSafeInt32(workOrderReader, "FDOCUMENTID");
                        documentInfo.DocumentName = Common.GetSafeString(workOrderReader, "FDOCUMENTNAME");
                        documentInfo.DocumentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(workOrderReader, "FDOCUMENTTYPE"));
                        documentInfo.IsModelDocument = Common.GetSafeString(workOrderReader, "FREF_TYPE") == "MODEL" ? true : false;
                        int referenceModelID = Common.GetSafeInt32(workOrderReader, "FMODELREFERENCEID");

                        if (documentInfo.IsModelDocument && referenceModelID > 0)
                        {
                            if (documentInfo.DocumentName.Length > 0)
                            {
                                documentInfo.DownloadPath = documentsModelPath + "/" + referenceModelID + "/" + documentInfo.DocumentName;
                                documentInfo.ThumbnailPath = documentsModelPath + "/" + referenceModelID + "/Thumbnail/" + documentInfo.DocumentName;
                            }
                        }
                        else
                        {
                            if (documentInfo.DocumentName.Length > 0)
                            {
                                documentInfo.DownloadPath = documentsPath + "/" + equipmentInfo.EquipmentID + "/" + documentInfo.DocumentName;
                                documentInfo.ThumbnailPath = documentsPath + "/" + equipmentInfo.EquipmentID + "/Thumbnail/" + documentInfo.DocumentName;
                            }
                        }
                        equipmentInfo.DocumentInfoList.Add(documentInfo);
                    }
                    workOrderReader.Close();
                }

                return equipmentInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching work order equipment information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filter.SiteID + ", Work order ID: " + filter.WorkOrderID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (workOrderReader != null && !workOrderReader.IsClosed)
                    workOrderReader.Close();
            }
        }

        public WorkOrderEquipmentHistoryDetails GetWorkOrderEquipmentHistory(BasicParam basicParam, EquipmentHistoryFilter equipmentHistoryFilter)
        {
            IDataReader equipmentHistoryReader = null;
            try
            {
                WorkOrderEquipmentHistoryDetails workOrderEquipmentHistoryDetails = new WorkOrderEquipmentHistoryDetails();
                WorkOrderEquipmentHistoryInfo workOrderEquipmentHistoryInfo = null;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, basicParam.SiteID);

                equipmentHistoryReader = MaintenanceDAL.GetEquipmentHistory(db, basicParam.SiteID, equipmentHistoryFilter.EquipmentID, equipmentHistoryFilter.WorkOrderNumber, equipmentHistoryFilter.FromDate, equipmentHistoryFilter.ToDate, equipmentHistoryFilter.PageSize, equipmentHistoryFilter.PageIndex);
                while (equipmentHistoryReader.Read())
                {
                    workOrderEquipmentHistoryInfo = new WorkOrderEquipmentHistoryInfo();
                    workOrderEquipmentHistoryInfo.WorkOrderNumber = Common.GetSafeString(equipmentHistoryReader, "FWORKORDER");
                    workOrderEquipmentHistoryInfo.MaintenanceName = Common.GetSafeString(equipmentHistoryReader, "FMAINTENANCENAME");
                    workOrderEquipmentHistoryInfo.MaintenanceType = Common.GetSafeString(equipmentHistoryReader, "FMAINTENANCETYPE");
                    workOrderEquipmentHistoryInfo.Priority = Common.GetSafeString(equipmentHistoryReader, "FPRIORITYTYPE");
                    workOrderEquipmentHistoryInfo.Description= Common.GetSafeString(equipmentHistoryReader, "FMAINDESCRIPTION");
                    int startDate = Common.GetSafeInt32(equipmentHistoryReader, "FSTARTDATE");
                    int endDate = Common.GetSafeInt32(equipmentHistoryReader, "FENDDATE");
                    //if (startDate > 0)
                    //    workOrderEquipmentHistoryInfo.StartDate = Common.GetDateFormat(startDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(equipmentHistoryReader, "FSTARTTIME"), siteDateTimeFormatInfo.TimeFormat);
                    if (endDate > 0)
                        workOrderEquipmentHistoryInfo.CompleteDate = Common.GetDateFormat(endDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(equipmentHistoryReader, "FENDTIME"), siteDateTimeFormatInfo.TimeFormat);

                    if (!string.IsNullOrEmpty(Common.GetSafeString(equipmentHistoryReader, "FWORKORDERSTATUS")))
                    {
                        workOrderEquipmentHistoryInfo.WorkOrderStatus = (WorkOrderStatus)Enum.Parse(typeof(WorkOrderStatus), Common.GetSafeString(equipmentHistoryReader, "FWORKORDERSTATUS"));

                    }
                    if (Common.GetSafeDecimal(equipmentHistoryReader, "FTIMETAKEN") > 0)
                    {
                        workOrderEquipmentHistoryInfo.TimeSpentUnit = (UnitOfTime)Common.GetSafeString(equipmentHistoryReader, "FTIMETAKENUNIT")[0];
                        TimeSpan timeSpentTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(Common.GetSafeDecimal(equipmentHistoryReader, "FTIMETAKEN")));
                        switch (workOrderEquipmentHistoryInfo.TimeSpentUnit)
                        {
                            case UnitOfTime.Hours:
                                workOrderEquipmentHistoryInfo.TimeSpent = Convert.ToDecimal(timeSpentTimeSpan.TotalHours);
                                break;
                            case UnitOfTime.Minutes:
                                workOrderEquipmentHistoryInfo.TimeSpent = Convert.ToDecimal(timeSpentTimeSpan.TotalMinutes);
                                break;
                        }
                    }
                    if (Common.GetSafeDecimal(equipmentHistoryReader, "FBREAKDOWN_DURATION") > 0)
                    {
                        workOrderEquipmentHistoryInfo.BreakdownDurationUnit = (UnitOfTime)Common.GetSafeString(equipmentHistoryReader, "FBREAKDOWN_DURATIONUNIT")[0];
                        TimeSpan breakdownTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(Common.GetSafeDecimal(equipmentHistoryReader, "FBREAKDOWN_DURATION")));
                        switch (workOrderEquipmentHistoryInfo.BreakdownDurationUnit)
                        {
                            case UnitOfTime.Hours:
                                workOrderEquipmentHistoryInfo.BreakdownDuration = Convert.ToDecimal(breakdownTimeSpan.TotalHours);
                                break;
                            case UnitOfTime.Minutes:
                                workOrderEquipmentHistoryInfo.BreakdownDuration = Convert.ToDecimal(breakdownTimeSpan.TotalMinutes);
                                break;
                        }
                    }
                    if (workOrderEquipmentHistoryDetails.TotalRecords == 0)
                    {
                        workOrderEquipmentHistoryDetails.TotalRecords = Common.GetSafeInt32(equipmentHistoryReader, "FCOUNT");
                    }

                    workOrderEquipmentHistoryDetails.WorkOrderEquipmentHistoryInfoList.Add(workOrderEquipmentHistoryInfo);
                }
                equipmentHistoryReader.Close();


                return workOrderEquipmentHistoryDetails;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching work order equipment history information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (equipmentHistoryReader != null && !equipmentHistoryReader.IsClosed)
                    equipmentHistoryReader.Close();
            }

        }

        public WorkOrderTaskDetails GetWorkOrderTaskInfo(WorkOrderFilter filter)
        {
            IDataReader workOrderReader = null;
            try
            {
                int taskIndex = 0;
                int taskGroupIdentifier = 0;
                DataTable taskPPETable = null;
                DataTable taskParameterTable = null;
                DataTable taskToolsTable = null;
                DataTable taskImageTable = null;
                List<int> selectionGroupIDList = new List<int>();
                WorkOrderTaskDetails taskDetails = new WorkOrderTaskDetails();

                string ppeImagePath = ConfigurationManager.AppSettings["PPEImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID + "/PPE";
                string toolsImagePath = ConfigurationManager.AppSettings["ToolsImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;
                string workOrderImage = ConfigurationManager.AppSettings["WorkOrderImagePath"].ToString().TrimEnd('/') + "/" + filter.SiteID;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filter.SiteID, ref currentDate, ref currentTime);

                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, filter.SiteID);

                workOrderReader = MaintenanceDAL.GetWorkOrderTaskInfo(db, filter.SiteID, filter.WorkOrderID);
                while (workOrderReader.Read())
                {
                    if (taskIndex == 0)
                    {
                        taskIndex++;
                        int taskGroupID = Common.GetSafeInt32(workOrderReader, "FTASKGROUPID");
                        taskGroupIdentifier = Common.GetSafeInt32(workOrderReader, "FIDENTIFIER");
                        taskPPETable = MaintenanceDAL.GetWorkOrderTaskPPE(db, filter.SiteID, taskGroupID, filter.WorkOrderID);
                        taskParameterTable = MaintenanceDAL.GetWorkOrderTaskParameters(db, filter.SiteID, taskGroupID, filter.WorkOrderID);
                        taskToolsTable = MaintenanceDAL.GetWorkOrderTaskTools(db, filter.SiteID, taskGroupID);
                        taskImageTable = MaintenanceDAL.GetWorkOrderImages(db, filter.SiteID, filter.WorkOrderID);
                        taskDetails.IsScheduledForToday = (currentDate == Common.GetSafeInt32(workOrderReader, "FSCHEDULEDATE")) ? true : Common.GetSafeString(workOrderReader, "FWORKORDERSTATUS")==WorkOrderStatus.OVERDUE.ToString();
                    }

                    WorkOrderTaskInfo taskInfo = new WorkOrderTaskInfo();
                    taskInfo.TaskID = Common.GetSafeInt32(workOrderReader, "FTASKID");
                    taskInfo.TaskName = Common.GetSafeString(workOrderReader, "FTASKNAME");
                    taskInfo.Description = Common.GetSafeString(workOrderReader, "FDESCRIPTION");
                    taskInfo.EstimatedTime = Common.GetSafeInt64(workOrderReader, "FESTIMATEDTIME") / 60;//converting to Minutes
                    taskInfo.SafetyDescription = Common.GetSafeString(workOrderReader, "FSAFETYDESCRIPTION");
                    taskInfo.IsSafetyConfirmed = Common.GetSafeString(workOrderReader, "FISSAFETYCONFIRMED") == "Y" ? true : false;
                    taskInfo.IsPPEConfirmed = Common.GetSafeString(workOrderReader, "FISPPECONFIRMED") == "Y" ? true : false;
                    taskInfo.RemarkEnabled = Common.GetSafeString(workOrderReader, "FREMARKENABLED") == "Y" ? true : false;
                    taskInfo.IsRemarkMandatory = Common.GetSafeString(workOrderReader, "FREMARKMANDATORY") == "Y" ? true : false;
                    taskInfo.Remarks = Common.GetSafeString(workOrderReader, "FREMARKS");
                    taskInfo.PictureEnabled = Common.GetSafeString(workOrderReader, "FPICTUREENABLED") == "Y" ? true : false;
                    taskInfo.IsPictureMandatory = Common.GetSafeString(workOrderReader, "FPICTUREMANDATORY") == "Y" ? true : false;
                    taskInfo.StartedBy = Common.GetSafeString(workOrderReader, "FSTARTEDBY");
                    taskInfo.EndedBy = Common.GetSafeString(workOrderReader, "FENDEDBY");
                    taskInfo.Status = GetWorkOrderTaskStatus(Common.GetSafeInt32(workOrderReader, "FSTARTDATE"), Common.GetSafeInt32(workOrderReader, "FENDDATE"));

                    if (Common.GetSafeInt32(workOrderReader, "FSTARTDATE") > 0)
                        taskInfo.StartedDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FSTARTDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FSTARTTIME"), siteDateTimeFormatInfo.TimeFormat);
                    if (Common.GetSafeInt32(workOrderReader, "FENDDATE") > 0)
                        taskInfo.EndDateTime = Common.GetDateFormat(Common.GetSafeInt32(workOrderReader, "FENDDATE"), siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(workOrderReader, "FENDTIME"), siteDateTimeFormatInfo.TimeFormat);

                    DataRow[] ppeRows = taskPPETable.Select("FREFERENCEID=" + taskInfo.TaskID);
                    foreach (DataRow ppeRow in ppeRows)
                    {
                        WorkOrderTaskImageInfo ppeInfo = new WorkOrderTaskImageInfo();
                        int ppeID = Convert.ToInt32(ppeRow["FPPEID"]);
                        ppeInfo.ImageID = Convert.ToInt32(ppeRow["FTASKPPEID"]);
                        ppeInfo.Description = Convert.ToString(ppeRow["FPPEDESC"]);
                        ppeInfo.ImagePath = ppeImagePath + "/" + ppeID + "/Thumbnail/" + Convert.ToString(ppeRow["FPPEIMAGENAME"]);
                        taskInfo.PPEList.Add(ppeInfo);
                    }

                    DataRow[] toolsRows = taskToolsTable.Select("FREFERENCEID=" + taskInfo.TaskID);
                    foreach (DataRow toolRow in toolsRows)
                    {
                        WorkOrderTaskImageInfo toolInfo = new WorkOrderTaskImageInfo();
                        int toolsID = Convert.ToInt32(toolRow["FTOOLSID"]);
                        toolInfo.ImageID = Convert.ToInt32(toolRow["FTASKTOOLSID"]);
                        toolInfo.Description = Convert.ToString(toolRow["FTOOLSDESC"]);
                        toolInfo.ImagePath = toolsImagePath + "/Thumbnail/" + Convert.ToString(toolRow["FTOOLSIMAGENAME"]);
                        taskInfo.ToolsList.Add(toolInfo);
                    }

                    DataRow[] imageRows = taskImageTable.Select("FTASKID=" + taskInfo.TaskID);
                    foreach (DataRow imageRow in imageRows)
                    {
                        WorkOrderTaskImageInfo toolInfo = new WorkOrderTaskImageInfo();
                        toolInfo.ImageID = Convert.ToInt32(imageRow["FIMAGEITEM"]);
                        toolInfo.ThubmnailPath = workOrderImage + "/" + filter.WorkOrderID + "/Thumbnail/" + Convert.ToString(imageRow["FIMAGENAME"]);
                        toolInfo.ImagePath = workOrderImage + "/" + filter.WorkOrderID + "/" + Convert.ToString(imageRow["FIMAGENAME"]);
                        taskInfo.ImageList.Add(toolInfo);
                    }

                    DataRow[] parameterRows = taskParameterTable.Select("FREFERENCEID=" + taskInfo.TaskID);
                    foreach (DataRow parameterRow in parameterRows)
                    {
                        WorkOrderTaskParameterInfo parameterInfo = new WorkOrderTaskParameterInfo();
                        parameterInfo.ParameterID = Convert.ToInt32(parameterRow["FPARAMETERID"]);
                        parameterInfo.ParameterName = Convert.ToString(parameterRow["FPARAMNAME"]);
                        parameterInfo.IsMandatory = Convert.ToString(parameterRow["FISMANDATORY"]) == "Y" ? true : false;
                        parameterInfo.Type = (ParameterType)Convert.ToChar(Convert.ToString(parameterRow["FTYPE"]));
                        parameterInfo.Value = Convert.ToString(parameterRow["FVALUE"]);
                        parameterInfo.ValueDisplayName = Convert.ToString(parameterRow["FDISPLAYNAME"]);
                        if (Convert.ToString(parameterRow["FSELECTIONGROUPID"]).Length > 0)
                        {
                            parameterInfo.SelectionGroupID = Convert.ToInt32(parameterRow["FSELECTIONGROUPID"]);
                            selectionGroupIDList.Add(parameterInfo.SelectionGroupID);
                        }
                        taskInfo.ParameterList.Add(parameterInfo);
                    }

                    taskInfo.DocumentInfoList = GetTaskDocumentsOrImagesOrVideoInfo(db, filter.SiteID, taskInfo.TaskID, taskGroupIdentifier);

                    taskDetails.TaskInfoList.Add(taskInfo);
                }
                workOrderReader.Close();

                if (selectionGroupIDList.Count > 0)
                {
                    string selectionGroupIDListString = string.Join(",", selectionGroupIDList);

                    workOrderReader = MaintenanceDAL.GetSelectionGroupInfo(db, filter.SiteID, selectionGroupIDListString);
                    while (workOrderReader.Read())
                    {
                        int selGroupID = Common.GetSafeInt32(workOrderReader, "FMASTERID");
                        SelectionGroupInfo selGroup = taskDetails.SeletionGroupInfoList.FirstOrDefault(sgroup => sgroup.SelectionGroupID == selGroupID);
                        if (selGroup == null)
                        {
                            selGroup = new SelectionGroupInfo();
                            selGroup.SelectionGroupID = selGroupID;
                            taskDetails.SeletionGroupInfoList.Add(selGroup);
                        }
                        KeyValueInfo valueInfo = new KeyValueInfo();
                        valueInfo.Key = Common.GetSafeString(workOrderReader, "FDISPLAYNAME");
                        valueInfo.Value = Common.GetSafeInt32(workOrderReader, "FITEMID").ToString();
                        selGroup.KeyValueInfoList.Add(valueInfo);
                    }
                    workOrderReader.Close();
                }

                return taskDetails;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while fetching work order task information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filter.SiteID + ", Work order ID: " + filter.WorkOrderID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (workOrderReader != null && !workOrderReader.IsClosed)
                    workOrderReader.Close();
            }
        }

        public TaskStartEndReturnInfo StartWorkOrderTask(WorkOrderTaskProcessInfo startTaskInfo)
        {
            // 1, Task started successfully.
            // 0, Task doesn't exist
            // -1, Doesn't have permission
            // -2, Task already started.       
            // -3, Task group doesn't exists
            IDataReader dataReaderInfo = null;
            try
            {
                int taskGroupID = 0;
                int workGroupID = 0;
                bool isFirstTask = true;
                TaskStartEndReturnInfo returnInfo = new TaskStartEndReturnInfo();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                #region Validation

                Common.AccessType viewTaskAccess = Common.ValidateUserPrivileges(db, startTaskInfo.SiteID, startTaskInfo.UserID, Convert.ToInt32(Language_Resources.MaintenancePageID_Resource.ViewWorkOrderInfo));
                if (viewTaskAccess != Common.AccessType.FULL_ACCESS)
                {
                    returnInfo.ReturnValue = -1;
                }
                else
                {
                    DataTable workOrderTaskInfo = MaintenanceDAL.GetWorkOrderTaskGroupTaskInfo(db, startTaskInfo.SiteID, startTaskInfo.WorkOrderID, 0);

                    foreach (DataRow taskRow in workOrderTaskInfo.Rows)
                    {
                        int taskID = Convert.ToInt32(taskRow["FTASKID"]);
                        int startDate = Convert.ToInt32(taskRow["FSTARTDATE"]);

                        if (taskID == startTaskInfo.TaskID)
                        {
                            if (startDate > 0)
                            {
                                returnInfo.ReturnValue = -2;
                                break;
                            }
                        }

                        if (startDate > 0)
                            isFirstTask = false;
                    }
                }

                #endregion

                if (isFirstTask)
                {
                    taskGroupID = MaintenanceDAL.GetTaskGroupID(db, startTaskInfo.SiteID, startTaskInfo.WorkOrderID);
                    if (taskGroupID == 0)
                        returnInfo.ReturnValue = -3;

                    workGroupID = MaintenanceDAL.GetWorkGroupID(db, startTaskInfo.SiteID, startTaskInfo.WorkOrderID);
                }

                if (returnInfo.ReturnValue == 0)
                {
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, startTaskInfo.SiteID, ref currentDate, ref currentTime);

                    char isSafetyConfirmed = 'N';
                    char isPPEConfirmed = 'N';
                    if (startTaskInfo.IsSafetyConfirmed)
                        isSafetyConfirmed = 'Y';
                    if (startTaskInfo.IsPPEConfirmed)
                        isPPEConfirmed = 'Y';

                    bool isNotificationOrder = false;
                    dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, startTaskInfo.SiteID, 0, startTaskInfo.WorkOrderID, false);
                    if (dataReaderInfo.Read())
                    {
                        isNotificationOrder = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FISNOTIFICATIONORDER")) == 'Y';
                    }
                    dataReaderInfo.Close();

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        DbTransaction transaction = dbConnection.BeginTransaction();
                        try
                        {
                            if (isFirstTask)
                            {
                                MaintenanceDAL.UpdateWorkOrderStartEndInfo(db, transaction, startTaskInfo.SiteID, startTaskInfo.WorkOrderID, WorkOrderStatus.INPROGRESS.ToString(), taskGroupID, currentDate, currentTime, startTaskInfo.UserID, workGroupID);
                                //update status of notification
                                if (isNotificationOrder)
                                {
                                    MaintenanceDAL.UpdateNotificationStatus(db, transaction, startTaskInfo.SiteID, 0, startTaskInfo.WorkOrderID, NotificationStatus.INPROGRESS.ToString(), startTaskInfo.UserID, currentDate, currentTime);
                                }
                            }

                            int sequenceNo = MaintenanceDAL.GetWorkOrderTaskNextSequence(db, transaction, startTaskInfo.SiteID, startTaskInfo.WorkOrderID);

                            MaintenanceDAL.InsertTaskStartInfo(db, transaction, startTaskInfo.SiteID, startTaskInfo.WorkOrderID, startTaskInfo.TaskID, sequenceNo, isSafetyConfirmed, currentDate, currentTime, startTaskInfo.UserID, isPPEConfirmed);

                            transaction.Commit();
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }

                    returnInfo.ReturnValue = 1;
                    SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, startTaskInfo.SiteID);
                    returnInfo.CurrentDateTime = Common.GetDateFormat(currentDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(currentTime, siteDateTimeFormatInfo.TimeFormat);
                    returnInfo.UserName = Common.GetUserName(db, startTaskInfo.UserID);
                }

                return returnInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while starting work order task", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + startTaskInfo.SiteID + ", Work order ID: " + startTaskInfo.WorkOrderID + ", Task ID : " + startTaskInfo.TaskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public TaskStartEndReturnInfo EndWorkOrderTask(WorkOrderTaskProcessInfo endTaskInfo)
        {
            // 1, Task ended successfully.
            // 0, Task doesn't exist
            // -1, Doesn't have permission
            // -2, Task already ended.
            // -3, Task is not started
            // -4, Remarks missing
            // -5, Image missing
            // -6, Parameters missing
            IDataReader dataReaderInfo = null;
            try
            {
                bool isLastTask = false;
                TaskStartEndReturnInfo returnInfo = new TaskStartEndReturnInfo();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                #region Validation

                Common.AccessType viewTaskAccess = Common.ValidateUserPrivileges(db, endTaskInfo.SiteID, endTaskInfo.UserID, Convert.ToInt32(Language_Resources.MaintenancePageID_Resource.ViewWorkOrderInfo));
                if (viewTaskAccess != Common.AccessType.FULL_ACCESS)
                {
                    returnInfo.ReturnValue = -1;
                }
                else
                {
                    int completedTaskCount = 0;

                    DataTable workOrderTaskInfo = MaintenanceDAL.GetWorkOrderTaskGroupTaskInfo(db, endTaskInfo.SiteID, endTaskInfo.WorkOrderID, 0);

                    foreach (DataRow taskRow in workOrderTaskInfo.Rows)
                    {
                        int taskID = Convert.ToInt32(taskRow["FTASKID"]);
                        int startDate = Convert.ToInt32(taskRow["FSTARTDATE"]);
                        int endDate = Convert.ToInt32(taskRow["FENDDATE"]);

                        if (taskID == endTaskInfo.TaskID)
                        {
                            if (endDate > 0)
                            {
                                returnInfo.ReturnValue = -2;
                                break;
                            }
                            else if (startDate == 0)
                            {
                                returnInfo.ReturnValue = -3;
                                break;
                            }
                        }

                        if (endDate > 0)
                            completedTaskCount++;
                    }

                    if (completedTaskCount == (workOrderTaskInfo.Rows.Count - 1))
                        isLastTask = true;

                    if (returnInfo.ReturnValue == 0)
                    {
                        DataTable taskMandatoryItem = MaintenanceDAL.GetWorkOrderTaskMandatoryItems(db, endTaskInfo.SiteID, endTaskInfo.WorkOrderID, endTaskInfo.TaskID);
                        if (taskMandatoryItem.Rows.Count > 0)
                        {
                            bool remarkMandatory = Convert.ToString(taskMandatoryItem.Rows[0]["FREMARKMANDATORY"]) == "Y" ? true : false;
                            bool imageMandatory = Convert.ToString(taskMandatoryItem.Rows[0]["FPICTUREMANDATORY"]) == "Y" ? true : false;
                            string remarks = Convert.ToString(taskMandatoryItem.Rows[0]["FREMARKS"]);
                            int imageCount = Convert.ToInt32(taskMandatoryItem.Rows[0]["IMAGECOUNT"]);

                            if (remarkMandatory && remarks.Trim().Length == 0)
                            {
                                returnInfo.ReturnValue = -4;
                            }
                            else if (imageMandatory && imageCount == 0)
                            {
                                returnInfo.ReturnValue = -5;
                            }
                            else
                            {
                                foreach (DataRow parameterRow in taskMandatoryItem.Rows)
                                {
                                    if (Convert.ToInt32(parameterRow["SAVEDPARAMETER"]) == 0)
                                    {
                                        int parameterID = Convert.ToInt32(parameterRow["FPARAMETERID"]);
                                        if (parameterID > 0)
                                            returnInfo.MissingParameterIDList.Add(parameterID);
                                    }
                                }

                                if (returnInfo.MissingParameterIDList.Count > 0)
                                    returnInfo.ReturnValue = -6;
                            }
                        }
                    }
                }
                #endregion

                if (returnInfo.ReturnValue == 0)
                {
                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, endTaskInfo.SiteID, ref currentDate, ref currentTime);

                    bool isNotificationOrder = false;
                    dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, endTaskInfo.SiteID, 0, endTaskInfo.WorkOrderID, false);
                    if (dataReaderInfo.Read())
                    {
                        isNotificationOrder = Convert.ToChar(Common.GetSafeChar(dataReaderInfo, "FISNOTIFICATIONORDER")) == 'Y';
                    }
                    dataReaderInfo.Close();

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        DbTransaction transaction = dbConnection.BeginTransaction();
                        try
                        {
                            MaintenanceDAL.UpdateTaskEndInfo(db, transaction, endTaskInfo.SiteID, endTaskInfo.WorkOrderID, endTaskInfo.TaskID, currentDate, currentTime, endTaskInfo.UserID);

                            if (isLastTask)
                            {
                                MaintenanceDAL.UpdateWorkOrderStartEndInfo(db, transaction, endTaskInfo.SiteID, endTaskInfo.WorkOrderID, WorkOrderStatus.COMPLETED.ToString(), 0, currentDate, currentTime, endTaskInfo.UserID, 0);
                                //update status and notification workorder of notification
                                if (isNotificationOrder)
                                {
                                    MaintenanceDAL.UpdateNotificationStatus(db, transaction, endTaskInfo.SiteID, 0, endTaskInfo.WorkOrderID, NotificationStatus.COMPLETED.ToString(), endTaskInfo.UserID, currentDate, currentTime);
                                }
                            }

                            transaction.Commit();
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }

                    returnInfo.ReturnValue = 1;
                    SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, endTaskInfo.SiteID);
                    returnInfo.CurrentDateTime = Common.GetDateFormat(currentDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(currentTime, siteDateTimeFormatInfo.TimeFormat);
                    returnInfo.UserName = Common.GetUserName(db, endTaskInfo.UserID);
                }

                return returnInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while ending work order task", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + endTaskInfo.SiteID + ", Work order ID: " + endTaskInfo.WorkOrderID + ", Task ID : " + endTaskInfo.TaskID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public int SaveTaskParameterValue(TaskParameterInfo taskParameter)
        {
            //  1, Saved successfully
            // -1, Doesn't have permission
            // -1, Phase is already completed
            // -2, Phase is not started.
            try
            {
                int returnValue = 0;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                #region Validation

                Common.AccessType viewTaskAccess = Common.ValidateUserPrivileges(db, taskParameter.SiteID, taskParameter.UserID, Convert.ToInt32(Language_Resources.MaintenancePageID_Resource.ViewWorkOrderInfo));
                if (viewTaskAccess != Common.AccessType.FULL_ACCESS && viewTaskAccess != Common.AccessType.EDIT_ONLY)
                {
                    returnValue = -1;
                }
                else
                {
                    DataTable taskInfoTable = MaintenanceDAL.GetWorkOrderTaskGroupTaskInfo(db, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID);
                    if (taskInfoTable.Rows.Count > 0)
                    {
                        if (Convert.ToInt32(taskInfoTable.Rows[0]["FENDDATE"]) > 0)
                            returnValue = -2;
                        else if (Convert.ToInt32(taskInfoTable.Rows[0]["FSTARTDATE"]) == 0)
                            returnValue = -3;
                    }
                }
                #endregion

                if (returnValue == 0)
                {
                    DataTable parameterTable = MaintenanceDAL.GetWorkOrderTaskParamterValues(db, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID);

                    Dictionary<int, string> parameterValueInfoList = new Dictionary<int, string>();
                    foreach (DataRow parameterRow in parameterTable.Rows)
                    {
                        int parameterID = Convert.ToInt32(parameterRow["FPARAMETERID"]);
                        string parameterValue = Convert.ToString(parameterRow["FSTATUS"]);
                        parameterValueInfoList.Add(parameterID, parameterValue);
                    }

                    int currentDate = 0;
                    int currentTime = 0;
                    Common.GetCurrentSiteDateTime(db, taskParameter.SiteID, ref currentDate, ref currentTime);

                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        DbTransaction transaction = dbConnection.BeginTransaction();
                        try
                        {
                            MaintenanceDAL.UpdateTaskRemark(db, transaction, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID, taskParameter.Remarks, currentDate, currentTime);

                            foreach (TaskParameterValueInfo parameterInfo in taskParameter.ParameterList)
                            {
                                string status = string.Empty;
                                if (parameterValueInfoList.TryGetValue(parameterInfo.ParameterID, out status))
                                {
                                    MaintenanceDAL.UpdateWorkOrderTaskParameterValue(db, transaction, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID, parameterInfo.ParameterID, parameterInfo.ParameterValue, parameterInfo.SelectCodeItem, currentDate, currentTime);

                                    parameterValueInfoList.Remove(parameterInfo.ParameterID);
                                }
                                else
                                {
                                    MaintenanceDAL.InsertTaskParameterValue(db, transaction, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID, parameterInfo.ParameterID, parameterInfo.ParameterValue, parameterInfo.SelectCodeItem, 'A', taskParameter.UserID, currentDate, currentTime, currentDate, currentTime, currentDate, currentTime);
                                }
                            }

                            StringBuilder deletedParameterIDListString = new StringBuilder();
                            foreach (var parameterInfo in parameterValueInfoList)
                            {
                                if (parameterInfo.Value == "A")
                                {
                                    if (deletedParameterIDListString.Length == 0)
                                        deletedParameterIDListString.Append(parameterInfo.Key);
                                    else
                                        deletedParameterIDListString.Append("," + parameterInfo.Key);
                                }
                            }

                            if (deletedParameterIDListString.Length > 0)
                            {
                                MaintenanceDAL.DeleteTaskParametersValue(db, transaction, taskParameter.SiteID, taskParameter.WorkOrderID, taskParameter.TaskID, deletedParameterIDListString.ToString(), currentDate, currentTime);
                            }

                            transaction.Commit();
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }

                    returnValue = 1;
                }
                return returnValue;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while saving work order task parameter values", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + taskParameter.SiteID + ", Work order ID: " + taskParameter.WorkOrderID + ", Task ID : " + taskParameter.TaskID);
                throw new FaultException(exceptionErrorMessage);
            }
        }


        public WorkOrderTaskImageInfo InsertWorkOrderTaskImage(WorkOrderTaskImageUploadInfo imageUploadInfo)
        {
            try
            {
                WorkOrderTaskImageInfo returnInfo = new WorkOrderTaskImageInfo();

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, imageUploadInfo.SiteID, ref currentDate, ref currentTime);

                #region Validation

                Common.AccessType viewTaskAccess = Common.ValidateUserPrivileges(db, imageUploadInfo.SiteID, imageUploadInfo.UserID, Convert.ToInt32(Language_Resources.MaintenancePageID_Resource.ViewWorkOrderInfo));
                if (viewTaskAccess != Common.AccessType.FULL_ACCESS && viewTaskAccess != Common.AccessType.EDIT_ONLY)
                {
                    returnInfo.ImageID = -1;
                }
                else
                {
                    DataTable taskInfoTable = MaintenanceDAL.GetWorkOrderTaskGroupTaskInfo(db, imageUploadInfo.SiteID, imageUploadInfo.WorkOrderID, imageUploadInfo.TaskID);
                    if (taskInfoTable.Rows.Count > 0)
                    {
                        if (Convert.ToInt32(taskInfoTable.Rows[0]["FENDDATE"]) > 0)
                            returnInfo.ImageID = -2;
                        else if (Convert.ToInt32(taskInfoTable.Rows[0]["FSTARTDATE"]) == 0)
                            returnInfo.ImageID = -3;
                    }
                }
                #endregion

                if (returnInfo.ImageID == 0)
                {
                    string workOrderImage = ConfigurationManager.AppSettings["WorkOrderImagePath"].ToString().TrimEnd('/') + "/" + imageUploadInfo.SiteID;

                    int imageItem = MaintenanceDAL.GetNextWorkOrderTaskImageNextItem(db, imageUploadInfo.SiteID, imageUploadInfo.WorkOrderID, imageUploadInfo.TaskID);

                    MaintenanceDAL.InsertWorkOrderTaskImage(db, null, imageUploadInfo.SiteID, imageUploadInfo.WorkOrderID, Convert.ToInt64(imageUploadInfo.TaskID), imageItem, imageUploadInfo.ImageName, currentDate, currentTime,
                        currentDate, currentTime, string.Empty);

                    returnInfo.ImageID = imageItem;
                    returnInfo.ThubmnailPath = workOrderImage + "/" + imageUploadInfo.WorkOrderID + "/Thumbnail/" + imageUploadInfo.ImageName;
                    returnInfo.ImagePath = workOrderImage + "/" + imageUploadInfo.WorkOrderID + "/" + imageUploadInfo.ImageName;
                }
                return returnInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while updating work order task image", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + imageUploadInfo.SiteID + ", Work order ID: " + imageUploadInfo.WorkOrderID + ", Task ID : " + imageUploadInfo.TaskID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private string GetWorkOrderTaskStatus(int startDate, int endDate)
        {
            if (startDate > 0 && endDate > 0)
                return "C";
            else if (startDate > 0)
                return "P";
            else
                return "N";
        }

        public WorkOrderSparePartsInfo GetWorkOrderSpareParts(WorkOrderFilter filterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                WorkOrderSparePartsInfo workOrderSparePartsInfo = new WorkOrderSparePartsInfo();
                MaintSparePartInfo sparePartInfo = null;
                int index = 0;

                dataReaderInfo = MaintenanceDAL.GetWorkOrderSpareParts(db, filterInfo.SiteID, filterInfo.WorkOrderID);
                while (dataReaderInfo.Read())
                {
                    if (index == 0)
                    {
                        index++;
                        workOrderSparePartsInfo.IsOrderInProgress= Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS")==WorkOrderStatus.INPROGRESS.ToString();
                    }
                    sparePartInfo = new MaintSparePartInfo();
                    sparePartInfo.MaterialNumber = Common.GetSafeString(dataReaderInfo, "FIDHID");
                    sparePartInfo.MaterialDesc = Common.GetSafeString(dataReaderInfo, "FIDHDESC");
                    sparePartInfo.Quantity = Common.GetSafeDecimal(dataReaderInfo, "FREQUIREDQUANTITY");
                    sparePartInfo.UsedQuantity = Common.GetSafeDecimal(dataReaderInfo, "FACTUALQUANTITY");
                    sparePartInfo.UOM = Common.GetSafeString(dataReaderInfo, "FBASEUOM");
                    workOrderSparePartsInfo.WorkOrderSpareParts.Add(sparePartInfo);
                }
                dataReaderInfo.Close();

                return workOrderSparePartsInfo;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching spare part info for work order", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public bool SaveWorkOrderSparePartInfo(MaintSparePartDetails filterInfo)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, filterInfo.SiteID, ref currentDate, ref currentTime);

                using (DbConnection connection = db.CreateConnection())
                {
                    connection.Open();
                    DbTransaction transaction = connection.BeginTransaction();
                    try
                    {
                        foreach (var sparePartInfo in filterInfo.SparePartList)
                        {
                            if (MaintenanceDAL.CheckWorkOrderSparePartExists(db, transaction, filterInfo.SiteID, filterInfo.WorkOrderID, sparePartInfo.MaterialNumber))
                            {
                                MaintenanceDAL.UpdateWorkOrderSparePart(db, transaction, filterInfo.SiteID, filterInfo.WorkOrderID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, sparePartInfo.UsedQuantity, filterInfo.UserID, currentDate, currentTime);
                            }
                            else
                            {
                                MaintenanceDAL.InsertWorkOrderSparePart(db, transaction, filterInfo.SiteID, filterInfo.WorkOrderID, sparePartInfo.MaterialNumber, sparePartInfo.Quantity, sparePartInfo.UsedQuantity, filterInfo.UserID, currentDate, currentTime, filterInfo.UserID, currentDate, currentTime);
                            }
                        }

                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while saving spare part info for work order", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(ex.Message);
            }
        }

        public bool CloseWorkOrderInfo(WorkOrderCloseInfo workOrderFilter)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;

                Common.GetCurrentSiteDateTime(db, workOrderFilter.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        double estimatedLaborTimeInminutes = 0;
                        switch (workOrderFilter.LaborTimeTakenUnit)
                        {
                            case UnitOfTime.Hours:
                                TimeSpan hourTimeSpan = TimeSpan.FromHours(Convert.ToDouble(workOrderFilter.LaborTime));
                                estimatedLaborTimeInminutes = hourTimeSpan.TotalMinutes;
                                break;
                            case UnitOfTime.Minutes:
                                TimeSpan minTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(workOrderFilter.LaborTime));
                                estimatedLaborTimeInminutes = minTimeSpan.TotalMinutes;
                                break;
                        }
                        double estimatedActualTimeInminutes = 0;
                        switch (workOrderFilter.TimeSpentUnit)
                        {
                            case UnitOfTime.Hours:
                                TimeSpan hourTimeSpan = TimeSpan.FromHours(Convert.ToDouble(workOrderFilter.TimeSpent));
                                estimatedActualTimeInminutes = hourTimeSpan.TotalMinutes;
                                break;
                            case UnitOfTime.Minutes:
                                TimeSpan minTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(workOrderFilter.TimeSpent));
                                estimatedActualTimeInminutes = minTimeSpan.TotalMinutes;
                                break;
                        }
                        double estimatedDowntimeTimeInminutes = 0;
                        if (workOrderFilter.BreakdownDurationUnit > 0)
                        {
                            switch (workOrderFilter.BreakdownDurationUnit)
                            {
                                case UnitOfTime.Hours:
                                    TimeSpan hourTimeSpan = TimeSpan.FromHours(Convert.ToDouble(workOrderFilter.BreakdownDuration));
                                    estimatedDowntimeTimeInminutes = hourTimeSpan.TotalMinutes;
                                    break;
                                case UnitOfTime.Minutes:
                                    TimeSpan minTimeSpan = TimeSpan.FromMinutes(Convert.ToDouble(workOrderFilter.BreakdownDuration));
                                    estimatedDowntimeTimeInminutes = minTimeSpan.TotalMinutes;
                                    break;
                            }
                        }
                        MaintenanceDAL.UpdateWorkOrderStatus(db, transaction, workOrderFilter.SiteID, workOrderFilter.WorkOrderID, workOrderFilter.IsWorkOrderClose == true ? WorkOrderStatus.CLOSED.ToString() : string.Empty, workOrderFilter.WorkStartDate, workOrderFilter.WorkStartTime,
                            workOrderFilter.WorkEndDate, workOrderFilter.WorkEndTime, Convert.ToDecimal(estimatedLaborTimeInminutes), Convert.ToChar(workOrderFilter.LaborTimeTakenUnit), Convert.ToDecimal(estimatedActualTimeInminutes), Convert.ToChar(workOrderFilter.TimeSpentUnit),
                            workOrderFilter.BreakdownStartDate, workOrderFilter.BreakdownStartTime, workOrderFilter.BreakdownEndDate, workOrderFilter.BreakdownEndTime, Convert.ToDecimal(estimatedDowntimeTimeInminutes), Convert.ToChar(workOrderFilter.BreakdownDurationUnit),
                            workOrderFilter.UserID, currentDate, currentTime);
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while closing work order info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + workOrderFilter.SiteID + ";UserID: " + workOrderFilter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }
        #endregion

        #region Tools Info
        public ToolsListInfo GetAllToolsInfo(ToolsFilterInfo filterInfo)
        {
            IDataReader dataReaderToolsInfo = null;
            try
            {

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                Common.GetSiteDateTimeFormat(db, filterInfo.SiteID, ref siteDateFormat, ref siteTimeFormat);
                string ImagePath = ConfigurationManager.AppSettings["ToolsImagePath"].ToString().TrimEnd('/') + "/" + filterInfo.SiteID + "/" + "Thumbnail";

                ToolsListInfo ToolsListInfo = new ToolsListInfo();
                ToolsInfo toolInfo = null;

                dataReaderToolsInfo = MaintenanceDAL.GetAllToolsInfo(db, filterInfo.SiteID, filterInfo.PageSize, filterInfo.PageIndex, filterInfo.SortType, filterInfo.ToolID);
                while (dataReaderToolsInfo.Read())
                {
                    toolInfo = new ToolsInfo();
                    toolInfo.ToolID = Common.GetSafeInt32(dataReaderToolsInfo, "FTOOLSID");
                    toolInfo.ToolDesc = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSDESC");
                    toolInfo.ImageName = Common.GetSafeString(dataReaderToolsInfo, "FTOOLSIMAGENAME");
                    string imageUrl = string.Empty;

                    if (toolInfo.ImageName.Length > 0)
                        imageUrl = ImagePath + "/" + toolInfo.ImageName;

                    if (imageUrl.Length > 0)
                        toolInfo.ThumbnailPath = imageUrl;
                    else
                        toolInfo.ThumbnailPath = null;

                    if (ToolsListInfo.TotalRecords == 0 && filterInfo.PageSize > 0)
                        ToolsListInfo.TotalRecords = Common.GetSafeInt32(dataReaderToolsInfo, "FCOUNT");

                    ToolsListInfo.ToolsList.Add(toolInfo);
                }
                dataReaderToolsInfo.Close();

                return ToolsListInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while getting tools records info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + filterInfo.SiteID + ";UserID: " + filterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderToolsInfo != null && !dataReaderToolsInfo.IsClosed)
                    dataReaderToolsInfo.Close();
            }

        }

        public int InsertOrUpdateToolInfo(BasicParam basicParam, ToolsInfo toolsInfo)
        {
            IDataReader dataReaderToolsInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;

                string description = string.Empty;
                string descInEnglish = string.Empty;
                int result = 0;
                int toolID = 0;
                string status = "I";
                bool isDescriptionExist = false;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                if (toolsInfo.ToolID == 0)
                {  //Insert
                    dataReaderToolsInfo = MaintenanceDAL.CheckToolExist(db, basicParam.SiteID, 0, toolsInfo.ToolDesc, false);
                    if (dataReaderToolsInfo.Read())
                    {
                        toolID = Common.GetSafeInt32(dataReaderToolsInfo, "FTOOLSID");
                        status = Common.GetSafeString(dataReaderToolsInfo, "FSTATUS");
                    }
                    dataReaderToolsInfo.Close();

                    if (status == "A")
                    {
                        result = 1;// Tool description already exists
                        return result;
                    }

                    if (toolID == 0 && status == "I")
                    {
                        MaintenanceDAL.InsertToolsInfo(db, null, basicParam.SiteID, toolsInfo.ToolDesc, toolsInfo.ImageName, basicParam.UserID, currentDate);
                        result = 2;//Inserted successfully
                    }
                    else
                    {
                        MaintenanceDAL.UpdateToolStatus(db, null, basicParam.SiteID, toolID, 'A', basicParam.UserID, currentDate);
                        MaintenanceDAL.UpdateToolsInfo(db, null, basicParam.SiteID, toolID, toolsInfo.ToolDesc, toolsInfo.ImageName, basicParam.UserID, currentDate);

                        #region Log Information
                        description = Language_Resources.Maintenance_LogInformations_Resource.toolInfoStatus.Replace("[XXX]", toolsInfo.ToolDesc.Trim());
                        descInEnglish = "Successfully updates status active for tool description : " + toolsInfo.ToolDesc.Trim();
                        CommonDAL.InsertLogInformation(db, null, basicParam.SiteID, LogTypes.Config_Tool_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);

                        description = Language_Resources.Maintenance_LogInformations_Resource.toolInfoUpdated.Replace("[XXX]", toolsInfo.ToolDesc.Trim());
                        descInEnglish = "Successfully updated tool information for tool description : " + toolsInfo.ToolDesc.Trim();
                        CommonDAL.InsertLogInformation(db, null, basicParam.SiteID, LogTypes.Config_Tool_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                        #endregion
                        result = 2;//Inserted successfully
                    }

                }
                else
                {
                    dataReaderToolsInfo = MaintenanceDAL.CheckToolExist(db, basicParam.SiteID, toolsInfo.ToolID, toolsInfo.ToolDesc, true);
                    if (dataReaderToolsInfo.Read())
                    {
                        isDescriptionExist = true;
                    }
                    dataReaderToolsInfo.Close();

                    if (isDescriptionExist)
                    {
                        result = 1;// Tool description already exists
                        return result;
                    }
                    else
                    {   //Update                        
                        MaintenanceDAL.UpdateToolsInfo(db, null, basicParam.SiteID, toolsInfo.ToolID, toolsInfo.ToolDesc, toolsInfo.ImageName, basicParam.UserID, currentDate);
                        #region Log Information
                        description = Language_Resources.Maintenance_LogInformations_Resource.toolInfoUpdated.Replace("[XXX]", toolsInfo.ToolDesc.Trim());
                        descInEnglish = "Successfully updated tool information for tool description : " + toolsInfo.ToolDesc.Trim();
                        CommonDAL.InsertLogInformation(db, null, basicParam.SiteID, LogTypes.Config_Tool_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                        #endregion
                        result = 3;//updated successfully
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting or updating tools info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderToolsInfo != null && !dataReaderToolsInfo.IsClosed)
                    dataReaderToolsInfo.Close();
            }
        }

        public int DeleteToolsInfo(BasicParam basicParam, int toolID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                bool isExists = false;
                string toolDescription = string.Empty;
                string description = string.Empty;
                string descInEnglish = string.Empty;

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                dataReaderInfo = MaintenanceDAL.CheckToolExist(db, basicParam.SiteID, toolID, string.Empty, true);
                if (dataReaderInfo.Read())
                {
                    toolDescription = Common.GetSafeString(dataReaderInfo, "FTOOLSDESC");
                    isExists = true;
                }
                dataReaderInfo.Close();
                if (isExists)
                {
                    MaintenanceDAL.UpdateToolStatus(db, null, basicParam.SiteID, toolID, 'I', basicParam.UserID, currentDate);
                    #region Log Information
                    description = Language_Resources.Maintenance_LogInformations_Resource.toolInfoDeleted.Replace("[XXX]", toolDescription.Trim());
                    descInEnglish = "Successfully updated tool information for tool description : " + toolDescription.Trim();
                    CommonDAL.InsertLogInformation(db, null, basicParam.SiteID, LogTypes.Config_Tool_Info.ToString(), description, descInEnglish, basicParam.UserID, currentDate, currentTime);
                    #endregion
                    return 1;
                }
                else
                {
                    return 2;//tools info doesn't exists to delete.
                }

            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while deleting tools info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #endregion

        #region Configure Spare parts
        private void BindSparePartsExcelHeaderInfo(Database db, int siteID, ExcelWorksheet worksheet, Color colFromHex, ExcelPackage package, int rowIndex, int columnIndex, int minValue)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                //Get all distinct category types
                List<string> categoryList = new List<string>();
                dataReaderInfo = MaintenanceDAL.GetMaintMasterData(db, siteID, string.Empty, MasterDataType.SPARE_PARTS.ToString(), 0, 0, "MasterDataName_asc");
                while (dataReaderInfo.Read())
                {
                    categoryList.Add(Common.GetSafeString(dataReaderInfo, "FNAME"));
                }
                dataReaderInfo.Close();

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.SpareParts_Resource.materialCode;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 18, Language_Resources.SpareParts_Resource.materialCode, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                worksheet.Column(columnIndex).Style.Numberformat.Format = "@";
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.SpareParts_Resource.description;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 300, Language_Resources.SpareParts_Resource.description, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 50;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.SpareParts_Resource.category;
                Common.BindExcelCellListData(package, worksheet, "CategoryList", columnIndex, categoryList, true);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.SpareParts_Resource.uom;
                Common.BindDataValidationForExcel(db, worksheet, package, columnIndex, "", "", minValue, 3, Language_Resources.SpareParts_Resource.uom, ExcelDataValidation.TextLength);
                worksheet.Column(columnIndex).Width = 20;
                columnIndex++;

                worksheet.Cells[rowIndex, columnIndex].Value = Language_Resources.SpareParts_Resource.status;
                worksheet.Column(columnIndex).Width = 20;
                Common.BindExcelCellListData(package, worksheet, "StatusList", columnIndex, new List<string> { "Mark Delete" }, false);
                rowIndex++;

                //Format the header for column
                using (ExcelRange headerColumnRange = worksheet.Cells[worksheet.Dimension.Address])
                {
                    headerColumnRange.Style.Font.Bold = true;
                    headerColumnRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    headerColumnRange.Style.Fill.BackgroundColor.SetColor(colFromHex);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        #region Download Excel Template

        public string DownloadSparePartsTemplate(BasicParam basicParam)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "SparePartsInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadExcelTemplate asyncSparePartsTemplate = new DownloadExcelTemplate(GetSparePartsTemplate);
                asyncSparePartsTemplate.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetSparePartsTemplate(Database db, BasicParam basicParam, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SparePartsInfo");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindSparePartsExcelHeaderInfo(db, basicParam.SiteID, worksheet, colFromHex, package, rowIndex, columnIndex, minValue);

                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading spare parts excel template", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + basicParam.SiteID + ", UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        #endregion

        #region Download Excel Info

        public string DownloadSparePartsListExcel(SparePartsFilterInfo filter)
        {
            try
            {
                string fileName = string.Empty;
                AsyncCallback cb = new AsyncCallback(send);
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                fileName = "SparePartsInfo_" + DateTime.Now.ToString("ddMMhhmmssffff");
                DownloadSparePartsInfo asyncSparePartsInfo = new DownloadSparePartsInfo(GetSparePartsInfoForDownload);
                asyncSparePartsInfo.BeginInvoke(db, filter, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void GetSparePartsInfoForDownload(Database db, SparePartsFilterInfo filter, string fileName)
        {
            string path = string.Empty;
            try
            {
                int columnIndex = 1;
                int rowIndex = 1;
                int minValue = 1;

                path = ConfigurationManager.AppSettings["LogFileLocation"];
                string completeFileName = fileName + ".xls";
                string targetFile = path + completeFileName;

                FileInfo templateFile = new FileInfo(targetFile);
                if (templateFile.Exists)//for overwrite on existing file if exist.
                {
                    templateFile.Delete();
                    templateFile = new FileInfo(targetFile);
                }

                using (ExcelPackage package = new ExcelPackage(templateFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SparePartsInfo");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#B7DEE8");

                    //Bind Header Column for Excel Sheet
                    BindSparePartsExcelHeaderInfo(db, filter.SiteID, worksheet, colFromHex, package, rowIndex, columnIndex, minValue);

                    //Get Content for excel sheet
                    GetExcelContentForSpareParts(db, worksheet, filter, targetFile);

                    package.Save();
                    package.Dispose();
                }

                string txtFile = path + "\\" + fileName + "_tempSuccess.txt";
                using (FileStream fStream = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sWriter = new StreamWriter(fStream))
                    {
                        sWriter.Write("Excel sheet downloaded successfully");
                        sWriter.Close();
                    }
                    fStream.Close();
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "\\" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);

                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw3 = new StreamWriter(fs3))
                    {
                        sw3.Write(exceptionErrorMessage);
                        sw3.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while downloading spare parts info excel ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, " SiteID: " + filter.SiteID + ", UserID: " + filter.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        private void GetExcelContentForSpareParts(Database db, ExcelWorksheet workSheet, SparePartsFilterInfo filterInfo, string targetFile)
        {
            IDataReader dataReaderGradeGrindingType = null;
            try
            {
                int columnIndex = 1;
                int rowIndex = 2;

                string sqlViewName = DynamicGrid.Common.GetObjectViewName(db, filterInfo.DynamicGridObjectID);

                if (sqlViewName.Length > 0)
                {
                    List<DynamicGrid.SQLColumnFilterInfo> sqlColumnFilterInfoList = null;
                    if (filterInfo.DynamicGridSearchInfo != null && filterInfo.DynamicGridSearchInfo.DynamicGridSearchFieldValueInfoList.Count > 0)
                    {
                        Common.GetDynamicSearchFieldValueInfo(db, filterInfo.DynamicGridSearchInfo.DynamicGridSearchFieldValueInfoList, ref sqlColumnFilterInfoList);
                    }

                    dataReaderGradeGrindingType = MaintenanceDAL.GetSparePartsInfoFromView(db, filterInfo.SiteID, sqlViewName, sqlColumnFilterInfoList);
                    while (dataReaderGradeGrindingType.Read())
                    {
                        columnIndex = 1;
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderGradeGrindingType, "FMATCODE");
                        columnIndex++;
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderGradeGrindingType, "FMATDESC");
                        columnIndex++;
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderGradeGrindingType, "FCATEGORY");
                        columnIndex++;
                        workSheet.Cells[rowIndex, columnIndex].Value = Common.GetSafeString(dataReaderGradeGrindingType, "FUNIT");
                        rowIndex++;
                    }
                    dataReaderGradeGrindingType.Close();
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Failed to download spare parts information excel sheet", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "UserID: " + filterInfo.UserID + " ;SiteID:" + filterInfo.SiteID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderGradeGrindingType != null && !dataReaderGradeGrindingType.IsClosed)
                    dataReaderGradeGrindingType.Close();
            }
        }

        #endregion

        #region Upload Excel Info

        public string UploadSparePartsinfoExcel(BasicParam basicParam, string fileName)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                UploadFilesInfo asyncGradeGrindingTypeInfo = new UploadFilesInfo(InsertSparePartsInfoFromExcel);
                AsyncCallback cb = new AsyncCallback(send);
                asyncGradeGrindingTypeInfo.BeginInvoke(db, basicParam, fileName, cb, null);
                return fileName;
            }
            catch
            {
                return string.Empty;
            }
        }

        private void InsertSparePartsInfoFromExcel(Database db, BasicParam basicParam, string fileName)
        {
            int inserted = 0;
            int updated = 0;
            int failure = 0;
            int deleted = 0;

            string failureMessage = string.Empty;
            string insertMessage = string.Empty;
            string updateMessage = string.Empty;
            string deleteMessage = string.Empty;

            string path = ConfigurationManager.AppSettings["LogFileLocation"];
            try
            {
                int createdOn = 0;
                int createdTime = 0;

                string completePath = path + fileName;
                string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + completePath + "; Extended Properties='Excel 8.0;HDR=Yes;IMEX=1'";
                OleDbConnection olDbObjConn = new OleDbConnection(connectionString);

                OleDbDataAdapter oledbObject = null;
                string logType = LogTypes.Config_Measuring_Point.ToString();

                oledbObject = new OleDbDataAdapter("Select * from [SparePartsInfo$]", olDbObjConn);

                DataSet dtExcelDataSet = new DataSet();
                oledbObject.Fill(dtExcelDataSet);
                olDbObjConn.Close();

                DataTable excelDataTable = dtExcelDataSet.Tables[0];
                if (excelDataTable.Rows.Count > 0)
                {
                    Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref createdOn, ref createdTime);
                    int lineNumber = 2;

                    DbTransaction transaction = null;
                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        transaction = dbConnection.BeginTransaction();
                        try
                        {
                            foreach (DataRow row in excelDataTable.Rows)
                            {
                                #region ReadExcel
                                string materailCode = string.Empty;
                                string materailDescription = string.Empty;
                                string uom = string.Empty;
                                string category = string.Empty;
                                int categoryID = 0;
                                char excelStatus = 'A';

                                if (excelDataTable.Columns.Contains(Language_Resources.SpareParts_Resource.materialCode))
                                    materailCode = row[Language_Resources.SpareParts_Resource.materialCode].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.SpareParts_Resource.description))
                                    materailDescription = row[Language_Resources.SpareParts_Resource.description].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.SpareParts_Resource.category))
                                    category = row[Language_Resources.SpareParts_Resource.category].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.SpareParts_Resource.uom))
                                    uom = row[Language_Resources.SpareParts_Resource.uom].ToString().Trim();

                                if (excelDataTable.Columns.Contains(Language_Resources.SpareParts_Resource.status))
                                    excelStatus = row[Language_Resources.SpareParts_Resource.status].ToString().Trim() == "Mark Delete" ? 'I' : 'A';
                                #endregion

                                if (materailCode.Length > 0 || materailDescription.Length > 0 || uom.Length > 0 || category.Length > 0)
                                {
                                    if (materailCode.Length == 0)
                                    {
                                        failureMessage += "Material code is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (materailDescription.Length == 0)
                                    {
                                        failureMessage += "Material description is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (uom.Length == 0)
                                    {
                                        failureMessage += "Unit of measurement is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (category.Length == 0)
                                    {
                                        failureMessage += "Category is empty in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (materailCode.Length > 18)
                                    {
                                        failureMessage += "Material code length should be less than 18 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (materailDescription.Length > 300)
                                    {
                                        failureMessage += "Material description length should be less than 300 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (uom.Length > 3)
                                    {
                                        failureMessage += "Unit of measurement length sould be less than 3 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else if (category.Length > 50)
                                    {
                                        failureMessage += "Category length should be less than 50 in line number : " + lineNumber.ToString() + Environment.NewLine;
                                        failure++;
                                    }
                                    else
                                    {
                                        string categoryStatus = string.Empty;
                                        string sparePartsStatus = string.Empty;
                                        categoryID = MaintenanceDAL.GetMaintMasterID(db, transaction, basicParam.SiteID, 0, category.Trim(), MasterDataType.SPARE_PARTS.ToString(), out categoryStatus);
                                        if (categoryID == 0)
                                        {
                                            categoryID = MaintenanceDAL.InsertMaintMasterData(db, transaction, basicParam.SiteID, category.Trim(), MasterDataType.SPARE_PARTS.ToString(), string.Empty, basicParam.UserID, createdOn, createdTime);
                                        }
                                        else
                                        {
                                            if (categoryStatus == "I")
                                            {
                                                MaintenanceDAL.UpdateMasterDataStatus(db, transaction, basicParam.SiteID, categoryID, 'A', basicParam.UserID, createdOn, createdTime);
                                            }
                                        }

                                        if (MaintenanceDAL.CheckSparePartsMaterialCodeExist(db, transaction, basicParam.SiteID, materailCode, string.Empty, out sparePartsStatus))
                                        {//Update
                                            if (MaintenanceDAL.CheckSparePartsMaterialCodeExist(db, transaction, basicParam.SiteID, materailCode, "S", out sparePartsStatus))
                                            {
                                                if (sparePartsStatus == "A")
                                                {
                                                    if (excelStatus == 'A')
                                                    {
                                                        MaintenanceDAL.UpdateSparePartsInfo(db, transaction, basicParam.SiteID, materailCode, uom, materailDescription, categoryID, basicParam.UserID, createdOn, createdTime);
                                                        updateMessage += "Spare parts info updated for material code " + materailCode + "in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        updated++;
                                                    }
                                                    else if (excelStatus == 'I')
                                                    {
                                                        if (MaintenanceDAL.CheckTaskSparePartExists(db, null, basicParam.SiteID, 0, materailCode, true))
                                                        {
                                                            failureMessage += "Spare parts : " + materailCode + " is already mapped to sop,can't be deleted in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                            failure++;
                                                        }
                                                        else if (!CheckSparePartsIsUsedInSchedule(db, basicParam.SiteID, materailCode))
                                                        {
                                                            MaintenanceDAL.UpdateSparePartsInfoStatus(db, transaction, basicParam.SiteID, materailCode, excelStatus, basicParam.UserID, createdOn, createdTime);
                                                            if (!MaintenanceDAL.CheckSparePartsCategoryExist(db, transaction, basicParam.SiteID, categoryID))
                                                            {
                                                                MaintenanceDAL.UpdateMasterDataStatus(db, transaction, basicParam.SiteID, categoryID, 'I', basicParam.UserID, createdOn, createdTime);
                                                            }
                                                            deleteMessage += "Spare parts info deleted for material code " + materailCode + "in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                            deleted++;
                                                        }
                                                        else
                                                        {
                                                            failureMessage += "Spare parts : " + materailCode + " is already mapped to order,Can't be deleted in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                            failure++;
                                                        }

                                                    }
                                                }
                                                else if (sparePartsStatus == "I")
                                                {
                                                    if (excelStatus == 'A')
                                                    {
                                                        MaintenanceDAL.UpdateSparePartsInfoStatus(db, transaction, basicParam.SiteID, materailCode, excelStatus, basicParam.UserID, createdOn, createdTime);
                                                        MaintenanceDAL.UpdateSparePartsInfo(db, transaction, basicParam.SiteID, materailCode, uom, materailDescription, categoryID, basicParam.UserID, createdOn, createdTime);
                                                        insertMessage += "Spare parts info inserted for material code " + materailCode + "in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        inserted++;
                                                    }
                                                    else if (excelStatus == 'I')
                                                    {
                                                        failureMessage += "Spare parts info does not exist to delete in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                        failure++;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (excelStatus == 'A')
                                                {
                                                    failureMessage += "Material code already exists in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                }
                                                else
                                                {
                                                    failureMessage += "Spare parts info does not exist to delete in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                    failure++;
                                                }
                                            }

                                        }
                                        else
                                        {//Insert
                                            if (excelStatus == 'I')
                                            {
                                                failureMessage += "Spare parts info does not exist to delete in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                failure++;
                                            }
                                            else
                                            {
                                                MaintenanceDAL.InsertSparePartsInfo(db, transaction, basicParam.SiteID, materailCode, materailDescription, Convert.ToChar(MaterialType.SPARE_PART), uom, categoryID, basicParam.UserID, createdOn, createdTime);
                                                insertMessage += "Spare parts info inserted for material code " + materailCode + "in line number : " + lineNumber.ToString() + Environment.NewLine;
                                                inserted++;
                                            }
                                        }
                                    }
                                }

                                lineNumber++;
                            }
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            throw ex;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }
                }
                string logFileName = fileName + "_tempSuccess.txt";
                string targetFile = path + logFileName;
                using (FileStream fs = new FileStream(targetFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine("Spare Parts Information Upload log" + "_" + DateTime.Now.ToString());
                        sw.WriteLine("-------------------------------------------------------------------------------------------");
                        sw.WriteLine("Successfully Inserted :" + inserted.ToString());
                        sw.WriteLine("Successfully Updated :" + updated.ToString());
                        sw.WriteLine("Successfully Deleted :" + deleted.ToString());
                        sw.WriteLine("Failure :" + failure.ToString());
                        if (insertMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Inserted------------------------------------------------------------------------");
                            sw.WriteLine(insertMessage);
                        }
                        if (updateMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Updated-------------------------------------------------------------------------");
                            sw.WriteLine(updateMessage);
                        }
                        if (deleteMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Deleted-------------------------------------------------------------------------");
                            sw.WriteLine(deleteMessage);
                        }
                        if (failureMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                            sw.WriteLine(failureMessage);
                        }
                        sw.Close();
                        fs.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string txtFile = path + "//" + fileName + "_tempError.txt";
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                using (FileStream fs3 = new FileStream(txtFile, FileMode.Create, FileAccess.Write))
                {
                    using (StreamWriter sw = new StreamWriter(fs3))
                    {
                        sw.WriteLine("Spare Parts Information Upload log" + "_" + DateTime.Now.ToString());
                        sw.WriteLine("-------------------------------------------------------------------------------------------");
                        sw.WriteLine("Successfully Inserted :" + inserted.ToString());
                        sw.WriteLine("Successfully Updated :" + updated.ToString());
                        sw.WriteLine("Failure :" + failure.ToString());
                        if (insertMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Inserted------------------------------------------------------------------------");
                            sw.WriteLine(insertMessage);
                        }
                        if (updateMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Updated-------------------------------------------------------------------------");
                            sw.WriteLine(updateMessage);
                        }
                        if (failureMessage.ToString() != string.Empty)
                        {
                            sw.WriteLine("-----------Failure Reason(s)---------------------------------------------------------------");
                            sw.WriteLine(failureMessage);
                        }
                        sw.Write("Error : ");
                        sw.Write(exceptionErrorMessage);
                        sw.Close();
                    }
                    fs3.Close();
                }
                Common.LogException(ex, "MaintenanceService", "Error while uploading spare parts information", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID:" + basicParam.SiteID + " ;UserID: " + basicParam.UserID);
            }
        }

        private bool CheckSparePartsIsUsedInSchedule(Database db, int siteID, string materialCode)
        {
            IDataReader dataReaderInfo = null;
            IDataReader dataReaderScheduleInfo = null;
            try
            {
                int maintScheduleID = 0;
                char maintScheduleType = 'S';

                dataReaderScheduleInfo = MaintenanceDAL.GetSparePartsScheduleDetails(db, siteID, materialCode);
                while (dataReaderScheduleInfo.Read())
                {
                    maintScheduleID = Common.GetSafeInt32(dataReaderScheduleInfo, "FSCHEDULEID");
                    maintScheduleType = Convert.ToChar(Common.GetSafeString(dataReaderScheduleInfo, "FSCHEDULE_TYPE").Trim());

                    if (maintScheduleType == (char)ScheduleType.Schedule)
                    {
                        dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, siteID, maintScheduleID, string.Empty, true);
                        if (dataReaderInfo.Read())
                        {
                            dataReaderInfo.Close();
                            dataReaderScheduleInfo.Close();
                            return true; //work order is in-progress, cannot delete this schedule
                        }
                        dataReaderInfo.Close();
                    }
                    else
                    {
                        dataReaderInfo = MaintenanceDAL.CheckDirectWorkOrderExists(db, null, siteID, maintScheduleID, string.Empty, false);
                        string workOrderStatus = string.Empty;
                        if (dataReaderInfo.Read())
                        {
                            workOrderStatus = Common.GetSafeString(dataReaderInfo, "FWORKORDERSTATUS");
                        }
                        dataReaderInfo.Close();

                        if (!string.IsNullOrEmpty(workOrderStatus) && workOrderStatus != WorkOrderStatus.SCHEDULED.ToString())
                        {
                            dataReaderScheduleInfo.Close();
                            return true; //work order is in-progress, cannot delete this schedule
                        }
                    }
                }
                dataReaderScheduleInfo.Close();
                return false;

            }
            catch
            {
                throw;
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
                if (dataReaderScheduleInfo != null && !dataReaderScheduleInfo.IsClosed)
                    dataReaderScheduleInfo.Close();

            }
        }
        #endregion

        #endregion

        #region Notifications
        public NotificationList GetNotificationList(BasicParam basicParam, NotificationtFilter notificationFilter)
        {
            IDataReader dataReaderNotificationList = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                NotificationList notificationList = new NotificationList();
                NotificationBasicInfo notificationInfo = null;

                string siteDateFormat = string.Empty;
                string siteTimeFormat = string.Empty;
                Common.GetSiteDateTimeFormat(db, basicParam.SiteID, ref siteDateFormat, ref siteTimeFormat);

                dataReaderNotificationList = MaintenanceDAL.GetNotificationList(db, null, basicParam.SiteID, notificationFilter.FLocationID, notificationFilter.EquipmentID, notificationFilter.SelectionID, notificationFilter.SearchString, notificationFilter.PageSize, notificationFilter.PageIndex, notificationFilter.SortType);
                while (dataReaderNotificationList.Read())
                {
                    notificationInfo = new NotificationBasicInfo();
                    notificationInfo.NotificationID = Common.GetSafeInt32(dataReaderNotificationList, "FSCHEDULEID");
                    notificationInfo.NotificationName = Common.GetSafeString(dataReaderNotificationList, "FMAINTENANCENAME");
                    notificationInfo.NotificationStatus = SetNotificationStatus(Common.GetSafeString(dataReaderNotificationList, "FSCHEDULESTATUS").Trim());
                    int createdDate = Common.GetSafeInt32(dataReaderNotificationList, "FCREATEDON");

                    if (createdDate > 0)
                        notificationInfo.CreatedOn = Common.GetDateFormat(createdDate, siteDateFormat);

                    if (notificationList.TotalRecords == 0)
                        notificationList.TotalRecords = Common.GetSafeInt32(dataReaderNotificationList, "FCOUNT");

                    notificationList.NotificationInoList.Add(notificationInfo);
                }
                dataReaderNotificationList.Close();
                return notificationList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while getting notification info list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderNotificationList != null && !dataReaderNotificationList.IsClosed)
                    dataReaderNotificationList.Close();
            }
        }

        internal NotificationStatus? SetNotificationStatus(string status)
        {
            NotificationStatus? notificationStatus = null;
            switch (status.ToUpper())
            {
                case "CREATED":
                    notificationStatus = NotificationStatus.CREATED;
                    break;
                case "ASSIGNED":
                    notificationStatus = NotificationStatus.ASSIGNED;
                    break;
                case "REJECTED":
                    notificationStatus = NotificationStatus.REJECTED;
                    break;
                case "COMPLETED":
                    notificationStatus = NotificationStatus.COMPLETED;
                    break;
                case "INPROGRESS":
                    notificationStatus = NotificationStatus.INPROGRESS;
                    break;
                case "ACCEPTED":
                    notificationStatus = NotificationStatus.ACCEPTED;
                    break;
                case "CLOSED":
                    notificationStatus = NotificationStatus.CLOSED;
                    break;
            }
            return notificationStatus;
        }

        public NotificationInfo GetNotificationInfo(BasicParam basicParam, int notificationID)
        {
            IDataReader dataReaderNotificationInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                NotificationInfo notificationInfo = null;

                SiteDateTimeFormatInfo siteDateTimeFormatInfo = Common.GetSiteDateTimeFormatInfo(db, basicParam.SiteID);
                int startDate = 0;
                dataReaderNotificationInfo = MaintenanceDAL.GetNotificationList(db, null, basicParam.SiteID, 0, 0, notificationID, string.Empty, 0, 0, string.Empty);
                while (dataReaderNotificationInfo.Read())
                {
                    notificationInfo = new NotificationInfo();
                    notificationInfo.NotificationID = Common.GetSafeInt32(dataReaderNotificationInfo, "FSCHEDULEID");
                    notificationInfo.NotificationName = Common.GetSafeString(dataReaderNotificationInfo, "FMAINTENANCENAME");
                    notificationInfo.NotificationStatus = SetNotificationStatus(Common.GetSafeString(dataReaderNotificationInfo, "FSCHEDULESTATUS").Trim());
                    notificationInfo.FLocationID = Common.GetSafeInt32(dataReaderNotificationInfo, "FLOCATIONID");
                    notificationInfo.EquipmentID = Common.GetSafeInt32(dataReaderNotificationInfo, "FEQUIPMENTID");
                    notificationInfo.FLocationName = Common.GetSafeString(dataReaderNotificationInfo, "FLOCATIONNAME");
                    notificationInfo.EquipmentName = Common.GetSafeString(dataReaderNotificationInfo, "FEQUIPMENTNAME");
                    notificationInfo.NotificationTypeID = Common.GetSafeInt32(dataReaderNotificationInfo, "FNOTIFY_TYPEID");
                    notificationInfo.Priority = Common.GetSafeString(dataReaderNotificationInfo, "FPRIORITYTYPE");
                    notificationInfo.Description = Common.GetSafeString(dataReaderNotificationInfo, "FMAINDESCRIPTION");
                    notificationInfo.WorkOrderNumber = Common.GetSafeString(dataReaderNotificationInfo, "FNOTIFYWORKORDERID");
                    notificationInfo.RejectedReason = Common.GetSafeString(dataReaderNotificationInfo, "FREMARKS");
                    notificationInfo.NotificationType = Common.GetSafeString(dataReaderNotificationInfo, "FNOTIFY_TYPE");
                    notificationInfo.PriorityValue = Common.GetSafeString(dataReaderNotificationInfo, "FPRIORITY");
                    notificationInfo.CreatedOn = Common.GetDateFormat(Common.GetSafeInt32(dataReaderNotificationInfo, "FCREATEDON"), siteDateTimeFormatInfo.DateFormat);
                    notificationInfo.CreatedBy = Common.GetSafeString(dataReaderNotificationInfo, "FCREATEDBY");
                    notificationInfo.RequestedEndDate = Common.GetSafeInt32(dataReaderNotificationInfo, "FREQUESTED_ENDDATE");
                    notificationInfo.FLocationCode = Common.GetSafeString(dataReaderNotificationInfo, "FLOCATIONCODE");
                    notificationInfo.EquipmentCode = Common.GetSafeString(dataReaderNotificationInfo, "FEQUIPMENTCODE");
                    startDate = Common.GetSafeInt32(dataReaderNotificationInfo, "FCLOSEDON");
                    if (startDate > 0)
                        notificationInfo.ClosedOn = Common.GetDateFormat(startDate, siteDateTimeFormatInfo.DateFormat);

                    notificationInfo.ClosedBy = Common.GetSafeString(dataReaderNotificationInfo, "FCLOSEDBY");
                    notificationInfo.TimeTaken = Common.GetSafeInt32(dataReaderNotificationInfo, "FTIMETAKEN");
                    notificationInfo.TimeTakenUnit = (UnitOfTime)Convert.ToChar(Common.GetSafeChar(dataReaderNotificationInfo, "FTIMETAKENUNIT"));
                    if (notificationInfo.TimeTakenUnit != UnitOfTime.Minutes || notificationInfo.TimeTakenUnit != UnitOfTime.Hours)
                        notificationInfo.TimeTakenUnit = UnitOfTime.Minutes;
                    if (notificationInfo.TimeTakenUnit == UnitOfTime.Hours)
                    {
                        TimeSpan hourTimeSpan = TimeSpan.FromMinutes(notificationInfo.TimeTaken);
                        notificationInfo.TimeTaken = Convert.ToInt32(hourTimeSpan.TotalHours);
                    }

                    startDate = Common.GetSafeInt32(dataReaderNotificationInfo, "FWORK_STARTDATE");
                    if (startDate > 0)
                        notificationInfo.StartTime = Common.GetDateFormat(startDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(dataReaderNotificationInfo, "FWORK_STARTTIME"), siteDateTimeFormatInfo.TimeFormat);

                    startDate = Common.GetSafeInt32(dataReaderNotificationInfo, "FWORK_ENDDATE");
                    if (startDate > 0)
                        notificationInfo.EndTime = Common.GetDateFormat(startDate, siteDateTimeFormatInfo.DateFormat) + " " + Common.GetTimeFormat(Common.GetSafeInt32(dataReaderNotificationInfo, "FWORK_ENDTIME"), siteDateTimeFormatInfo.TimeFormat);

                    notificationInfo.Remark = Common.GetSafeString(dataReaderNotificationInfo, "FCLOSEREMARK");
                }
                dataReaderNotificationInfo.Close();

                if (notificationInfo != null && notificationInfo.WorkOrderNumber != "0")
                {
                    notificationInfo.AttachedSchedlueID = MaintenanceDAL.GetAttachedWorkOrderScheduleID(db, null, basicParam.SiteID, notificationInfo.WorkOrderNumber);

                }
                return notificationInfo;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while getting notification info list ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderNotificationInfo != null && !dataReaderNotificationInfo.IsClosed)
                    dataReaderNotificationInfo.Close();
            }
        }

        public int InsertUpdateNotificationInfo(BasicParam basicParam, NotificationInfo notificationInfo)
        {

            try
            {
                /* Validation start*/

                if (string.IsNullOrEmpty(notificationInfo.NotificationName))
                {
                    return -1;
                }
                if (notificationInfo.FLocationID <= 0 && notificationInfo.EquipmentID <= 0)
                {
                    return -2;
                }
                if (notificationInfo.NotificationTypeID <= 0)
                {
                    return -3;
                }
                if (string.IsNullOrEmpty(notificationInfo.Priority))
                {
                    return -4;
                }

                /*Validation End*/
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        int notificationID = 0;
                        #region Insert or Update Maintenance Info[Notification details]             
                        //If attachments are uploaded before saving notification the system generates notification id as it is required for upload.
                        //Same ID would be used while saving notification.
                        if (notificationInfo.NotificationID == 0 || notificationInfo.SequenceID > 0)
                        {
                            if (notificationInfo.SequenceID > 0)
                                notificationInfo.NotificationID = notificationInfo.SequenceID;
                            else
                                notificationInfo.NotificationID = MaintenanceDAL.GetNextNotificationID(db);

                            //Insert notification info Info
                            notificationID = MaintenanceDAL.InsertNotificationInfo(db, transaction, notificationInfo.NotificationID, basicParam.SiteID, notificationInfo.NotificationName, notificationInfo.Description, (char)ScheduleType.Notification
                            , notificationInfo.Priority, notificationInfo.FLocationID, notificationInfo.EquipmentID, notificationInfo.NotificationTypeID, basicParam.UserID, currentDate, currentTime, basicParam.UserID, currentDate, currentTime, NotificationStatus.CREATED.ToString(),notificationInfo.RequestedEndDate);
                        }
                        else
                        {
                            //Update Notification info
                            MaintenanceDAL.UpdateMaintenanceInfo(db, transaction, basicParam.SiteID, notificationInfo.NotificationID, notificationInfo.NotificationName, notificationInfo.Description, (char)ScheduleType.Notification
                                 , 0, notificationInfo.Priority, notificationInfo.FLocationID, notificationInfo.EquipmentID, 0, notificationInfo.NotificationTypeID, notificationInfo.RejectedReason, basicParam.UserID, currentDate, currentTime, notificationInfo.RequestedEndDate);

                            notificationID = notificationInfo.NotificationID;
                        }
                        #endregion

                        transaction.Commit();
                        return notificationID;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while inserting or updating notification info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public int DeleteNotificationInfo(BasicParam basicParam, int notificationID)
        {
            IDataReader dataReaderNotificationInfo = null;
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                string workOrderID = string.Empty;
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                dataReaderNotificationInfo = MaintenanceDAL.GetNotificationList(db, null, basicParam.SiteID, 0, 0, notificationID, string.Empty, 0, 0, string.Empty);

                if (dataReaderNotificationInfo.Read())
                {
                    workOrderID = Common.GetSafeString(dataReaderNotificationInfo, "FNOTIFYWORKORDERID");
                }
                dataReaderNotificationInfo.Close();

                if (string.IsNullOrEmpty(workOrderID) || workOrderID.Trim() == "0")
                {
                    DbTransaction transaction = null;
                    using (DbConnection dbConnection = db.CreateConnection())
                    {
                        dbConnection.Open();
                        transaction = dbConnection.BeginTransaction();

                        try
                        {
                            //In-activating documents & images against equipment model
                            MaintenanceDAL.UpdateDocumentsInfoStatus(db, transaction, basicParam.SiteID, notificationID, "NOTIFICATION", 'I', basicParam.UserID, currentDate, currentTime);

                            MaintenanceDAL.DeleteMaintenanceInfo(db, transaction, basicParam.SiteID, notificationID, basicParam.UserID, currentDate, currentTime);

                            transaction.Commit();
                        }
                        catch
                        {
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            dbConnection.Close();
                        }
                    }
                }
                else
                {
                    return -1;//Workorder is attached to the notification, deletion is not allowed
                }
                return 1;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while deleting notification info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderNotificationInfo != null && !dataReaderNotificationInfo.IsClosed)
                    dataReaderNotificationInfo.Close();
            }
        }

        public List<TypeValueInfo> GetEquipmentListForDropDown(EquipmentFilterInfo equipmentFilterInfo)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                TypeValueInfo equipmentInformation = null;
                List<TypeValueInfo> equipmentInfoList = new List<TypeValueInfo>();
                int fLocationID = -1;
                bool restrictAccess = true;

                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int accessLevelID = Common.GetUserAccessLevelID(db, equipmentFilterInfo.UserID);
                if (accessLevelID != 5)
                {
                    restrictAccess = false;
                }

                if (!string.IsNullOrEmpty(equipmentFilterInfo.SearchLocationIDs))
                {
                    Int32.TryParse(equipmentFilterInfo.SearchLocationIDs, out fLocationID);
                }

                dataReaderInfo = MaintenanceDAL.GetEquipmentInfo(db, equipmentFilterInfo.SiteID, 0, 0, string.Empty, fLocationID, 0, Convert.ToChar(equipmentFilterInfo.InfoType), equipmentFilterInfo.SortType, equipmentFilterInfo.UserID, restrictAccess);
                while (dataReaderInfo.Read())
                {
                    equipmentInformation = new TypeValueInfo();
                    equipmentInformation.TypeValue = Common.GetSafeInt32(dataReaderInfo, "FEQUIPMENTID");
                    equipmentInformation.DisplayName = Common.GetSafeString(dataReaderInfo, "FEQUIPMENTNAME");
                    equipmentInfoList.Add(equipmentInformation);
                }
                dataReaderInfo.Close();

                return equipmentInfoList;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while fetching equipment list info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + equipmentFilterInfo.SiteID + ", UserID : " + equipmentFilterInfo.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public List<DocumentInfo> GetAttachmentDetailsForNotification(BasicParam basicParam, int notificationID)
        {
            IDataReader dataReaderInfo = null;
            try
            {
                List<DocumentInfo> attachmentList = new List<DocumentInfo>();
                DocumentInfo attachmentInfo = null;
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                string attachmentPath = ConfigurationManager.AppSettings["NotificationAttachmentPath"].ToString().TrimEnd('/') + "/" + basicParam.SiteID + "/" + notificationID;

                dataReaderInfo = MaintenanceDAL.GetAttachmentDetailsForNotification(db, basicParam.SiteID, notificationID);
                while (dataReaderInfo.Read())
                {
                    attachmentInfo = new DocumentInfo();
                    attachmentInfo.DocumentID = Common.GetSafeInt32(dataReaderInfo, "FDOCUMENTID");
                    attachmentInfo.DocumentName = Common.GetSafeString(dataReaderInfo, "FDOCUMENTNAME");
                    attachmentInfo.DocumentType = (DocumentType)Enum.ToObject(typeof(DocumentType), Common.GetSafeChar(dataReaderInfo, "FDOCUMENTTYPE"));
                    attachmentInfo.DownloadPath = attachmentPath + "/" + attachmentInfo.DocumentName;
                    if (attachmentInfo.DocumentType == DocumentType.IMAGE)
                        attachmentInfo.ThumbnailPath = attachmentPath + "/Thumbnail/" + attachmentInfo.DocumentName;

                    attachmentList.Add(attachmentInfo);
                }
                dataReaderInfo.Close();

                return attachmentList;
            }
            catch (Exception ex)
            {
                Common.LogException(ex, "MaintenanceService", "Error while fetching attachment details for notification", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(ex.Message);
            }
            finally
            {
                if (dataReaderInfo != null && !dataReaderInfo.IsClosed)
                    dataReaderInfo.Close();
            }
        }

        public int GetNextNotificationSequenceID(BasicParam basicParam)
        {
            if (basicParam.SiteID > 0 && basicParam.UserID > 0)
            {
                try
                {
                    Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                    return MaintenanceDAL.GetNextNotificationID(db);
                }
                catch (Exception ex)
                {
                    string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                    Common.LogException(ex, "MaintenanceService", "Error while getting sequenceID for notification ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID : " + basicParam.SiteID + ", UserID : " + basicParam.UserID);
                    throw new FaultException(exceptionErrorMessage);
                }
            }
            else
            {
                return 0;
            }
        }

        public int AcceptNotificationInfo(BasicParam basicParam, int notificationID)
        {
            try
            {
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");
                int currentDate = 0;
                int currentTime = 0;
                
                //Notification is accepted 
                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);
                MaintenanceDAL.UpdateNotificationStatus(db, null, basicParam.SiteID, notificationID, string.Empty, NotificationStatus.ACCEPTED.ToString(), basicParam.UserID, currentDate, currentTime);
                return notificationID;
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintainenceService", "Error while accepting notification info", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }

        public int CloseNotificationInfo(BasicParam basicParam, NotificationInfo notificationInfo)
        {

            try
            {
                /* Validation start*/

                if (notificationInfo.TimeTaken==0)
                {
                    return -1;
                }
                if (notificationInfo.WorkStartDate <= 0)
                {
                    return -2;
                }
                if (notificationInfo.WorkEndDate <= 0)
                {
                    return -3;
                }

                /*Validation End*/
                Database db = DatabaseFactory.CreateDatabase("ApplicationConnection");

                int currentDate = 0;
                int currentTime = 0;
                char isNotificationOrder = 'C';

                Common.GetCurrentSiteDateTime(db, basicParam.SiteID, ref currentDate, ref currentTime);

                DbTransaction transaction = null;
                using (DbConnection dbConnection = db.CreateConnection())
                {
                    dbConnection.Open();
                    transaction = dbConnection.BeginTransaction();
                    try
                    {
                        double estimatedTimeInminutes = 0;
                        switch (notificationInfo.TimeTakenUnit)
                        {
                            case UnitOfTime.Hours:
                                TimeSpan hourTimeSpan = TimeSpan.FromHours(notificationInfo.TimeTaken);
                                estimatedTimeInminutes = hourTimeSpan.TotalMinutes;
                                break;
                            case UnitOfTime.Minutes:
                                TimeSpan minTimeSpan = TimeSpan.FromMinutes(notificationInfo.TimeTaken);
                                estimatedTimeInminutes = minTimeSpan.TotalMinutes;
                                break;
                        }

                        string workOrderID = MaintenanceDAL.GetNextMaintenanceWorkOrder(db);

                        MaintenanceDAL.InsertWorkOrderForNotificationClose(db, transaction, basicParam.SiteID, workOrderID, 0, notificationInfo.NotificationID, notificationInfo.WorkStartDate, notificationInfo.WorkStartTime
                            , notificationInfo.WorkEndDate, notificationInfo.WorkEndTime, estimatedTimeInminutes, Convert.ToChar(notificationInfo.TimeTakenUnit),  notificationInfo.Remark, WorkOrderStatus.CLOSED.ToString(), isNotificationOrder, basicParam.UserID, currentDate, currentTime);

                        MaintenanceDAL.UpdateNotificationStatus(db, transaction, basicParam.SiteID, notificationInfo.NotificationID, workOrderID, NotificationStatus.CLOSED.ToString(), basicParam.UserID, currentDate, currentTime);
                        MaintenanceDAL.UpdateNotificationWorkOrder(db, transaction, basicParam.SiteID, notificationInfo.NotificationID, workOrderID, basicParam.UserID, currentDate, currentTime);

                        transaction.Commit();
                        return notificationInfo.NotificationID;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        dbConnection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                string exceptionErrorMessage = Common.GetErrorMessage(ex.Message);
                Common.LogException(ex, "MaintenanceService", "Error while closing notification info ", "Vegam_MaintenanceService", System.Reflection.MethodBase.GetCurrentMethod().Name, "SiteID: " + basicParam.SiteID + ";UserID: " + basicParam.UserID);
                throw new FaultException(exceptionErrorMessage);
            }
        }
      
        #endregion
    }
}
